(globalThis.TURBOPACK = globalThis.TURBOPACK || []).push([typeof document === "object" ? document.currentScript : undefined, {

"[project]/node_modules/claygl/src/core/mixin/extend.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * Extend a sub class from base class
 * @param {object|Function} makeDefaultOpt default option of this sub class, method of the sub can use this.xxx to access this option
 * @param {Function} [initialize] Initialize after the sub class is instantiated
 * @param {Object} [proto] Prototype methods/properties of the sub class
 * @memberOf clay.core.mixin.extend
 * @return {Function}
 */ __turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
function derive(makeDefaultOpt, initialize /*optional*/ , proto /*optional*/ ) {
    if (typeof initialize == 'object') {
        proto = initialize;
        initialize = null;
    }
    var _super = this;
    var propList;
    if (!(makeDefaultOpt instanceof Function)) {
        // Optimize the property iterate if it have been fixed
        propList = [];
        for(var propName in makeDefaultOpt){
            if (makeDefaultOpt.hasOwnProperty(propName)) {
                propList.push(propName);
            }
        }
    }
    var sub = function(options) {
        // call super constructor
        _super.apply(this, arguments);
        if (makeDefaultOpt instanceof Function) {
            // Invoke makeDefaultOpt each time if it is a function, So we can make sure each
            // property in the object will not be shared by mutiple instances
            extend(this, makeDefaultOpt.call(this, options));
        } else {
            extendWithPropList(this, makeDefaultOpt, propList);
        }
        if (this.constructor === sub) {
            // Initialize function will be called in the order of inherit
            var initializers = sub.__initializers__;
            for(var i = 0; i < initializers.length; i++){
                initializers[i].apply(this, arguments);
            }
        }
    };
    // save super constructor
    sub.__super__ = _super;
    // Initialize function will be called after all the super constructor is called
    if (!_super.__initializers__) {
        sub.__initializers__ = [];
    } else {
        sub.__initializers__ = _super.__initializers__.slice();
    }
    if (initialize) {
        sub.__initializers__.push(initialize);
    }
    var Ctor = function() {};
    Ctor.prototype = _super.prototype;
    sub.prototype = new Ctor();
    sub.prototype.constructor = sub;
    extend(sub.prototype, proto);
    // extend the derive method as a static method;
    sub.extend = _super.extend;
    // DEPCRATED
    sub.derive = _super.extend;
    return sub;
}
function extend(target, source) {
    if (!source) {
        return;
    }
    for(var name in source){
        if (source.hasOwnProperty(name)) {
            target[name] = source[name];
        }
    }
}
function extendWithPropList(target, source, propList) {
    for(var i = 0; i < propList.length; i++){
        var propName = propList[i];
        target[propName] = source[propName];
    }
}
const __TURBOPACK__default__export__ = {
    extend: derive,
    // DEPCRATED
    derive: derive
};
}}),
"[project]/node_modules/claygl/src/core/mixin/notifier.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
function Handler(action, context) {
    this.action = action;
    this.context = context;
}
/**
 * @mixin
 * @alias clay.core.mixin.notifier
 */ var notifier = {
    /**
     * Trigger event
     * @param  {string} name
     */ trigger: function(name) {
        if (!this.hasOwnProperty('__handlers__')) {
            return;
        }
        if (!this.__handlers__.hasOwnProperty(name)) {
            return;
        }
        var hdls = this.__handlers__[name];
        var l = hdls.length, i = -1, args = arguments;
        // Optimize advise from backbone
        switch(args.length){
            case 1:
                while(++i < l){
                    hdls[i].action.call(hdls[i].context);
                }
                return;
            case 2:
                while(++i < l){
                    hdls[i].action.call(hdls[i].context, args[1]);
                }
                return;
            case 3:
                while(++i < l){
                    hdls[i].action.call(hdls[i].context, args[1], args[2]);
                }
                return;
            case 4:
                while(++i < l){
                    hdls[i].action.call(hdls[i].context, args[1], args[2], args[3]);
                }
                return;
            case 5:
                while(++i < l){
                    hdls[i].action.call(hdls[i].context, args[1], args[2], args[3], args[4]);
                }
                return;
            default:
                while(++i < l){
                    hdls[i].action.apply(hdls[i].context, Array.prototype.slice.call(args, 1));
                }
                return;
        }
    },
    /**
     * Register event handler
     * @param  {string} name
     * @param  {Function} action
     * @param  {Object} [context]
     * @chainable
     */ on: function(name, action, context) {
        if (!name || !action) {
            return;
        }
        var handlers = this.__handlers__ || (this.__handlers__ = {});
        if (!handlers[name]) {
            handlers[name] = [];
        } else {
            if (this.has(name, action)) {
                return;
            }
        }
        var handler = new Handler(action, context || this);
        handlers[name].push(handler);
        return this;
    },
    /**
     * Register event, event will only be triggered once and then removed
     * @param  {string} name
     * @param  {Function} action
     * @param  {Object} [context]
     * @chainable
     */ once: function(name, action, context) {
        if (!name || !action) {
            return;
        }
        var self = this;
        function wrapper() {
            self.off(name, wrapper);
            action.apply(this, arguments);
        }
        return this.on(name, wrapper, context);
    },
    /**
     * Alias of once('before' + name)
     * @param  {string} name
     * @param  {Function} action
     * @param  {Object} [context]
     * @chainable
     */ before: function(name, action, context) {
        if (!name || !action) {
            return;
        }
        name = 'before' + name;
        return this.on(name, action, context);
    },
    /**
     * Alias of once('after' + name)
     * @param  {string} name
     * @param  {Function} action
     * @param  {Object} [context]
     * @chainable
     */ after: function(name, action, context) {
        if (!name || !action) {
            return;
        }
        name = 'after' + name;
        return this.on(name, action, context);
    },
    /**
     * Alias of on('success')
     * @param  {Function} action
     * @param  {Object} [context]
     * @chainable
     */ success: function(action, context) {
        return this.once('success', action, context);
    },
    /**
     * Alias of on('error')
     * @param  {Function} action
     * @param  {Object} [context]
     * @chainable
     */ error: function(action, context) {
        return this.once('error', action, context);
    },
    /**
     * Remove event listener
     * @param  {Function} action
     * @param  {Object} [context]
     * @chainable
     */ off: function(name, action) {
        var handlers = this.__handlers__ || (this.__handlers__ = {});
        if (!action) {
            handlers[name] = [];
            return;
        }
        if (handlers[name]) {
            var hdls = handlers[name];
            var retains = [];
            for(var i = 0; i < hdls.length; i++){
                if (action && hdls[i].action !== action) {
                    retains.push(hdls[i]);
                }
            }
            handlers[name] = retains;
        }
        return this;
    },
    /**
     * If registered the event handler
     * @param  {string}  name
     * @param  {Function}  action
     * @return {boolean}
     */ has: function(name, action) {
        var handlers = this.__handlers__;
        if (!handlers || !handlers[name]) {
            return false;
        }
        var hdls = handlers[name];
        for(var i = 0; i < hdls.length; i++){
            if (hdls[i].action === action) {
                return true;
            }
        }
    }
};
const __TURBOPACK__default__export__ = notifier;
}}),
"[project]/node_modules/claygl/src/core/util.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var guid = 0;
var ArrayProto = Array.prototype;
var nativeForEach = ArrayProto.forEach;
/**
 * Util functions
 * @namespace clay.core.util
 */ var util = {
    /**
     * Generate GUID
     * @return {number}
     * @memberOf clay.core.util
     */ genGUID: function() {
        return ++guid;
    },
    /**
     * Relative path to absolute path
     * @param  {string} path
     * @param  {string} basePath
     * @return {string}
     * @memberOf clay.core.util
     */ relative2absolute: function(path, basePath) {
        if (!basePath || path.match(/^\//)) {
            return path;
        }
        var pathParts = path.split('/');
        var basePathParts = basePath.split('/');
        var item = pathParts[0];
        while(item === '.' || item === '..'){
            if (item === '..') {
                basePathParts.pop();
            }
            pathParts.shift();
            item = pathParts[0];
        }
        return basePathParts.join('/') + '/' + pathParts.join('/');
    },
    /**
     * Extend target with source
     * @param  {Object} target
     * @param  {Object} source
     * @return {Object}
     * @memberOf clay.core.util
     */ extend: function(target, source) {
        if (source) {
            for(var name in source){
                if (source.hasOwnProperty(name)) {
                    target[name] = source[name];
                }
            }
        }
        return target;
    },
    /**
     * Extend properties to target if not exist.
     * @param  {Object} target
     * @param  {Object} source
     * @return {Object}
     * @memberOf clay.core.util
     */ defaults: function(target, source) {
        if (source) {
            for(var propName in source){
                if (target[propName] === undefined) {
                    target[propName] = source[propName];
                }
            }
        }
        return target;
    },
    /**
     * Extend properties with a given property list to avoid for..in.. iteration.
     * @param  {Object} target
     * @param  {Object} source
     * @param  {Array.<string>} propList
     * @return {Object}
     * @memberOf clay.core.util
     */ extendWithPropList: function(target, source, propList) {
        if (source) {
            for(var i = 0; i < propList.length; i++){
                var propName = propList[i];
                target[propName] = source[propName];
            }
        }
        return target;
    },
    /**
     * Extend properties to target if not exist. With a given property list avoid for..in.. iteration.
     * @param  {Object} target
     * @param  {Object} source
     * @param  {Array.<string>} propList
     * @return {Object}
     * @memberOf clay.core.util
     */ defaultsWithPropList: function(target, source, propList) {
        if (source) {
            for(var i = 0; i < propList.length; i++){
                var propName = propList[i];
                if (target[propName] == null) {
                    target[propName] = source[propName];
                }
            }
        }
        return target;
    },
    /**
     * @param  {Object|Array} obj
     * @param  {Function} iterator
     * @param  {Object} [context]
     * @memberOf clay.core.util
     */ each: function(obj, iterator, context) {
        if (!(obj && iterator)) {
            return;
        }
        if (obj.forEach && obj.forEach === nativeForEach) {
            obj.forEach(iterator, context);
        } else if (obj.length === +obj.length) {
            for(var i = 0, len = obj.length; i < len; i++){
                iterator.call(context, obj[i], i, obj);
            }
        } else {
            for(var key in obj){
                if (obj.hasOwnProperty(key)) {
                    iterator.call(context, obj[key], key, obj);
                }
            }
        }
    },
    /**
     * Is object
     * @param  {}  obj
     * @return {boolean}
     * @memberOf clay.core.util
     */ isObject: function(obj) {
        return obj === Object(obj);
    },
    /**
     * Is array ?
     * @param  {}  obj
     * @return {boolean}
     * @memberOf clay.core.util
     */ isArray: function(obj) {
        return Array.isArray(obj);
    },
    /**
     * Is array like, which have a length property
     * @param  {}  obj
     * @return {boolean}
     * @memberOf clay.core.util
     */ isArrayLike: function(obj) {
        if (!obj) {
            return false;
        } else {
            return obj.length === +obj.length;
        }
    },
    /**
     * @param  {} obj
     * @return {}
     * @memberOf clay.core.util
     */ clone: function(obj) {
        if (!util.isObject(obj)) {
            return obj;
        } else if (util.isArray(obj)) {
            return obj.slice();
        } else if (util.isArrayLike(obj)) {
            var ret = new obj.constructor(obj.length);
            for(var i = 0; i < obj.length; i++){
                ret[i] = obj[i];
            }
            return ret;
        } else {
            return util.extend({}, obj);
        }
    }
};
const __TURBOPACK__default__export__ = util;
}}),
"[project]/node_modules/claygl/src/core/Base.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$mixin$2f$extend$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/core/mixin/extend.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$mixin$2f$notifier$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/core/mixin/notifier.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$util$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/core/util.js [app-client] (ecmascript)");
;
;
;
/**
 * Base class of all objects
 * @constructor
 * @alias clay.core.Base
 * @mixes clay.core.mixin.notifier
 */ var Base = function() {
    /**
     * @type {number}
     */ this.__uid__ = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$util$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].genGUID();
};
Base.__initializers__ = [
    function(opts) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$util$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].extend(this, opts);
    }
];
__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$util$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].extend(Base, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$mixin$2f$extend$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]);
__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$util$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].extend(Base.prototype, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$mixin$2f$notifier$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]);
const __TURBOPACK__default__export__ = Base;
}}),
"[project]/node_modules/claygl/src/core/GLInfo.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var EXTENSION_LIST = [
    'OES_texture_float',
    'OES_texture_half_float',
    'OES_texture_float_linear',
    'OES_texture_half_float_linear',
    'OES_standard_derivatives',
    'OES_vertex_array_object',
    'OES_element_index_uint',
    'WEBGL_compressed_texture_s3tc',
    'WEBGL_depth_texture',
    'EXT_texture_filter_anisotropic',
    'EXT_shader_texture_lod',
    'WEBGL_draw_buffers',
    'EXT_frag_depth',
    'EXT_sRGB',
    'ANGLE_instanced_arrays'
];
var PARAMETER_NAMES = [
    'MAX_TEXTURE_SIZE',
    'MAX_CUBE_MAP_TEXTURE_SIZE'
];
function GLInfo(_gl) {
    var extensions = {};
    var parameters = {};
    // Get webgl extension
    for(var i = 0; i < EXTENSION_LIST.length; i++){
        var extName = EXTENSION_LIST[i];
        createExtension(extName);
    }
    // Get parameters
    for(var i = 0; i < PARAMETER_NAMES.length; i++){
        var name = PARAMETER_NAMES[i];
        parameters[name] = _gl.getParameter(_gl[name]);
    }
    this.getExtension = function(name) {
        if (!(name in extensions)) {
            createExtension(name);
        }
        return extensions[name];
    };
    this.getParameter = function(name) {
        return parameters[name];
    };
    function createExtension(name) {
        if (_gl.getExtension) {
            var ext = _gl.getExtension(name);
            if (!ext) {
                ext = _gl.getExtension('MOZ_' + name);
            }
            if (!ext) {
                ext = _gl.getExtension('WEBKIT_' + name);
            }
            extensions[name] = ext;
        }
    }
}
const __TURBOPACK__default__export__ = GLInfo;
}}),
"[project]/node_modules/claygl/src/core/glenum.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * @namespace clay.core.glenum
 * @see http://www.khronos.org/registry/webgl/specs/latest/1.0/#5.14
 */ __turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
const __TURBOPACK__default__export__ = {
    /* ClearBufferMask */ DEPTH_BUFFER_BIT: 0x00000100,
    STENCIL_BUFFER_BIT: 0x00000400,
    COLOR_BUFFER_BIT: 0x00004000,
    /* BeginMode */ POINTS: 0x0000,
    LINES: 0x0001,
    LINE_LOOP: 0x0002,
    LINE_STRIP: 0x0003,
    TRIANGLES: 0x0004,
    TRIANGLE_STRIP: 0x0005,
    TRIANGLE_FAN: 0x0006,
    /* AlphaFunction (not supported in ES20) */ /*      NEVER */ /*      LESS */ /*      EQUAL */ /*      LEQUAL */ /*      GREATER */ /*      NOTEQUAL */ /*      GEQUAL */ /*      ALWAYS */ /* BlendingFactorDest */ ZERO: 0,
    ONE: 1,
    SRC_COLOR: 0x0300,
    ONE_MINUS_SRC_COLOR: 0x0301,
    SRC_ALPHA: 0x0302,
    ONE_MINUS_SRC_ALPHA: 0x0303,
    DST_ALPHA: 0x0304,
    ONE_MINUS_DST_ALPHA: 0x0305,
    /* BlendingFactorSrc */ /*      ZERO */ /*      ONE */ DST_COLOR: 0x0306,
    ONE_MINUS_DST_COLOR: 0x0307,
    SRC_ALPHA_SATURATE: 0x0308,
    /*      SRC_ALPHA */ /*      ONE_MINUS_SRC_ALPHA */ /*      DST_ALPHA */ /*      ONE_MINUS_DST_ALPHA */ /* BlendEquationSeparate */ FUNC_ADD: 0x8006,
    BLEND_EQUATION: 0x8009,
    BLEND_EQUATION_RGB: 0x8009,
    /* same as BLEND_EQUATION */ BLEND_EQUATION_ALPHA: 0x883D,
    /* BlendSubtract */ FUNC_SUBTRACT: 0x800A,
    FUNC_REVERSE_SUBTRACT: 0x800B,
    /* Separate Blend Functions */ BLEND_DST_RGB: 0x80C8,
    BLEND_SRC_RGB: 0x80C9,
    BLEND_DST_ALPHA: 0x80CA,
    BLEND_SRC_ALPHA: 0x80CB,
    CONSTANT_COLOR: 0x8001,
    ONE_MINUS_CONSTANT_COLOR: 0x8002,
    CONSTANT_ALPHA: 0x8003,
    ONE_MINUS_CONSTANT_ALPHA: 0x8004,
    BLEND_COLOR: 0x8005,
    /* Buffer Objects */ ARRAY_BUFFER: 0x8892,
    ELEMENT_ARRAY_BUFFER: 0x8893,
    ARRAY_BUFFER_BINDING: 0x8894,
    ELEMENT_ARRAY_BUFFER_BINDING: 0x8895,
    STREAM_DRAW: 0x88E0,
    STATIC_DRAW: 0x88E4,
    DYNAMIC_DRAW: 0x88E8,
    BUFFER_SIZE: 0x8764,
    BUFFER_USAGE: 0x8765,
    CURRENT_VERTEX_ATTRIB: 0x8626,
    /* CullFaceMode */ FRONT: 0x0404,
    BACK: 0x0405,
    FRONT_AND_BACK: 0x0408,
    /* DepthFunction */ /*      NEVER */ /*      LESS */ /*      EQUAL */ /*      LEQUAL */ /*      GREATER */ /*      NOTEQUAL */ /*      GEQUAL */ /*      ALWAYS */ /* EnableCap */ /* TEXTURE_2D */ CULL_FACE: 0x0B44,
    BLEND: 0x0BE2,
    DITHER: 0x0BD0,
    STENCIL_TEST: 0x0B90,
    DEPTH_TEST: 0x0B71,
    SCISSOR_TEST: 0x0C11,
    POLYGON_OFFSET_FILL: 0x8037,
    SAMPLE_ALPHA_TO_COVERAGE: 0x809E,
    SAMPLE_COVERAGE: 0x80A0,
    /* ErrorCode */ NO_ERROR: 0,
    INVALID_ENUM: 0x0500,
    INVALID_VALUE: 0x0501,
    INVALID_OPERATION: 0x0502,
    OUT_OF_MEMORY: 0x0505,
    /* FrontFaceDirection */ CW: 0x0900,
    CCW: 0x0901,
    /* GetPName */ LINE_WIDTH: 0x0B21,
    ALIASED_POINT_SIZE_RANGE: 0x846D,
    ALIASED_LINE_WIDTH_RANGE: 0x846E,
    CULL_FACE_MODE: 0x0B45,
    FRONT_FACE: 0x0B46,
    DEPTH_RANGE: 0x0B70,
    DEPTH_WRITEMASK: 0x0B72,
    DEPTH_CLEAR_VALUE: 0x0B73,
    DEPTH_FUNC: 0x0B74,
    STENCIL_CLEAR_VALUE: 0x0B91,
    STENCIL_FUNC: 0x0B92,
    STENCIL_FAIL: 0x0B94,
    STENCIL_PASS_DEPTH_FAIL: 0x0B95,
    STENCIL_PASS_DEPTH_PASS: 0x0B96,
    STENCIL_REF: 0x0B97,
    STENCIL_VALUE_MASK: 0x0B93,
    STENCIL_WRITEMASK: 0x0B98,
    STENCIL_BACK_FUNC: 0x8800,
    STENCIL_BACK_FAIL: 0x8801,
    STENCIL_BACK_PASS_DEPTH_FAIL: 0x8802,
    STENCIL_BACK_PASS_DEPTH_PASS: 0x8803,
    STENCIL_BACK_REF: 0x8CA3,
    STENCIL_BACK_VALUE_MASK: 0x8CA4,
    STENCIL_BACK_WRITEMASK: 0x8CA5,
    VIEWPORT: 0x0BA2,
    SCISSOR_BOX: 0x0C10,
    /*      SCISSOR_TEST */ COLOR_CLEAR_VALUE: 0x0C22,
    COLOR_WRITEMASK: 0x0C23,
    UNPACK_ALIGNMENT: 0x0CF5,
    PACK_ALIGNMENT: 0x0D05,
    MAX_TEXTURE_SIZE: 0x0D33,
    MAX_VIEWPORT_DIMS: 0x0D3A,
    SUBPIXEL_BITS: 0x0D50,
    RED_BITS: 0x0D52,
    GREEN_BITS: 0x0D53,
    BLUE_BITS: 0x0D54,
    ALPHA_BITS: 0x0D55,
    DEPTH_BITS: 0x0D56,
    STENCIL_BITS: 0x0D57,
    POLYGON_OFFSET_UNITS: 0x2A00,
    /*      POLYGON_OFFSET_FILL */ POLYGON_OFFSET_FACTOR: 0x8038,
    TEXTURE_BINDING_2D: 0x8069,
    SAMPLE_BUFFERS: 0x80A8,
    SAMPLES: 0x80A9,
    SAMPLE_COVERAGE_VALUE: 0x80AA,
    SAMPLE_COVERAGE_INVERT: 0x80AB,
    /* GetTextureParameter */ /*      TEXTURE_MAG_FILTER */ /*      TEXTURE_MIN_FILTER */ /*      TEXTURE_WRAP_S */ /*      TEXTURE_WRAP_T */ COMPRESSED_TEXTURE_FORMATS: 0x86A3,
    /* HintMode */ DONT_CARE: 0x1100,
    FASTEST: 0x1101,
    NICEST: 0x1102,
    /* HintTarget */ GENERATE_MIPMAP_HINT: 0x8192,
    /* DataType */ BYTE: 0x1400,
    UNSIGNED_BYTE: 0x1401,
    SHORT: 0x1402,
    UNSIGNED_SHORT: 0x1403,
    INT: 0x1404,
    UNSIGNED_INT: 0x1405,
    FLOAT: 0x1406,
    /* PixelFormat */ DEPTH_COMPONENT: 0x1902,
    ALPHA: 0x1906,
    RGB: 0x1907,
    RGBA: 0x1908,
    LUMINANCE: 0x1909,
    LUMINANCE_ALPHA: 0x190A,
    /* PixelType */ /*      UNSIGNED_BYTE */ UNSIGNED_SHORT_4_4_4_4: 0x8033,
    UNSIGNED_SHORT_5_5_5_1: 0x8034,
    UNSIGNED_SHORT_5_6_5: 0x8363,
    /* Shaders */ FRAGMENT_SHADER: 0x8B30,
    VERTEX_SHADER: 0x8B31,
    MAX_VERTEX_ATTRIBS: 0x8869,
    MAX_VERTEX_UNIFORM_VECTORS: 0x8DFB,
    MAX_VARYING_VECTORS: 0x8DFC,
    MAX_COMBINED_TEXTURE_IMAGE_UNITS: 0x8B4D,
    MAX_VERTEX_TEXTURE_IMAGE_UNITS: 0x8B4C,
    MAX_TEXTURE_IMAGE_UNITS: 0x8872,
    MAX_FRAGMENT_UNIFORM_VECTORS: 0x8DFD,
    SHADER_TYPE: 0x8B4F,
    DELETE_STATUS: 0x8B80,
    LINK_STATUS: 0x8B82,
    VALIDATE_STATUS: 0x8B83,
    ATTACHED_SHADERS: 0x8B85,
    ACTIVE_UNIFORMS: 0x8B86,
    ACTIVE_ATTRIBUTES: 0x8B89,
    SHADING_LANGUAGE_VERSION: 0x8B8C,
    CURRENT_PROGRAM: 0x8B8D,
    /* StencilFunction */ NEVER: 0x0200,
    LESS: 0x0201,
    EQUAL: 0x0202,
    LEQUAL: 0x0203,
    GREATER: 0x0204,
    NOTEQUAL: 0x0205,
    GEQUAL: 0x0206,
    ALWAYS: 0x0207,
    /* StencilOp */ /*      ZERO */ KEEP: 0x1E00,
    REPLACE: 0x1E01,
    INCR: 0x1E02,
    DECR: 0x1E03,
    INVERT: 0x150A,
    INCR_WRAP: 0x8507,
    DECR_WRAP: 0x8508,
    /* StringName */ VENDOR: 0x1F00,
    RENDERER: 0x1F01,
    VERSION: 0x1F02,
    /* TextureMagFilter */ NEAREST: 0x2600,
    LINEAR: 0x2601,
    /* TextureMinFilter */ /*      NEAREST */ /*      LINEAR */ NEAREST_MIPMAP_NEAREST: 0x2700,
    LINEAR_MIPMAP_NEAREST: 0x2701,
    NEAREST_MIPMAP_LINEAR: 0x2702,
    LINEAR_MIPMAP_LINEAR: 0x2703,
    /* TextureParameterName */ TEXTURE_MAG_FILTER: 0x2800,
    TEXTURE_MIN_FILTER: 0x2801,
    TEXTURE_WRAP_S: 0x2802,
    TEXTURE_WRAP_T: 0x2803,
    /* TextureTarget */ TEXTURE_2D: 0x0DE1,
    TEXTURE: 0x1702,
    TEXTURE_CUBE_MAP: 0x8513,
    TEXTURE_BINDING_CUBE_MAP: 0x8514,
    TEXTURE_CUBE_MAP_POSITIVE_X: 0x8515,
    TEXTURE_CUBE_MAP_NEGATIVE_X: 0x8516,
    TEXTURE_CUBE_MAP_POSITIVE_Y: 0x8517,
    TEXTURE_CUBE_MAP_NEGATIVE_Y: 0x8518,
    TEXTURE_CUBE_MAP_POSITIVE_Z: 0x8519,
    TEXTURE_CUBE_MAP_NEGATIVE_Z: 0x851A,
    MAX_CUBE_MAP_TEXTURE_SIZE: 0x851C,
    /* TextureUnit */ TEXTURE0: 0x84C0,
    TEXTURE1: 0x84C1,
    TEXTURE2: 0x84C2,
    TEXTURE3: 0x84C3,
    TEXTURE4: 0x84C4,
    TEXTURE5: 0x84C5,
    TEXTURE6: 0x84C6,
    TEXTURE7: 0x84C7,
    TEXTURE8: 0x84C8,
    TEXTURE9: 0x84C9,
    TEXTURE10: 0x84CA,
    TEXTURE11: 0x84CB,
    TEXTURE12: 0x84CC,
    TEXTURE13: 0x84CD,
    TEXTURE14: 0x84CE,
    TEXTURE15: 0x84CF,
    TEXTURE16: 0x84D0,
    TEXTURE17: 0x84D1,
    TEXTURE18: 0x84D2,
    TEXTURE19: 0x84D3,
    TEXTURE20: 0x84D4,
    TEXTURE21: 0x84D5,
    TEXTURE22: 0x84D6,
    TEXTURE23: 0x84D7,
    TEXTURE24: 0x84D8,
    TEXTURE25: 0x84D9,
    TEXTURE26: 0x84DA,
    TEXTURE27: 0x84DB,
    TEXTURE28: 0x84DC,
    TEXTURE29: 0x84DD,
    TEXTURE30: 0x84DE,
    TEXTURE31: 0x84DF,
    ACTIVE_TEXTURE: 0x84E0,
    /* TextureWrapMode */ REPEAT: 0x2901,
    CLAMP_TO_EDGE: 0x812F,
    MIRRORED_REPEAT: 0x8370,
    /* Uniform Types */ FLOAT_VEC2: 0x8B50,
    FLOAT_VEC3: 0x8B51,
    FLOAT_VEC4: 0x8B52,
    INT_VEC2: 0x8B53,
    INT_VEC3: 0x8B54,
    INT_VEC4: 0x8B55,
    BOOL: 0x8B56,
    BOOL_VEC2: 0x8B57,
    BOOL_VEC3: 0x8B58,
    BOOL_VEC4: 0x8B59,
    FLOAT_MAT2: 0x8B5A,
    FLOAT_MAT3: 0x8B5B,
    FLOAT_MAT4: 0x8B5C,
    SAMPLER_2D: 0x8B5E,
    SAMPLER_CUBE: 0x8B60,
    /* Vertex Arrays */ VERTEX_ATTRIB_ARRAY_ENABLED: 0x8622,
    VERTEX_ATTRIB_ARRAY_SIZE: 0x8623,
    VERTEX_ATTRIB_ARRAY_STRIDE: 0x8624,
    VERTEX_ATTRIB_ARRAY_TYPE: 0x8625,
    VERTEX_ATTRIB_ARRAY_NORMALIZED: 0x886A,
    VERTEX_ATTRIB_ARRAY_POINTER: 0x8645,
    VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: 0x889F,
    /* Shader Source */ COMPILE_STATUS: 0x8B81,
    /* Shader Precision-Specified Types */ LOW_FLOAT: 0x8DF0,
    MEDIUM_FLOAT: 0x8DF1,
    HIGH_FLOAT: 0x8DF2,
    LOW_INT: 0x8DF3,
    MEDIUM_INT: 0x8DF4,
    HIGH_INT: 0x8DF5,
    /* Framebuffer Object. */ FRAMEBUFFER: 0x8D40,
    RENDERBUFFER: 0x8D41,
    RGBA4: 0x8056,
    RGB5_A1: 0x8057,
    RGB565: 0x8D62,
    DEPTH_COMPONENT16: 0x81A5,
    STENCIL_INDEX: 0x1901,
    STENCIL_INDEX8: 0x8D48,
    DEPTH_STENCIL: 0x84F9,
    RENDERBUFFER_WIDTH: 0x8D42,
    RENDERBUFFER_HEIGHT: 0x8D43,
    RENDERBUFFER_INTERNAL_FORMAT: 0x8D44,
    RENDERBUFFER_RED_SIZE: 0x8D50,
    RENDERBUFFER_GREEN_SIZE: 0x8D51,
    RENDERBUFFER_BLUE_SIZE: 0x8D52,
    RENDERBUFFER_ALPHA_SIZE: 0x8D53,
    RENDERBUFFER_DEPTH_SIZE: 0x8D54,
    RENDERBUFFER_STENCIL_SIZE: 0x8D55,
    FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: 0x8CD0,
    FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: 0x8CD1,
    FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: 0x8CD2,
    FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: 0x8CD3,
    COLOR_ATTACHMENT0: 0x8CE0,
    DEPTH_ATTACHMENT: 0x8D00,
    STENCIL_ATTACHMENT: 0x8D20,
    DEPTH_STENCIL_ATTACHMENT: 0x821A,
    NONE: 0,
    FRAMEBUFFER_COMPLETE: 0x8CD5,
    FRAMEBUFFER_INCOMPLETE_ATTACHMENT: 0x8CD6,
    FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: 0x8CD7,
    FRAMEBUFFER_INCOMPLETE_DIMENSIONS: 0x8CD9,
    FRAMEBUFFER_UNSUPPORTED: 0x8CDD,
    FRAMEBUFFER_BINDING: 0x8CA6,
    RENDERBUFFER_BINDING: 0x8CA7,
    MAX_RENDERBUFFER_SIZE: 0x84E8,
    INVALID_FRAMEBUFFER_OPERATION: 0x0506,
    /* WebGL-specific enums */ UNPACK_FLIP_Y_WEBGL: 0x9240,
    UNPACK_PREMULTIPLY_ALPHA_WEBGL: 0x9241,
    CONTEXT_LOST_WEBGL: 0x9242,
    UNPACK_COLORSPACE_CONVERSION_WEBGL: 0x9243,
    BROWSER_DEFAULT_WEBGL: 0x9244
};
}}),
"[project]/node_modules/claygl/src/core/request.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
function get(options) {
    var xhr = new XMLHttpRequest();
    xhr.open('get', options.url);
    // With response type set browser can get and put binary data
    // https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest/Sending_and_Receiving_Binary_Data
    // Default is text, and it can be set
    // arraybuffer, blob, document, json, text
    xhr.responseType = options.responseType || 'text';
    if (options.onprogress) {
        //https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest/Using_XMLHttpRequest
        xhr.onprogress = function(e) {
            if (e.lengthComputable) {
                var percent = e.loaded / e.total;
                options.onprogress(percent, e.loaded, e.total);
            } else {
                options.onprogress(null);
            }
        };
    }
    xhr.onload = function(e) {
        if (xhr.status >= 400) {
            options.onerror && options.onerror();
        } else {
            options.onload && options.onload(xhr.response);
        }
    };
    if (options.onerror) {
        xhr.onerror = options.onerror;
    }
    xhr.send(null);
}
const __TURBOPACK__default__export__ = {
    get: get
};
}}),
"[project]/node_modules/claygl/src/core/vendor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$request$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/core/request.js [app-client] (ecmascript)");
;
var supportWebGL;
var vendor = {};
/**
 * If support WebGL
 * @return {boolean}
 */ vendor.supportWebGL = function() {
    if (supportWebGL == null) {
        try {
            var canvas = document.createElement('canvas');
            var gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');
            if (!gl) {
                throw new Error();
            }
        } catch (e) {
            supportWebGL = false;
        }
    }
    return supportWebGL;
};
vendor.Int8Array = typeof Int8Array === 'undefined' ? Array : Int8Array;
vendor.Uint8Array = typeof Uint8Array === 'undefined' ? Array : Uint8Array;
vendor.Uint16Array = typeof Uint16Array === 'undefined' ? Array : Uint16Array;
vendor.Uint32Array = typeof Uint32Array === 'undefined' ? Array : Uint32Array;
vendor.Int16Array = typeof Int16Array === 'undefined' ? Array : Int16Array;
vendor.Float32Array = typeof Float32Array === 'undefined' ? Array : Float32Array;
vendor.Float64Array = typeof Float64Array === 'undefined' ? Array : Float64Array;
var g = {};
if (typeof window !== 'undefined') {
    g = window;
} else if (typeof global !== 'undefined') {
    g = global;
}
vendor.requestAnimationFrame = g.requestAnimationFrame || g.msRequestAnimationFrame || g.mozRequestAnimationFrame || g.webkitRequestAnimationFrame || function(func) {
    setTimeout(func, 16);
};
vendor.createCanvas = function() {
    return document.createElement('canvas');
};
vendor.createImage = function() {
    return new g.Image();
};
vendor.request = {
    get: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$request$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].get
};
vendor.addEventListener = function(dom, type, func, useCapture) {
    dom.addEventListener(type, func, useCapture);
};
vendor.removeEventListener = function(dom, type, func) {
    dom.removeEventListener(type, func);
};
const __TURBOPACK__default__export__ = vendor;
}}),
"[project]/node_modules/claygl/src/core/LinkedList.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * Simple double linked list. Compared with array, it has O(1) remove operation.
 * @constructor
 * @alias clay.core.LinkedList
 */ __turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var LinkedList = function() {
    /**
     * @type {clay.core.LinkedList.Entry}
     */ this.head = null;
    /**
     * @type {clay.core.LinkedList.Entry}
     */ this.tail = null;
    this._length = 0;
};
/**
 * Insert a new value at the tail
 * @param  {} val
 * @return {clay.core.LinkedList.Entry}
 */ LinkedList.prototype.insert = function(val) {
    var entry = new LinkedList.Entry(val);
    this.insertEntry(entry);
    return entry;
};
/**
 * Insert a new value at idx
 * @param {number} idx
 * @param  {} val
 * @return {clay.core.LinkedList.Entry}
 */ LinkedList.prototype.insertAt = function(idx, val) {
    if (idx < 0) {
        return;
    }
    var next = this.head;
    var cursor = 0;
    while(next && cursor != idx){
        next = next.next;
        cursor++;
    }
    if (next) {
        var entry = new LinkedList.Entry(val);
        var prev = next.prev;
        if (!prev) {
            this.head = entry;
        } else {
            prev.next = entry;
            entry.prev = prev;
        }
        entry.next = next;
        next.prev = entry;
    } else {
        this.insert(val);
    }
};
LinkedList.prototype.insertBeforeEntry = function(val, next) {
    var entry = new LinkedList.Entry(val);
    var prev = next.prev;
    if (!prev) {
        this.head = entry;
    } else {
        prev.next = entry;
        entry.prev = prev;
    }
    entry.next = next;
    next.prev = entry;
    this._length++;
};
/**
 * Insert an entry at the tail
 * @param  {clay.core.LinkedList.Entry} entry
 */ LinkedList.prototype.insertEntry = function(entry) {
    if (!this.head) {
        this.head = this.tail = entry;
    } else {
        this.tail.next = entry;
        entry.prev = this.tail;
        this.tail = entry;
    }
    this._length++;
};
/**
 * Remove entry.
 * @param  {clay.core.LinkedList.Entry} entry
 */ LinkedList.prototype.remove = function(entry) {
    var prev = entry.prev;
    var next = entry.next;
    if (prev) {
        prev.next = next;
    } else {
        // Is head
        this.head = next;
    }
    if (next) {
        next.prev = prev;
    } else {
        // Is tail
        this.tail = prev;
    }
    entry.next = entry.prev = null;
    this._length--;
};
/**
 * Remove entry at index.
 * @param  {number} idx
 * @return {}
 */ LinkedList.prototype.removeAt = function(idx) {
    if (idx < 0) {
        return;
    }
    var curr = this.head;
    var cursor = 0;
    while(curr && cursor != idx){
        curr = curr.next;
        cursor++;
    }
    if (curr) {
        this.remove(curr);
        return curr.value;
    }
};
/**
 * Get head value
 * @return {}
 */ LinkedList.prototype.getHead = function() {
    if (this.head) {
        return this.head.value;
    }
};
/**
 * Get tail value
 * @return {}
 */ LinkedList.prototype.getTail = function() {
    if (this.tail) {
        return this.tail.value;
    }
};
/**
 * Get value at idx
 * @param {number} idx
 * @return {}
 */ LinkedList.prototype.getAt = function(idx) {
    if (idx < 0) {
        return;
    }
    var curr = this.head;
    var cursor = 0;
    while(curr && cursor != idx){
        curr = curr.next;
        cursor++;
    }
    return curr.value;
};
/**
 * @param  {} value
 * @return {number}
 */ LinkedList.prototype.indexOf = function(value) {
    var curr = this.head;
    var cursor = 0;
    while(curr){
        if (curr.value === value) {
            return cursor;
        }
        curr = curr.next;
        cursor++;
    }
};
/**
 * @return {number}
 */ LinkedList.prototype.length = function() {
    return this._length;
};
/**
 * If list is empty
 */ LinkedList.prototype.isEmpty = function() {
    return this._length === 0;
};
/**
 * @param  {Function} cb
 * @param  {} context
 */ LinkedList.prototype.forEach = function(cb, context) {
    var curr = this.head;
    var idx = 0;
    var haveContext = typeof context != 'undefined';
    while(curr){
        if (haveContext) {
            cb.call(context, curr.value, idx);
        } else {
            cb(curr.value, idx);
        }
        curr = curr.next;
        idx++;
    }
};
/**
 * Clear the list
 */ LinkedList.prototype.clear = function() {
    this.tail = this.head = null;
    this._length = 0;
};
/**
 * @constructor
 * @param {} val
 */ LinkedList.Entry = function(val) {
    /**
     * @type {}
     */ this.value = val;
    /**
     * @type {clay.core.LinkedList.Entry}
     */ this.next = null;
    /**
     * @type {clay.core.LinkedList.Entry}
     */ this.prev = null;
};
const __TURBOPACK__default__export__ = LinkedList;
}}),
"[project]/node_modules/claygl/src/core/LRU.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$LinkedList$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/core/LinkedList.js [app-client] (ecmascript)");
;
/**
 * LRU Cache
 * @constructor
 * @alias clay.core.LRU
 */ var LRU = function(maxSize) {
    this._list = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$LinkedList$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
    this._map = {};
    this._maxSize = maxSize || 10;
};
/**
 * Set cache max size
 * @param {number} size
 */ LRU.prototype.setMaxSize = function(size) {
    this._maxSize = size;
};
/**
 * @param  {string} key
 * @param  {} value
 */ LRU.prototype.put = function(key, value) {
    if (!this._map.hasOwnProperty(key)) {
        var len = this._list.length();
        if (len >= this._maxSize && len > 0) {
            // Remove the least recently used
            var leastUsedEntry = this._list.head;
            this._list.remove(leastUsedEntry);
            delete this._map[leastUsedEntry.key];
        }
        var entry = this._list.insert(value);
        entry.key = key;
        this._map[key] = entry;
    }
};
/**
 * @param  {string} key
 * @return {}
 */ LRU.prototype.get = function(key) {
    var entry = this._map[key];
    if (this._map.hasOwnProperty(key)) {
        // Put the latest used entry in the tail
        if (entry !== this._list.tail) {
            this._list.remove(entry);
            this._list.insertEntry(entry);
        }
        return entry.value;
    }
};
/**
 * @param {string} key
 */ LRU.prototype.remove = function(key) {
    var entry = this._map[key];
    if (typeof entry !== 'undefined') {
        delete this._map[key];
        this._list.remove(entry);
    }
};
/**
 * Clear the cache
 */ LRU.prototype.clear = function() {
    this._list.clear();
    this._map = {};
};
const __TURBOPACK__default__export__ = LRU;
}}),
"[project]/node_modules/claygl/src/core/color.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * @namespace clay.core.color
 */ __turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$LRU$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/core/LRU.js [app-client] (ecmascript)");
;
var colorUtil = {};
var kCSSColorTable = {
    'transparent': [
        0,
        0,
        0,
        0
    ],
    'aliceblue': [
        240,
        248,
        255,
        1
    ],
    'antiquewhite': [
        250,
        235,
        215,
        1
    ],
    'aqua': [
        0,
        255,
        255,
        1
    ],
    'aquamarine': [
        127,
        255,
        212,
        1
    ],
    'azure': [
        240,
        255,
        255,
        1
    ],
    'beige': [
        245,
        245,
        220,
        1
    ],
    'bisque': [
        255,
        228,
        196,
        1
    ],
    'black': [
        0,
        0,
        0,
        1
    ],
    'blanchedalmond': [
        255,
        235,
        205,
        1
    ],
    'blue': [
        0,
        0,
        255,
        1
    ],
    'blueviolet': [
        138,
        43,
        226,
        1
    ],
    'brown': [
        165,
        42,
        42,
        1
    ],
    'burlywood': [
        222,
        184,
        135,
        1
    ],
    'cadetblue': [
        95,
        158,
        160,
        1
    ],
    'chartreuse': [
        127,
        255,
        0,
        1
    ],
    'chocolate': [
        210,
        105,
        30,
        1
    ],
    'coral': [
        255,
        127,
        80,
        1
    ],
    'cornflowerblue': [
        100,
        149,
        237,
        1
    ],
    'cornsilk': [
        255,
        248,
        220,
        1
    ],
    'crimson': [
        220,
        20,
        60,
        1
    ],
    'cyan': [
        0,
        255,
        255,
        1
    ],
    'darkblue': [
        0,
        0,
        139,
        1
    ],
    'darkcyan': [
        0,
        139,
        139,
        1
    ],
    'darkgoldenrod': [
        184,
        134,
        11,
        1
    ],
    'darkgray': [
        169,
        169,
        169,
        1
    ],
    'darkgreen': [
        0,
        100,
        0,
        1
    ],
    'darkgrey': [
        169,
        169,
        169,
        1
    ],
    'darkkhaki': [
        189,
        183,
        107,
        1
    ],
    'darkmagenta': [
        139,
        0,
        139,
        1
    ],
    'darkolivegreen': [
        85,
        107,
        47,
        1
    ],
    'darkorange': [
        255,
        140,
        0,
        1
    ],
    'darkorchid': [
        153,
        50,
        204,
        1
    ],
    'darkred': [
        139,
        0,
        0,
        1
    ],
    'darksalmon': [
        233,
        150,
        122,
        1
    ],
    'darkseagreen': [
        143,
        188,
        143,
        1
    ],
    'darkslateblue': [
        72,
        61,
        139,
        1
    ],
    'darkslategray': [
        47,
        79,
        79,
        1
    ],
    'darkslategrey': [
        47,
        79,
        79,
        1
    ],
    'darkturquoise': [
        0,
        206,
        209,
        1
    ],
    'darkviolet': [
        148,
        0,
        211,
        1
    ],
    'deeppink': [
        255,
        20,
        147,
        1
    ],
    'deepskyblue': [
        0,
        191,
        255,
        1
    ],
    'dimgray': [
        105,
        105,
        105,
        1
    ],
    'dimgrey': [
        105,
        105,
        105,
        1
    ],
    'dodgerblue': [
        30,
        144,
        255,
        1
    ],
    'firebrick': [
        178,
        34,
        34,
        1
    ],
    'floralwhite': [
        255,
        250,
        240,
        1
    ],
    'forestgreen': [
        34,
        139,
        34,
        1
    ],
    'fuchsia': [
        255,
        0,
        255,
        1
    ],
    'gainsboro': [
        220,
        220,
        220,
        1
    ],
    'ghostwhite': [
        248,
        248,
        255,
        1
    ],
    'gold': [
        255,
        215,
        0,
        1
    ],
    'goldenrod': [
        218,
        165,
        32,
        1
    ],
    'gray': [
        128,
        128,
        128,
        1
    ],
    'green': [
        0,
        128,
        0,
        1
    ],
    'greenyellow': [
        173,
        255,
        47,
        1
    ],
    'grey': [
        128,
        128,
        128,
        1
    ],
    'honeydew': [
        240,
        255,
        240,
        1
    ],
    'hotpink': [
        255,
        105,
        180,
        1
    ],
    'indianred': [
        205,
        92,
        92,
        1
    ],
    'indigo': [
        75,
        0,
        130,
        1
    ],
    'ivory': [
        255,
        255,
        240,
        1
    ],
    'khaki': [
        240,
        230,
        140,
        1
    ],
    'lavender': [
        230,
        230,
        250,
        1
    ],
    'lavenderblush': [
        255,
        240,
        245,
        1
    ],
    'lawngreen': [
        124,
        252,
        0,
        1
    ],
    'lemonchiffon': [
        255,
        250,
        205,
        1
    ],
    'lightblue': [
        173,
        216,
        230,
        1
    ],
    'lightcoral': [
        240,
        128,
        128,
        1
    ],
    'lightcyan': [
        224,
        255,
        255,
        1
    ],
    'lightgoldenrodyellow': [
        250,
        250,
        210,
        1
    ],
    'lightgray': [
        211,
        211,
        211,
        1
    ],
    'lightgreen': [
        144,
        238,
        144,
        1
    ],
    'lightgrey': [
        211,
        211,
        211,
        1
    ],
    'lightpink': [
        255,
        182,
        193,
        1
    ],
    'lightsalmon': [
        255,
        160,
        122,
        1
    ],
    'lightseagreen': [
        32,
        178,
        170,
        1
    ],
    'lightskyblue': [
        135,
        206,
        250,
        1
    ],
    'lightslategray': [
        119,
        136,
        153,
        1
    ],
    'lightslategrey': [
        119,
        136,
        153,
        1
    ],
    'lightsteelblue': [
        176,
        196,
        222,
        1
    ],
    'lightyellow': [
        255,
        255,
        224,
        1
    ],
    'lime': [
        0,
        255,
        0,
        1
    ],
    'limegreen': [
        50,
        205,
        50,
        1
    ],
    'linen': [
        250,
        240,
        230,
        1
    ],
    'magenta': [
        255,
        0,
        255,
        1
    ],
    'maroon': [
        128,
        0,
        0,
        1
    ],
    'mediumaquamarine': [
        102,
        205,
        170,
        1
    ],
    'mediumblue': [
        0,
        0,
        205,
        1
    ],
    'mediumorchid': [
        186,
        85,
        211,
        1
    ],
    'mediumpurple': [
        147,
        112,
        219,
        1
    ],
    'mediumseagreen': [
        60,
        179,
        113,
        1
    ],
    'mediumslateblue': [
        123,
        104,
        238,
        1
    ],
    'mediumspringgreen': [
        0,
        250,
        154,
        1
    ],
    'mediumturquoise': [
        72,
        209,
        204,
        1
    ],
    'mediumvioletred': [
        199,
        21,
        133,
        1
    ],
    'midnightblue': [
        25,
        25,
        112,
        1
    ],
    'mintcream': [
        245,
        255,
        250,
        1
    ],
    'mistyrose': [
        255,
        228,
        225,
        1
    ],
    'moccasin': [
        255,
        228,
        181,
        1
    ],
    'navajowhite': [
        255,
        222,
        173,
        1
    ],
    'navy': [
        0,
        0,
        128,
        1
    ],
    'oldlace': [
        253,
        245,
        230,
        1
    ],
    'olive': [
        128,
        128,
        0,
        1
    ],
    'olivedrab': [
        107,
        142,
        35,
        1
    ],
    'orange': [
        255,
        165,
        0,
        1
    ],
    'orangered': [
        255,
        69,
        0,
        1
    ],
    'orchid': [
        218,
        112,
        214,
        1
    ],
    'palegoldenrod': [
        238,
        232,
        170,
        1
    ],
    'palegreen': [
        152,
        251,
        152,
        1
    ],
    'paleturquoise': [
        175,
        238,
        238,
        1
    ],
    'palevioletred': [
        219,
        112,
        147,
        1
    ],
    'papayawhip': [
        255,
        239,
        213,
        1
    ],
    'peachpuff': [
        255,
        218,
        185,
        1
    ],
    'peru': [
        205,
        133,
        63,
        1
    ],
    'pink': [
        255,
        192,
        203,
        1
    ],
    'plum': [
        221,
        160,
        221,
        1
    ],
    'powderblue': [
        176,
        224,
        230,
        1
    ],
    'purple': [
        128,
        0,
        128,
        1
    ],
    'red': [
        255,
        0,
        0,
        1
    ],
    'rosybrown': [
        188,
        143,
        143,
        1
    ],
    'royalblue': [
        65,
        105,
        225,
        1
    ],
    'saddlebrown': [
        139,
        69,
        19,
        1
    ],
    'salmon': [
        250,
        128,
        114,
        1
    ],
    'sandybrown': [
        244,
        164,
        96,
        1
    ],
    'seagreen': [
        46,
        139,
        87,
        1
    ],
    'seashell': [
        255,
        245,
        238,
        1
    ],
    'sienna': [
        160,
        82,
        45,
        1
    ],
    'silver': [
        192,
        192,
        192,
        1
    ],
    'skyblue': [
        135,
        206,
        235,
        1
    ],
    'slateblue': [
        106,
        90,
        205,
        1
    ],
    'slategray': [
        112,
        128,
        144,
        1
    ],
    'slategrey': [
        112,
        128,
        144,
        1
    ],
    'snow': [
        255,
        250,
        250,
        1
    ],
    'springgreen': [
        0,
        255,
        127,
        1
    ],
    'steelblue': [
        70,
        130,
        180,
        1
    ],
    'tan': [
        210,
        180,
        140,
        1
    ],
    'teal': [
        0,
        128,
        128,
        1
    ],
    'thistle': [
        216,
        191,
        216,
        1
    ],
    'tomato': [
        255,
        99,
        71,
        1
    ],
    'turquoise': [
        64,
        224,
        208,
        1
    ],
    'violet': [
        238,
        130,
        238,
        1
    ],
    'wheat': [
        245,
        222,
        179,
        1
    ],
    'white': [
        255,
        255,
        255,
        1
    ],
    'whitesmoke': [
        245,
        245,
        245,
        1
    ],
    'yellow': [
        255,
        255,
        0,
        1
    ],
    'yellowgreen': [
        154,
        205,
        50,
        1
    ]
};
function clampCssByte(i) {
    i = Math.round(i); // Seems to be what Chrome does (vs truncation).
    return i < 0 ? 0 : i > 255 ? 255 : i;
}
function clampCssAngle(i) {
    i = Math.round(i); // Seems to be what Chrome does (vs truncation).
    return i < 0 ? 0 : i > 360 ? 360 : i;
}
function clampCssFloat(f) {
    return f < 0 ? 0 : f > 1 ? 1 : f;
}
function parseCssInt(str) {
    if (str.length && str.charAt(str.length - 1) === '%') {
        return clampCssByte(parseFloat(str) / 100 * 255);
    }
    return clampCssByte(parseInt(str, 10));
}
function parseCssFloat(str) {
    if (str.length && str.charAt(str.length - 1) === '%') {
        return clampCssFloat(parseFloat(str) / 100);
    }
    return clampCssFloat(parseFloat(str));
}
function cssHueToRgb(m1, m2, h) {
    if (h < 0) {
        h += 1;
    } else if (h > 1) {
        h -= 1;
    }
    if (h * 6 < 1) {
        return m1 + (m2 - m1) * h * 6;
    }
    if (h * 2 < 1) {
        return m2;
    }
    if (h * 3 < 2) {
        return m1 + (m2 - m1) * (2 / 3 - h) * 6;
    }
    return m1;
}
function lerpNumber(a, b, p) {
    return a + (b - a) * p;
}
function setRgba(out, r, g, b, a) {
    out[0] = r;
    out[1] = g;
    out[2] = b;
    out[3] = a;
    return out;
}
function copyRgba(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    return out;
}
var colorCache = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$LRU$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](20);
var lastRemovedArr = null;
function putToCache(colorStr, rgbaArr) {
    // Reuse removed array
    if (lastRemovedArr) {
        copyRgba(lastRemovedArr, rgbaArr);
    }
    lastRemovedArr = colorCache.put(colorStr, lastRemovedArr || rgbaArr.slice());
}
/**
 * @name clay.core.color.parse
 * @param {string} colorStr
 * @param {Array.<number>} out
 * @return {Array.<number>}
 */ colorUtil.parse = function(colorStr, rgbaArr) {
    if (!colorStr) {
        return;
    }
    rgbaArr = rgbaArr || [];
    var cached = colorCache.get(colorStr);
    if (cached) {
        return copyRgba(rgbaArr, cached);
    }
    // colorStr may be not string
    colorStr = colorStr + '';
    // Remove all whitespace, not compliant, but should just be more accepting.
    var str = colorStr.replace(/ /g, '').toLowerCase();
    // Color keywords (and transparent) lookup.
    if (str in kCSSColorTable) {
        copyRgba(rgbaArr, kCSSColorTable[str]);
        putToCache(colorStr, rgbaArr);
        return rgbaArr;
    }
    // #abc and #abc123 syntax.
    if (str.charAt(0) === '#') {
        if (str.length === 4) {
            var iv = parseInt(str.substr(1), 16); // TODO(deanm): Stricter parsing.
            if (!(iv >= 0 && iv <= 0xfff)) {
                setRgba(rgbaArr, 0, 0, 0, 1);
                return; // Covers NaN.
            }
            setRgba(rgbaArr, (iv & 0xf00) >> 4 | (iv & 0xf00) >> 8, iv & 0xf0 | (iv & 0xf0) >> 4, iv & 0xf | (iv & 0xf) << 4, 1);
            putToCache(colorStr, rgbaArr);
            return rgbaArr;
        } else if (str.length === 7) {
            var iv = parseInt(str.substr(1), 16); // TODO(deanm): Stricter parsing.
            if (!(iv >= 0 && iv <= 0xffffff)) {
                setRgba(rgbaArr, 0, 0, 0, 1);
                return; // Covers NaN.
            }
            setRgba(rgbaArr, (iv & 0xff0000) >> 16, (iv & 0xff00) >> 8, iv & 0xff, 1);
            putToCache(colorStr, rgbaArr);
            return rgbaArr;
        }
        return;
    }
    var op = str.indexOf('('), ep = str.indexOf(')');
    if (op !== -1 && ep + 1 === str.length) {
        var fname = str.substr(0, op);
        var params = str.substr(op + 1, ep - (op + 1)).split(',');
        var alpha = 1; // To allow case fallthrough.
        switch(fname){
            case 'rgba':
                if (params.length !== 4) {
                    setRgba(rgbaArr, 0, 0, 0, 1);
                    return;
                }
                alpha = parseCssFloat(params.pop()); // jshint ignore:line
            // Fall through.
            case 'rgb':
                if (params.length !== 3) {
                    setRgba(rgbaArr, 0, 0, 0, 1);
                    return;
                }
                setRgba(rgbaArr, parseCssInt(params[0]), parseCssInt(params[1]), parseCssInt(params[2]), alpha);
                putToCache(colorStr, rgbaArr);
                return rgbaArr;
            case 'hsla':
                if (params.length !== 4) {
                    setRgba(rgbaArr, 0, 0, 0, 1);
                    return;
                }
                params[3] = parseCssFloat(params[3]);
                hsla2rgba(params, rgbaArr);
                putToCache(colorStr, rgbaArr);
                return rgbaArr;
            case 'hsl':
                if (params.length !== 3) {
                    setRgba(rgbaArr, 0, 0, 0, 1);
                    return;
                }
                hsla2rgba(params, rgbaArr);
                putToCache(colorStr, rgbaArr);
                return rgbaArr;
            default:
                return;
        }
    }
    setRgba(rgbaArr, 0, 0, 0, 1);
    return;
};
colorUtil.parseToFloat = function(colorStr, rgbaArr) {
    rgbaArr = colorUtil.parse(colorStr, rgbaArr);
    if (!rgbaArr) {
        return;
    }
    rgbaArr[0] /= 255;
    rgbaArr[1] /= 255;
    rgbaArr[2] /= 255;
    return rgbaArr;
};
/**
 * @name clay.core.color.hsla2rgba
 * @param {Array.<number>} hsla
 * @param {Array.<number>} rgba
 * @return {Array.<number>} rgba
 */ function hsla2rgba(hsla, rgba) {
    var h = (parseFloat(hsla[0]) % 360 + 360) % 360 / 360; // 0 .. 1
    // NOTE(deanm): According to the CSS spec s/l should only be
    // percentages, but we don't bother and let float or percentage.
    var s = parseCssFloat(hsla[1]);
    var l = parseCssFloat(hsla[2]);
    var m2 = l <= 0.5 ? l * (s + 1) : l + s - l * s;
    var m1 = l * 2 - m2;
    rgba = rgba || [];
    setRgba(rgba, clampCssByte(cssHueToRgb(m1, m2, h + 1 / 3) * 255), clampCssByte(cssHueToRgb(m1, m2, h) * 255), clampCssByte(cssHueToRgb(m1, m2, h - 1 / 3) * 255), 1);
    if (hsla.length === 4) {
        rgba[3] = hsla[3];
    }
    return rgba;
}
/**
 * @name clay.core.color.rgba2hsla
 * @param {Array.<number>} rgba
 * @return {Array.<number>} hsla
 */ function rgba2hsla(rgba) {
    if (!rgba) {
        return;
    }
    // RGB from 0 to 255
    var R = rgba[0] / 255;
    var G = rgba[1] / 255;
    var B = rgba[2] / 255;
    var vMin = Math.min(R, G, B); // Min. value of RGB
    var vMax = Math.max(R, G, B); // Max. value of RGB
    var delta = vMax - vMin; // Delta RGB value
    var L = (vMax + vMin) / 2;
    var H;
    var S;
    // HSL results from 0 to 1
    if (delta === 0) {
        H = 0;
        S = 0;
    } else {
        if (L < 0.5) {
            S = delta / (vMax + vMin);
        } else {
            S = delta / (2 - vMax - vMin);
        }
        var deltaR = ((vMax - R) / 6 + delta / 2) / delta;
        var deltaG = ((vMax - G) / 6 + delta / 2) / delta;
        var deltaB = ((vMax - B) / 6 + delta / 2) / delta;
        if (R === vMax) {
            H = deltaB - deltaG;
        } else if (G === vMax) {
            H = 1 / 3 + deltaR - deltaB;
        } else if (B === vMax) {
            H = 2 / 3 + deltaG - deltaR;
        }
        if (H < 0) {
            H += 1;
        }
        if (H > 1) {
            H -= 1;
        }
    }
    var hsla = [
        H * 360,
        S,
        L
    ];
    if (rgba[3] != null) {
        hsla.push(rgba[3]);
    }
    return hsla;
}
/**
 * @name clay.core.color.lift
 * @param {string} color
 * @param {number} level
 * @return {string}
 */ colorUtil.lift = function(color, level) {
    var colorArr = colorUtil.parse(color);
    if (colorArr) {
        for(var i = 0; i < 3; i++){
            if (level < 0) {
                colorArr[i] = colorArr[i] * (1 - level) | 0;
            } else {
                colorArr[i] = (255 - colorArr[i]) * level + colorArr[i] | 0;
            }
        }
        return colorUtil.stringify(colorArr, colorArr.length === 4 ? 'rgba' : 'rgb');
    }
};
/**
 * @name clay.core.color.toHex
 * @param {string} color
 * @return {string}
 */ colorUtil.toHex = function(color) {
    var colorArr = colorUtil.parse(color);
    if (colorArr) {
        return ((1 << 24) + (colorArr[0] << 16) + (colorArr[1] << 8) + +colorArr[2]).toString(16).slice(1);
    }
};
/**
 * Map value to color. Faster than lerp methods because color is represented by rgba array.
 * @name clay.core.color
 * @param {number} normalizedValue A float between 0 and 1.
 * @param {Array.<Array.<number>>} colors List of rgba color array
 * @param {Array.<number>} [out] Mapped gba color array
 * @return {Array.<number>} will be null/undefined if input illegal.
 */ colorUtil.fastLerp = function(normalizedValue, colors, out) {
    if (!(colors && colors.length) || !(normalizedValue >= 0 && normalizedValue <= 1)) {
        return;
    }
    out = out || [];
    var value = normalizedValue * (colors.length - 1);
    var leftIndex = Math.floor(value);
    var rightIndex = Math.ceil(value);
    var leftColor = colors[leftIndex];
    var rightColor = colors[rightIndex];
    var dv = value - leftIndex;
    out[0] = clampCssByte(lerpNumber(leftColor[0], rightColor[0], dv));
    out[1] = clampCssByte(lerpNumber(leftColor[1], rightColor[1], dv));
    out[2] = clampCssByte(lerpNumber(leftColor[2], rightColor[2], dv));
    out[3] = clampCssFloat(lerpNumber(leftColor[3], rightColor[3], dv));
    return out;
};
colorUtil.fastMapToColor = colorUtil.fastLerp;
/**
 * @param {number} normalizedValue A float between 0 and 1.
 * @param {Array.<string>} colors Color list.
 * @param {boolean=} fullOutput Default false.
 * @return {(string|Object)} Result color. If fullOutput,
 *                           return {color: ..., leftIndex: ..., rightIndex: ..., value: ...},
 */ colorUtil.lerp = function(normalizedValue, colors, fullOutput) {
    if (!(colors && colors.length) || !(normalizedValue >= 0 && normalizedValue <= 1)) {
        return;
    }
    var value = normalizedValue * (colors.length - 1);
    var leftIndex = Math.floor(value);
    var rightIndex = Math.ceil(value);
    var leftColor = colorUtil.parse(colors[leftIndex]);
    var rightColor = colorUtil.parse(colors[rightIndex]);
    var dv = value - leftIndex;
    var color = colorUtil.stringify([
        clampCssByte(lerpNumber(leftColor[0], rightColor[0], dv)),
        clampCssByte(lerpNumber(leftColor[1], rightColor[1], dv)),
        clampCssByte(lerpNumber(leftColor[2], rightColor[2], dv)),
        clampCssFloat(lerpNumber(leftColor[3], rightColor[3], dv))
    ], 'rgba');
    return fullOutput ? {
        color: color,
        leftIndex: leftIndex,
        rightIndex: rightIndex,
        value: value
    } : color;
};
/**
 * @deprecated
 */ colorUtil.mapToColor = colorUtil.lerp;
/**
 * @name clay.core.color
 * @param {string} color
 * @param {number=} h 0 ~ 360, ignore when null.
 * @param {number=} s 0 ~ 1, ignore when null.
 * @param {number=} l 0 ~ 1, ignore when null.
 * @return {string} Color string in rgba format.
 */ colorUtil.modifyHSL = function(color, h, s, l) {
    color = colorUtil.parse(color);
    if (color) {
        color = rgba2hsla(color);
        h != null && (color[0] = clampCssAngle(h));
        s != null && (color[1] = parseCssFloat(s));
        l != null && (color[2] = parseCssFloat(l));
        return colorUtil.stringify(hsla2rgba(color), 'rgba');
    }
};
/**
 * @param {string} color
 * @param {number=} alpha 0 ~ 1
 * @return {string} Color string in rgba format.
 */ colorUtil.modifyAlpha = function(color, alpha) {
    color = colorUtil.parse(color);
    if (color && alpha != null) {
        color[3] = clampCssFloat(alpha);
        return colorUtil.stringify(color, 'rgba');
    }
};
/**
 * @param {Array.<number>} arrColor like [12,33,44,0.4]
 * @param {string} type 'rgba', 'hsva', ...
 * @return {string} Result color. (If input illegal, return undefined).
 */ colorUtil.stringify = function(arrColor, type) {
    if (!arrColor || !arrColor.length) {
        return;
    }
    var colorStr = arrColor[0] + ',' + arrColor[1] + ',' + arrColor[2];
    if (type === 'rgba' || type === 'hsva' || type === 'hsla') {
        colorStr += ',' + arrColor[3];
    }
    return type + '(' + colorStr + ')';
};
const __TURBOPACK__default__export__ = colorUtil;
}}),
"[project]/node_modules/claygl/src/Material.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$Base$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/core/Base.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$util$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/core/util.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$color$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/core/color.js [app-client] (ecmascript)");
;
;
;
var parseColor = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$color$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].parseToFloat;
var programKeyCache = {};
function getDefineCode(defines) {
    var defineKeys = Object.keys(defines);
    defineKeys.sort();
    var defineStr = [];
    // Custom Defines
    for(var i = 0; i < defineKeys.length; i++){
        var key = defineKeys[i];
        var value = defines[key];
        if (value === null) {
            defineStr.push(key);
        } else {
            defineStr.push(key + ' ' + value.toString());
        }
    }
    return defineStr.join('\n');
}
function getProgramKey(vertexDefines, fragmentDefines, enabledTextures) {
    enabledTextures.sort();
    var defineStr = [];
    for(var i = 0; i < enabledTextures.length; i++){
        var symbol = enabledTextures[i];
        defineStr.push(symbol);
    }
    var key = getDefineCode(vertexDefines) + '\n' + getDefineCode(fragmentDefines) + '\n' + defineStr.join('\n');
    if (programKeyCache[key]) {
        return programKeyCache[key];
    }
    var id = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$util$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].genGUID();
    programKeyCache[key] = id;
    return id;
}
/**
 * Material defines the appearance of mesh surface, like `color`, `roughness`, `metalness`, etc.
 * It contains a {@link clay.Shader} and corresponding uniforms.
 *
 * Here is a basic example to create a standard material
```js
var material = new clay.Material({
    shader: new clay.Shader(
        clay.Shader.source('clay.vertex'),
        clay.Shader.source('clay.fragment')
    )
});
```
 * @constructor clay.Material
 * @extends clay.core.Base
 */ var Material = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$Base$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].extend(function() {
    return /** @lends clay.Material# */ {
        /**
         * @type {string}
         */ name: '',
        /**
         * @type {Object}
         */ // uniforms: null,
        /**
         * @type {clay.Shader}
         */ // shader: null,
        /**
         * @type {boolean}
         */ depthTest: true,
        /**
         * @type {boolean}
         */ depthMask: true,
        /**
         * @type {boolean}
         */ transparent: false,
        /**
         * Blend func is a callback function when the material
         * have custom blending
         * The gl context will be the only argument passed in tho the
         * blend function
         * Detail of blend function in WebGL:
         * http://www.khronos.org/registry/gles/specs/2.0/es_full_spec_2.0.25.pdf
         *
         * Example :
         * function(_gl) {
         *  _gl.blendEquation(_gl.FUNC_ADD);
         *  _gl.blendFunc(_gl.SRC_ALPHA, _gl.ONE_MINUS_SRC_ALPHA);
         * }
         */ blend: null,
        /**
         * If update texture status automatically.
         */ autoUpdateTextureStatus: true,
        uniforms: {},
        vertexDefines: {},
        fragmentDefines: {},
        _textureStatus: {},
        // shadowTransparentMap : null
        // PENDING enable the uniform that only used in shader.
        _enabledUniforms: null
    };
}, function() {
    if (!this.name) {
        this.name = 'MATERIAL_' + this.__uid__;
    }
    if (this.shader) {
        // Keep status, mainly preset uniforms, vertexDefines and fragmentDefines
        this.attachShader(this.shader, true);
    }
}, /** @lends clay.Material.prototype */ {
    precision: 'highp',
    /**
     * Set material uniform
     * @example
     *  mat.setUniform('color', [1, 1, 1, 1]);
     * @param {string} symbol
     * @param {number|array|clay.Texture|ArrayBufferView} value
     */ setUniform: function(symbol, value) {
        if (value === undefined) {
            console.warn('Uniform value "' + symbol + '" is undefined');
        }
        var uniform = this.uniforms[symbol];
        if (uniform) {
            if (typeof value === 'string') {
                // Try to parse as a color. Invalid color string will return null.
                value = parseColor(value) || value;
            }
            uniform.value = value;
            if (this.autoUpdateTextureStatus && uniform.type === 't') {
                if (value) {
                    this.enableTexture(symbol);
                } else {
                    this.disableTexture(symbol);
                }
            }
        }
    },
    /**
     * @param {Object} obj
     */ setUniforms: function(obj) {
        for(var key in obj){
            var val = obj[key];
            this.setUniform(key, val);
        }
    },
    /**
     * @param  {string}  symbol
     * @return {boolean}
     */ isUniformEnabled: function(symbol) {
        return this._enabledUniforms.indexOf(symbol) >= 0;
    },
    getEnabledUniforms: function() {
        return this._enabledUniforms;
    },
    getTextureUniforms: function() {
        return this._textureUniforms;
    },
    /**
     * Alias of setUniform and setUniforms
     * @param {object|string} symbol
     * @param {number|array|clay.Texture|ArrayBufferView} [value]
     */ set: function(symbol, value) {
        if (typeof symbol === 'object') {
            for(var key in symbol){
                var val = symbol[key];
                this.setUniform(key, val);
            }
        } else {
            this.setUniform(symbol, value);
        }
    },
    /**
     * Get uniform value
     * @param  {string} symbol
     * @return {number|array|clay.Texture|ArrayBufferView}
     */ get: function(symbol) {
        var uniform = this.uniforms[symbol];
        if (uniform) {
            return uniform.value;
        }
    },
    /**
     * Attach a shader instance
     * @param  {clay.Shader} shader
     * @param  {boolean} keepStatus If try to keep uniform and texture
     */ attachShader: function(shader, keepStatus) {
        var originalUniforms = this.uniforms;
        // Ignore if uniform can use in shader.
        this.uniforms = shader.createUniforms();
        this.shader = shader;
        var uniforms = this.uniforms;
        this._enabledUniforms = Object.keys(uniforms);
        // Make sure uniforms are set in same order to avoid texture slot wrong
        this._enabledUniforms.sort();
        this._textureUniforms = this._enabledUniforms.filter(function(uniformName) {
            var type = this.uniforms[uniformName].type;
            return type === 't' || type === 'tv';
        }, this);
        var originalVertexDefines = this.vertexDefines;
        var originalFragmentDefines = this.fragmentDefines;
        this.vertexDefines = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$util$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].clone(shader.vertexDefines);
        this.fragmentDefines = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$util$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].clone(shader.fragmentDefines);
        if (keepStatus) {
            for(var symbol in originalUniforms){
                if (uniforms[symbol]) {
                    uniforms[symbol].value = originalUniforms[symbol].value;
                }
            }
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$util$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].defaults(this.vertexDefines, originalVertexDefines);
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$util$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].defaults(this.fragmentDefines, originalFragmentDefines);
        }
        var textureStatus = {};
        for(var key in shader.textures){
            textureStatus[key] = {
                shaderType: shader.textures[key].shaderType,
                type: shader.textures[key].type,
                enabled: keepStatus && this._textureStatus[key] ? this._textureStatus[key].enabled : false
            };
        }
        this._textureStatus = textureStatus;
        this._programKey = '';
    },
    /**
     * Clone a new material and keep uniforms, shader will not be cloned
     * @return {clay.Material}
     */ clone: function() {
        var material = new this.constructor({
            name: this.name,
            shader: this.shader
        });
        for(var symbol in this.uniforms){
            material.uniforms[symbol].value = this.uniforms[symbol].value;
        }
        material.depthTest = this.depthTest;
        material.depthMask = this.depthMask;
        material.transparent = this.transparent;
        material.blend = this.blend;
        material.vertexDefines = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$util$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].clone(this.vertexDefines);
        material.fragmentDefines = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$util$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].clone(this.fragmentDefines);
        material.enableTexture(this.getEnabledTextures());
        material.precision = this.precision;
        return material;
    },
    /**
     * Add a #define macro in shader code
     * @param  {string} shaderType Can be vertex, fragment or both
     * @param  {string} symbol
     * @param  {number} [val]
     */ define: function(shaderType, symbol, val) {
        var vertexDefines = this.vertexDefines;
        var fragmentDefines = this.fragmentDefines;
        if (shaderType !== 'vertex' && shaderType !== 'fragment' && shaderType !== 'both' && arguments.length < 3) {
            // shaderType default to be 'both'
            val = symbol;
            symbol = shaderType;
            shaderType = 'both';
        }
        val = val != null ? val : null;
        if (shaderType === 'vertex' || shaderType === 'both') {
            if (vertexDefines[symbol] !== val) {
                vertexDefines[symbol] = val;
                // Mark as dirty
                this._programKey = '';
            }
        }
        if (shaderType === 'fragment' || shaderType === 'both') {
            if (fragmentDefines[symbol] !== val) {
                fragmentDefines[symbol] = val;
                if (shaderType !== 'both') {
                    this._programKey = '';
                }
            }
        }
    },
    /**
     * Remove a #define macro in shader code
     * @param  {string} shaderType Can be vertex, fragment or both
     * @param  {string} symbol
     */ undefine: function(shaderType, symbol) {
        if (shaderType !== 'vertex' && shaderType !== 'fragment' && shaderType !== 'both' && arguments.length < 2) {
            // shaderType default to be 'both'
            symbol = shaderType;
            shaderType = 'both';
        }
        if (shaderType === 'vertex' || shaderType === 'both') {
            if (this.isDefined('vertex', symbol)) {
                delete this.vertexDefines[symbol];
                // Mark as dirty
                this._programKey = '';
            }
        }
        if (shaderType === 'fragment' || shaderType === 'both') {
            if (this.isDefined('fragment', symbol)) {
                delete this.fragmentDefines[symbol];
                if (shaderType !== 'both') {
                    this._programKey = '';
                }
            }
        }
    },
    /**
     * If macro is defined in shader.
     * @param  {string} shaderType Can be vertex, fragment or both
     * @param  {string} symbol
     */ isDefined: function(shaderType, symbol) {
        // PENDING hasOwnProperty ?
        switch(shaderType){
            case 'vertex':
                return this.vertexDefines[symbol] !== undefined;
            case 'fragment':
                return this.fragmentDefines[symbol] !== undefined;
        }
    },
    /**
     * Get macro value defined in shader.
     * @param  {string} shaderType Can be vertex, fragment or both
     * @param  {string} symbol
     */ getDefine: function(shaderType, symbol) {
        switch(shaderType){
            case 'vertex':
                return this.vertexDefines[symbol];
            case 'fragment':
                return this.fragmentDefines[symbol];
        }
    },
    /**
     * Enable a texture, actually it will add a #define macro in the shader code
     * For example, if texture symbol is diffuseMap, it will add a line `#define DIFFUSEMAP_ENABLED` in the shader code
     * @param  {string} symbol
     */ enableTexture: function(symbol) {
        if (Array.isArray(symbol)) {
            for(var i = 0; i < symbol.length; i++){
                this.enableTexture(symbol[i]);
            }
            return;
        }
        var status = this._textureStatus[symbol];
        if (status) {
            var isEnabled = status.enabled;
            if (!isEnabled) {
                status.enabled = true;
                this._programKey = '';
            }
        }
    },
    /**
     * Enable all textures used in the shader
     */ enableTexturesAll: function() {
        var textureStatus = this._textureStatus;
        for(var symbol in textureStatus){
            textureStatus[symbol].enabled = true;
        }
        this._programKey = '';
    },
    /**
     * Disable a texture, it remove a #define macro in the shader
     * @param  {string} symbol
     */ disableTexture: function(symbol) {
        if (Array.isArray(symbol)) {
            for(var i = 0; i < symbol.length; i++){
                this.disableTexture(symbol[i]);
            }
            return;
        }
        var status = this._textureStatus[symbol];
        if (status) {
            var isDisabled = !status.enabled;
            if (!isDisabled) {
                status.enabled = false;
                this._programKey = '';
            }
        }
    },
    /**
     * Disable all textures used in the shader
     */ disableTexturesAll: function() {
        var textureStatus = this._textureStatus;
        for(var symbol in textureStatus){
            textureStatus[symbol].enabled = false;
        }
        this._programKey = '';
    },
    /**
     * If texture of given type is enabled.
     * @param  {string}  symbol
     * @return {boolean}
     */ isTextureEnabled: function(symbol) {
        var textureStatus = this._textureStatus;
        return !!textureStatus[symbol] && textureStatus[symbol].enabled;
    },
    /**
     * Get all enabled textures
     * @return {string[]}
     */ getEnabledTextures: function() {
        var enabledTextures = [];
        var textureStatus = this._textureStatus;
        for(var symbol in textureStatus){
            if (textureStatus[symbol].enabled) {
                enabledTextures.push(symbol);
            }
        }
        return enabledTextures;
    },
    /**
     * Mark defines are updated.
     */ dirtyDefines: function() {
        this._programKey = '';
    },
    getProgramKey: function() {
        if (!this._programKey) {
            this._programKey = getProgramKey(this.vertexDefines, this.fragmentDefines, this.getEnabledTextures());
        }
        return this._programKey;
    }
});
const __TURBOPACK__default__export__ = Material;
}}),
"[project]/node_modules/claygl/src/glmatrix/common.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "GLMAT_ARRAY_TYPE": (()=>GLMAT_ARRAY_TYPE),
    "GLMAT_EPSILON": (()=>GLMAT_EPSILON),
    "GLMAT_RANDOM": (()=>GLMAT_RANDOM)
});
var GLMAT_EPSILON = 0.000001;
var GLMAT_ARRAY_TYPE = Array;
var GLMAT_RANDOM = Math.random;
}}),
"[project]/node_modules/claygl/src/glmatrix/vec2.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
  * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */ __turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$common$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/glmatrix/common.js [app-client] (ecmascript)");
;
/**
 * @class 2 Dimensional Vector
 * @name vec2
 */ var vec2 = {};
/**
 * Creates a new, empty vec2
 *
 * @returns {vec2} a new 2D vector
 */ vec2.create = function() {
    var out = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$common$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GLMAT_ARRAY_TYPE"](2);
    out[0] = 0;
    out[1] = 0;
    return out;
};
/**
 * Creates a new vec2 initialized with values from an existing vector
 *
 * @param {vec2} a vector to clone
 * @returns {vec2} a new 2D vector
 */ vec2.clone = function(a) {
    var out = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$common$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GLMAT_ARRAY_TYPE"](2);
    out[0] = a[0];
    out[1] = a[1];
    return out;
};
/**
 * Creates a new vec2 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @returns {vec2} a new 2D vector
 */ vec2.fromValues = function(x, y) {
    var out = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$common$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GLMAT_ARRAY_TYPE"](2);
    out[0] = x;
    out[1] = y;
    return out;
};
/**
 * Copy the values from one vec2 to another
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the source vector
 * @returns {vec2} out
 */ vec2.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    return out;
};
/**
 * Set the components of a vec2 to the given values
 *
 * @param {vec2} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @returns {vec2} out
 */ vec2.set = function(out, x, y) {
    out[0] = x;
    out[1] = y;
    return out;
};
/**
 * Adds two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */ vec2.add = function(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    return out;
};
/**
 * Subtracts vector b from vector a
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */ vec2.subtract = function(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    return out;
};
/**
 * Alias for {@link vec2.subtract}
 * @function
 */ vec2.sub = vec2.subtract;
/**
 * Multiplies two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */ vec2.multiply = function(out, a, b) {
    out[0] = a[0] * b[0];
    out[1] = a[1] * b[1];
    return out;
};
/**
 * Alias for {@link vec2.multiply}
 * @function
 */ vec2.mul = vec2.multiply;
/**
 * Divides two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */ vec2.divide = function(out, a, b) {
    out[0] = a[0] / b[0];
    out[1] = a[1] / b[1];
    return out;
};
/**
 * Alias for {@link vec2.divide}
 * @function
 */ vec2.div = vec2.divide;
/**
 * Returns the minimum of two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */ vec2.min = function(out, a, b) {
    out[0] = Math.min(a[0], b[0]);
    out[1] = Math.min(a[1], b[1]);
    return out;
};
/**
 * Returns the maximum of two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */ vec2.max = function(out, a, b) {
    out[0] = Math.max(a[0], b[0]);
    out[1] = Math.max(a[1], b[1]);
    return out;
};
/**
 * Scales a vec2 by a scalar number
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec2} out
 */ vec2.scale = function(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    return out;
};
/**
 * Adds two vec2's after scaling the second operand by a scalar value
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec2} out
 */ vec2.scaleAndAdd = function(out, a, b, scale) {
    out[0] = a[0] + b[0] * scale;
    out[1] = a[1] + b[1] * scale;
    return out;
};
/**
 * Calculates the euclidian distance between two vec2's
 *
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {Number} distance between a and b
 */ vec2.distance = function(a, b) {
    var x = b[0] - a[0], y = b[1] - a[1];
    return Math.sqrt(x * x + y * y);
};
/**
 * Alias for {@link vec2.distance}
 * @function
 */ vec2.dist = vec2.distance;
/**
 * Calculates the squared euclidian distance between two vec2's
 *
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {Number} squared distance between a and b
 */ vec2.squaredDistance = function(a, b) {
    var x = b[0] - a[0], y = b[1] - a[1];
    return x * x + y * y;
};
/**
 * Alias for {@link vec2.squaredDistance}
 * @function
 */ vec2.sqrDist = vec2.squaredDistance;
/**
 * Calculates the length of a vec2
 *
 * @param {vec2} a vector to calculate length of
 * @returns {Number} length of a
 */ vec2.length = function(a) {
    var x = a[0], y = a[1];
    return Math.sqrt(x * x + y * y);
};
/**
 * Alias for {@link vec2.length}
 * @function
 */ vec2.len = vec2.length;
/**
 * Calculates the squared length of a vec2
 *
 * @param {vec2} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */ vec2.squaredLength = function(a) {
    var x = a[0], y = a[1];
    return x * x + y * y;
};
/**
 * Alias for {@link vec2.squaredLength}
 * @function
 */ vec2.sqrLen = vec2.squaredLength;
/**
 * Negates the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to negate
 * @returns {vec2} out
 */ vec2.negate = function(out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    return out;
};
/**
 * Returns the inverse of the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to invert
 * @returns {vec2} out
 */ vec2.inverse = function(out, a) {
    out[0] = 1.0 / a[0];
    out[1] = 1.0 / a[1];
    return out;
};
/**
 * Normalize a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to normalize
 * @returns {vec2} out
 */ vec2.normalize = function(out, a) {
    var x = a[0], y = a[1];
    var len = x * x + y * y;
    if (len > 0) {
        //TODO: evaluate use of glm_invsqrt here?
        len = 1 / Math.sqrt(len);
        out[0] = a[0] * len;
        out[1] = a[1] * len;
    }
    return out;
};
/**
 * Calculates the dot product of two vec2's
 *
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {Number} dot product of a and b
 */ vec2.dot = function(a, b) {
    return a[0] * b[0] + a[1] * b[1];
};
/**
 * Computes the cross product of two vec2's
 * Note that the cross product must by definition produce a 3D vector
 *
 * @param {vec3} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec3} out
 */ vec2.cross = function(out, a, b) {
    var z = a[0] * b[1] - a[1] * b[0];
    out[0] = out[1] = 0;
    out[2] = z;
    return out;
};
/**
 * Performs a linear interpolation between two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {vec2} out
 */ vec2.lerp = function(out, a, b, t) {
    var ax = a[0], ay = a[1];
    out[0] = ax + t * (b[0] - ax);
    out[1] = ay + t * (b[1] - ay);
    return out;
};
/**
 * Generates a random vector with the given scale
 *
 * @param {vec2} out the receiving vector
 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
 * @returns {vec2} out
 */ vec2.random = function(out, scale) {
    scale = scale || 1.0;
    var r = GLMAT_RANDOM() * 2.0 * Math.PI;
    out[0] = Math.cos(r) * scale;
    out[1] = Math.sin(r) * scale;
    return out;
};
/**
 * Transforms the vec2 with a mat2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to transform
 * @param {mat2} m matrix to transform with
 * @returns {vec2} out
 */ vec2.transformMat2 = function(out, a, m) {
    var x = a[0], y = a[1];
    out[0] = m[0] * x + m[2] * y;
    out[1] = m[1] * x + m[3] * y;
    return out;
};
/**
 * Transforms the vec2 with a mat2d
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to transform
 * @param {mat2d} m matrix to transform with
 * @returns {vec2} out
 */ vec2.transformMat2d = function(out, a, m) {
    var x = a[0], y = a[1];
    out[0] = m[0] * x + m[2] * y + m[4];
    out[1] = m[1] * x + m[3] * y + m[5];
    return out;
};
/**
 * Transforms the vec2 with a mat3
 * 3rd vector component is implicitly '1'
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to transform
 * @param {mat3} m matrix to transform with
 * @returns {vec2} out
 */ vec2.transformMat3 = function(out, a, m) {
    var x = a[0], y = a[1];
    out[0] = m[0] * x + m[3] * y + m[6];
    out[1] = m[1] * x + m[4] * y + m[7];
    return out;
};
/**
 * Transforms the vec2 with a mat4
 * 3rd vector component is implicitly '0'
 * 4th vector component is implicitly '1'
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to transform
 * @param {mat4} m matrix to transform with
 * @returns {vec2} out
 */ vec2.transformMat4 = function(out, a, m) {
    var x = a[0], y = a[1];
    out[0] = m[0] * x + m[4] * y + m[12];
    out[1] = m[1] * x + m[5] * y + m[13];
    return out;
};
/**
 * Perform some operation over an array of vec2s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */ vec2.forEach = function() {
    var vec = vec2.create();
    return function(a, stride, offset, count, fn, arg) {
        var i, l;
        if (!stride) {
            stride = 2;
        }
        if (!offset) {
            offset = 0;
        }
        if (count) {
            l = Math.min(count * stride + offset, a.length);
        } else {
            l = a.length;
        }
        for(i = offset; i < l; i += stride){
            vec[0] = a[i];
            vec[1] = a[i + 1];
            fn(vec, vec, arg);
            a[i] = vec[0];
            a[i + 1] = vec[1];
        }
        return a;
    };
}();
const __TURBOPACK__default__export__ = vec2;
}}),
"[project]/node_modules/claygl/src/math/Vector2.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/glmatrix/vec2.js [app-client] (ecmascript)");
;
/**
 * @constructor
 * @alias clay.Vector2
 * @param {number} x
 * @param {number} y
 */ var Vector2 = function(x, y) {
    x = x || 0;
    y = y || 0;
    /**
     * Storage of Vector2, read and write of x, y will change the values in array
     * All methods also operate on the array instead of x, y components
     * @name array
     * @type {Float32Array}
     * @memberOf clay.Vector2#
     */ this.array = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].fromValues(x, y);
    /**
     * Dirty flag is used by the Node to determine
     * if the matrix is updated to latest
     * @name _dirty
     * @type {boolean}
     * @memberOf clay.Vector2#
     */ this._dirty = true;
};
Vector2.prototype = {
    constructor: Vector2,
    /**
     * Add b to self
     * @param  {clay.Vector2} b
     * @return {clay.Vector2}
     */ add: function(b) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].add(this.array, this.array, b.array);
        this._dirty = true;
        return this;
    },
    /**
     * Set x and y components
     * @param  {number}  x
     * @param  {number}  y
     * @return {clay.Vector2}
     */ set: function(x, y) {
        this.array[0] = x;
        this.array[1] = y;
        this._dirty = true;
        return this;
    },
    /**
     * Set x and y components from array
     * @param  {Float32Array|number[]} arr
     * @return {clay.Vector2}
     */ setArray: function(arr) {
        this.array[0] = arr[0];
        this.array[1] = arr[1];
        this._dirty = true;
        return this;
    },
    /**
     * Clone a new Vector2
     * @return {clay.Vector2}
     */ clone: function() {
        return new Vector2(this.x, this.y);
    },
    /**
     * Copy x, y from b
     * @param  {clay.Vector2} b
     * @return {clay.Vector2}
     */ copy: function(b) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].copy(this.array, b.array);
        this._dirty = true;
        return this;
    },
    /**
     * Cross product of self and b, written to a Vector3 out
     * @param  {clay.Vector3} out
     * @param  {clay.Vector2} b
     * @return {clay.Vector2}
     */ cross: function(out, b) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].cross(out.array, this.array, b.array);
        out._dirty = true;
        return this;
    },
    /**
     * Alias for distance
     * @param  {clay.Vector2} b
     * @return {number}
     */ dist: function(b) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].dist(this.array, b.array);
    },
    /**
     * Distance between self and b
     * @param  {clay.Vector2} b
     * @return {number}
     */ distance: function(b) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].distance(this.array, b.array);
    },
    /**
     * Alias for divide
     * @param  {clay.Vector2} b
     * @return {clay.Vector2}
     */ div: function(b) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].div(this.array, this.array, b.array);
        this._dirty = true;
        return this;
    },
    /**
     * Divide self by b
     * @param  {clay.Vector2} b
     * @return {clay.Vector2}
     */ divide: function(b) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].divide(this.array, this.array, b.array);
        this._dirty = true;
        return this;
    },
    /**
     * Dot product of self and b
     * @param  {clay.Vector2} b
     * @return {number}
     */ dot: function(b) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].dot(this.array, b.array);
    },
    /**
     * Alias of length
     * @return {number}
     */ len: function() {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].len(this.array);
    },
    /**
     * Calculate the length
     * @return {number}
     */ length: function() {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].length(this.array);
    },
    /**
     * Linear interpolation between a and b
     * @param  {clay.Vector2} a
     * @param  {clay.Vector2} b
     * @param  {number}  t
     * @return {clay.Vector2}
     */ lerp: function(a, b, t) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].lerp(this.array, a.array, b.array, t);
        this._dirty = true;
        return this;
    },
    /**
     * Minimum of self and b
     * @param  {clay.Vector2} b
     * @return {clay.Vector2}
     */ min: function(b) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].min(this.array, this.array, b.array);
        this._dirty = true;
        return this;
    },
    /**
     * Maximum of self and b
     * @param  {clay.Vector2} b
     * @return {clay.Vector2}
     */ max: function(b) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].max(this.array, this.array, b.array);
        this._dirty = true;
        return this;
    },
    /**
     * Alias for multiply
     * @param  {clay.Vector2} b
     * @return {clay.Vector2}
     */ mul: function(b) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].mul(this.array, this.array, b.array);
        this._dirty = true;
        return this;
    },
    /**
     * Mutiply self and b
     * @param  {clay.Vector2} b
     * @return {clay.Vector2}
     */ multiply: function(b) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].multiply(this.array, this.array, b.array);
        this._dirty = true;
        return this;
    },
    /**
     * Negate self
     * @return {clay.Vector2}
     */ negate: function() {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].negate(this.array, this.array);
        this._dirty = true;
        return this;
    },
    /**
     * Normalize self
     * @return {clay.Vector2}
     */ normalize: function() {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].normalize(this.array, this.array);
        this._dirty = true;
        return this;
    },
    /**
     * Generate random x, y components with a given scale
     * @param  {number} scale
     * @return {clay.Vector2}
     */ random: function(scale) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].random(this.array, scale);
        this._dirty = true;
        return this;
    },
    /**
     * Scale self
     * @param  {number}  scale
     * @return {clay.Vector2}
     */ scale: function(s) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].scale(this.array, this.array, s);
        this._dirty = true;
        return this;
    },
    /**
     * Scale b and add to self
     * @param  {clay.Vector2} b
     * @param  {number}  scale
     * @return {clay.Vector2}
     */ scaleAndAdd: function(b, s) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].scaleAndAdd(this.array, this.array, b.array, s);
        this._dirty = true;
        return this;
    },
    /**
     * Alias for squaredDistance
     * @param  {clay.Vector2} b
     * @return {number}
     */ sqrDist: function(b) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].sqrDist(this.array, b.array);
    },
    /**
     * Squared distance between self and b
     * @param  {clay.Vector2} b
     * @return {number}
     */ squaredDistance: function(b) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].squaredDistance(this.array, b.array);
    },
    /**
     * Alias for squaredLength
     * @return {number}
     */ sqrLen: function() {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].sqrLen(this.array);
    },
    /**
     * Squared length of self
     * @return {number}
     */ squaredLength: function() {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].squaredLength(this.array);
    },
    /**
     * Alias for subtract
     * @param  {clay.Vector2} b
     * @return {clay.Vector2}
     */ sub: function(b) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].sub(this.array, this.array, b.array);
        this._dirty = true;
        return this;
    },
    /**
     * Subtract b from self
     * @param  {clay.Vector2} b
     * @return {clay.Vector2}
     */ subtract: function(b) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].subtract(this.array, this.array, b.array);
        this._dirty = true;
        return this;
    },
    /**
     * Transform self with a Matrix2 m
     * @param  {clay.Matrix2} m
     * @return {clay.Vector2}
     */ transformMat2: function(m) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].transformMat2(this.array, this.array, m.array);
        this._dirty = true;
        return this;
    },
    /**
     * Transform self with a Matrix2d m
     * @param  {clay.Matrix2d} m
     * @return {clay.Vector2}
     */ transformMat2d: function(m) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].transformMat2d(this.array, this.array, m.array);
        this._dirty = true;
        return this;
    },
    /**
     * Transform self with a Matrix3 m
     * @param  {clay.Matrix3} m
     * @return {clay.Vector2}
     */ transformMat3: function(m) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].transformMat3(this.array, this.array, m.array);
        this._dirty = true;
        return this;
    },
    /**
     * Transform self with a Matrix4 m
     * @param  {clay.Matrix4} m
     * @return {clay.Vector2}
     */ transformMat4: function(m) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].transformMat4(this.array, this.array, m.array);
        this._dirty = true;
        return this;
    },
    toString: function() {
        return '[' + Array.prototype.join.call(this.array, ',') + ']';
    },
    toArray: function() {
        return Array.prototype.slice.call(this.array);
    }
};
// Getter and Setter
if (Object.defineProperty) {
    var proto = Vector2.prototype;
    /**
     * @name x
     * @type {number}
     * @memberOf clay.Vector2
     * @instance
     */ Object.defineProperty(proto, 'x', {
        get: function() {
            return this.array[0];
        },
        set: function(value) {
            this.array[0] = value;
            this._dirty = true;
        }
    });
    /**
     * @name y
     * @type {number}
     * @memberOf clay.Vector2
     * @instance
     */ Object.defineProperty(proto, 'y', {
        get: function() {
            return this.array[1];
        },
        set: function(value) {
            this.array[1] = value;
            this._dirty = true;
        }
    });
}
// Supply methods that are not in place
/**
 * @param  {clay.Vector2} out
 * @param  {clay.Vector2} a
 * @param  {clay.Vector2} b
 * @return {clay.Vector2}
 */ Vector2.add = function(out, a, b) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].add(out.array, a.array, b.array);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Vector2} out
 * @param  {number}  x
 * @param  {number}  y
 * @return {clay.Vector2}
 */ Vector2.set = function(out, x, y) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].set(out.array, x, y);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Vector2} out
 * @param  {clay.Vector2} b
 * @return {clay.Vector2}
 */ Vector2.copy = function(out, b) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].copy(out.array, b.array);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Vector3} out
 * @param  {clay.Vector2} a
 * @param  {clay.Vector2} b
 * @return {clay.Vector2}
 */ Vector2.cross = function(out, a, b) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].cross(out.array, a.array, b.array);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Vector2} a
 * @param  {clay.Vector2} b
 * @return {number}
 */ Vector2.dist = function(a, b) {
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].distance(a.array, b.array);
};
/**
 * @function
 * @param  {clay.Vector2} a
 * @param  {clay.Vector2} b
 * @return {number}
 */ Vector2.distance = Vector2.dist;
/**
 * @param  {clay.Vector2} out
 * @param  {clay.Vector2} a
 * @param  {clay.Vector2} b
 * @return {clay.Vector2}
 */ Vector2.div = function(out, a, b) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].divide(out.array, a.array, b.array);
    out._dirty = true;
    return out;
};
/**
 * @function
 * @param  {clay.Vector2} out
 * @param  {clay.Vector2} a
 * @param  {clay.Vector2} b
 * @return {clay.Vector2}
 */ Vector2.divide = Vector2.div;
/**
 * @param  {clay.Vector2} a
 * @param  {clay.Vector2} b
 * @return {number}
 */ Vector2.dot = function(a, b) {
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].dot(a.array, b.array);
};
/**
 * @param  {clay.Vector2} a
 * @return {number}
 */ Vector2.len = function(b) {
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].length(b.array);
};
// Vector2.length = Vector2.len;
/**
 * @param  {clay.Vector2} out
 * @param  {clay.Vector2} a
 * @param  {clay.Vector2} b
 * @param  {number}  t
 * @return {clay.Vector2}
 */ Vector2.lerp = function(out, a, b, t) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].lerp(out.array, a.array, b.array, t);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Vector2} out
 * @param  {clay.Vector2} a
 * @param  {clay.Vector2} b
 * @return {clay.Vector2}
 */ Vector2.min = function(out, a, b) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].min(out.array, a.array, b.array);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Vector2} out
 * @param  {clay.Vector2} a
 * @param  {clay.Vector2} b
 * @return {clay.Vector2}
 */ Vector2.max = function(out, a, b) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].max(out.array, a.array, b.array);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Vector2} out
 * @param  {clay.Vector2} a
 * @param  {clay.Vector2} b
 * @return {clay.Vector2}
 */ Vector2.mul = function(out, a, b) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].multiply(out.array, a.array, b.array);
    out._dirty = true;
    return out;
};
/**
 * @function
 * @param  {clay.Vector2} out
 * @param  {clay.Vector2} a
 * @param  {clay.Vector2} b
 * @return {clay.Vector2}
 */ Vector2.multiply = Vector2.mul;
/**
 * @param  {clay.Vector2} out
 * @param  {clay.Vector2} a
 * @return {clay.Vector2}
 */ Vector2.negate = function(out, a) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].negate(out.array, a.array);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Vector2} out
 * @param  {clay.Vector2} a
 * @return {clay.Vector2}
 */ Vector2.normalize = function(out, a) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].normalize(out.array, a.array);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Vector2} out
 * @param  {number}  scale
 * @return {clay.Vector2}
 */ Vector2.random = function(out, scale) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].random(out.array, scale);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Vector2} out
 * @param  {clay.Vector2} a
 * @param  {number}  scale
 * @return {clay.Vector2}
 */ Vector2.scale = function(out, a, scale) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].scale(out.array, a.array, scale);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Vector2} out
 * @param  {clay.Vector2} a
 * @param  {clay.Vector2} b
 * @param  {number}  scale
 * @return {clay.Vector2}
 */ Vector2.scaleAndAdd = function(out, a, b, scale) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].scaleAndAdd(out.array, a.array, b.array, scale);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Vector2} a
 * @param  {clay.Vector2} b
 * @return {number}
 */ Vector2.sqrDist = function(a, b) {
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].sqrDist(a.array, b.array);
};
/**
 * @function
 * @param  {clay.Vector2} a
 * @param  {clay.Vector2} b
 * @return {number}
 */ Vector2.squaredDistance = Vector2.sqrDist;
/**
 * @param  {clay.Vector2} a
 * @return {number}
 */ Vector2.sqrLen = function(a) {
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].sqrLen(a.array);
};
/**
 * @function
 * @param  {clay.Vector2} a
 * @return {number}
 */ Vector2.squaredLength = Vector2.sqrLen;
/**
 * @param  {clay.Vector2} out
 * @param  {clay.Vector2} a
 * @param  {clay.Vector2} b
 * @return {clay.Vector2}
 */ Vector2.sub = function(out, a, b) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].subtract(out.array, a.array, b.array);
    out._dirty = true;
    return out;
};
/**
 * @function
 * @param  {clay.Vector2} out
 * @param  {clay.Vector2} a
 * @param  {clay.Vector2} b
 * @return {clay.Vector2}
 */ Vector2.subtract = Vector2.sub;
/**
 * @param  {clay.Vector2} out
 * @param  {clay.Vector2} a
 * @param  {clay.Matrix2} m
 * @return {clay.Vector2}
 */ Vector2.transformMat2 = function(out, a, m) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].transformMat2(out.array, a.array, m.array);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Vector2}  out
 * @param  {clay.Vector2}  a
 * @param  {clay.Matrix2d} m
 * @return {clay.Vector2}
 */ Vector2.transformMat2d = function(out, a, m) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].transformMat2d(out.array, a.array, m.array);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Vector2} out
 * @param  {clay.Vector2} a
 * @param  {Matrix3} m
 * @return {clay.Vector2}
 */ Vector2.transformMat3 = function(out, a, m) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].transformMat3(out.array, a.array, m.array);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Vector2} out
 * @param  {clay.Vector2} a
 * @param  {clay.Matrix4} m
 * @return {clay.Vector2}
 */ Vector2.transformMat4 = function(out, a, m) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].transformMat4(out.array, a.array, m.array);
    out._dirty = true;
    return out;
};
const __TURBOPACK__default__export__ = Vector2;
}}),
"[project]/node_modules/claygl/src/gpu/GLProgram.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$vendor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/core/vendor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$Base$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/core/Base.js [app-client] (ecmascript)");
;
;
var SHADER_STATE_TO_ENABLE = 1;
var SHADER_STATE_KEEP_ENABLE = 2;
var SHADER_STATE_PENDING = 3;
// Enable attribute operation is global to all programs
// Here saved the list of all enabled attribute index
// http://www.mjbshaw.com/2013/03/webgl-fixing-invalidoperation.html
var enabledAttributeList = {};
// some util functions
function addLineNumbers(string) {
    var chunks = string.split('\n');
    for(var i = 0, il = chunks.length; i < il; i++){
        // Chrome reports shader errors on lines
        // starting counting from 1
        chunks[i] = i + 1 + ': ' + chunks[i];
    }
    return chunks.join('\n');
}
// Return true or error msg if error happened
function checkShaderErrorMsg(_gl, shader, shaderString) {
    if (!_gl.getShaderParameter(shader, _gl.COMPILE_STATUS)) {
        return [
            _gl.getShaderInfoLog(shader),
            addLineNumbers(shaderString)
        ].join('\n');
    }
}
var tmpFloat32Array16 = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$vendor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].Float32Array(16);
var GLProgram = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$Base$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].extend({
    uniformSemantics: {},
    attributes: {}
}, function() {
    this._locations = {};
    this._textureSlot = 0;
    this._program = null;
}, {
    bind: function(renderer) {
        this._textureSlot = 0;
        renderer.gl.useProgram(this._program);
    },
    hasUniform: function(symbol) {
        var location = this._locations[symbol];
        return location !== null && location !== undefined;
    },
    useTextureSlot: function(renderer, texture, slot) {
        if (texture) {
            renderer.gl.activeTexture(renderer.gl.TEXTURE0 + slot);
            // Maybe texture is not loaded yet;
            if (texture.isRenderable()) {
                texture.bind(renderer);
            } else {
                // Bind texture to null
                texture.unbind(renderer);
            }
        }
    },
    currentTextureSlot: function() {
        return this._textureSlot;
    },
    resetTextureSlot: function(slot) {
        this._textureSlot = slot || 0;
    },
    takeCurrentTextureSlot: function(renderer, texture) {
        var textureSlot = this._textureSlot;
        this.useTextureSlot(renderer, texture, textureSlot);
        this._textureSlot++;
        return textureSlot;
    },
    setUniform: function(_gl, type, symbol, value) {
        var locationMap = this._locations;
        var location = locationMap[symbol];
        // Uniform is not existed in the shader
        if (location === null || location === undefined) {
            return false;
        }
        switch(type){
            case 'm4':
                if (!(value instanceof Float32Array)) {
                    // Use Float32Array is much faster than array when uniformMatrix4fv.
                    for(var i = 0; i < value.length; i++){
                        tmpFloat32Array16[i] = value[i];
                    }
                    value = tmpFloat32Array16;
                }
                _gl.uniformMatrix4fv(location, false, value);
                break;
            case '2i':
                _gl.uniform2i(location, value[0], value[1]);
                break;
            case '2f':
                _gl.uniform2f(location, value[0], value[1]);
                break;
            case '3i':
                _gl.uniform3i(location, value[0], value[1], value[2]);
                break;
            case '3f':
                _gl.uniform3f(location, value[0], value[1], value[2]);
                break;
            case '4i':
                _gl.uniform4i(location, value[0], value[1], value[2], value[3]);
                break;
            case '4f':
                _gl.uniform4f(location, value[0], value[1], value[2], value[3]);
                break;
            case '1i':
                _gl.uniform1i(location, value);
                break;
            case '1f':
                _gl.uniform1f(location, value);
                break;
            case '1fv':
                _gl.uniform1fv(location, value);
                break;
            case '1iv':
                _gl.uniform1iv(location, value);
                break;
            case '2iv':
                _gl.uniform2iv(location, value);
                break;
            case '2fv':
                _gl.uniform2fv(location, value);
                break;
            case '3iv':
                _gl.uniform3iv(location, value);
                break;
            case '3fv':
                _gl.uniform3fv(location, value);
                break;
            case '4iv':
                _gl.uniform4iv(location, value);
                break;
            case '4fv':
                _gl.uniform4fv(location, value);
                break;
            case 'm2':
            case 'm2v':
                _gl.uniformMatrix2fv(location, false, value);
                break;
            case 'm3':
            case 'm3v':
                _gl.uniformMatrix3fv(location, false, value);
                break;
            case 'm4v':
                // Raw value
                if (Array.isArray(value) && Array.isArray(value[0])) {
                    var array = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$vendor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].Float32Array(value.length * 16);
                    var cursor = 0;
                    for(var i = 0; i < value.length; i++){
                        var item = value[i];
                        for(var j = 0; j < 16; j++){
                            array[cursor++] = item[j];
                        }
                    }
                    _gl.uniformMatrix4fv(location, false, array);
                } else {
                    _gl.uniformMatrix4fv(location, false, value);
                }
                break;
        }
        return true;
    },
    setUniformOfSemantic: function(_gl, semantic, val) {
        var semanticInfo = this.uniformSemantics[semantic];
        if (semanticInfo) {
            return this.setUniform(_gl, semanticInfo.type, semanticInfo.symbol, val);
        }
        return false;
    },
    // Used for creating VAO
    // Enable the attributes passed in and disable the rest
    // Example Usage:
    // enableAttributes(renderer, ["position", "texcoords"])
    enableAttributes: function(renderer, attribList, vao) {
        var _gl = renderer.gl;
        var program = this._program;
        var locationMap = this._locations;
        var enabledAttributeListInContext;
        if (vao) {
            enabledAttributeListInContext = vao.__enabledAttributeList;
        } else {
            enabledAttributeListInContext = enabledAttributeList[renderer.__uid__];
        }
        if (!enabledAttributeListInContext) {
            // In vertex array object context
            // PENDING Each vao object needs to enable attributes again?
            if (vao) {
                enabledAttributeListInContext = vao.__enabledAttributeList = [];
            } else {
                enabledAttributeListInContext = enabledAttributeList[renderer.__uid__] = [];
            }
        }
        var locationList = [];
        for(var i = 0; i < attribList.length; i++){
            var symbol = attribList[i];
            if (!this.attributes[symbol]) {
                locationList[i] = -1;
                continue;
            }
            var location = locationMap[symbol];
            if (location == null) {
                location = _gl.getAttribLocation(program, symbol);
                // Attrib location is a number from 0 to ...
                if (location === -1) {
                    locationList[i] = -1;
                    continue;
                }
                locationMap[symbol] = location;
            }
            locationList[i] = location;
            if (!enabledAttributeListInContext[location]) {
                enabledAttributeListInContext[location] = SHADER_STATE_TO_ENABLE;
            } else {
                enabledAttributeListInContext[location] = SHADER_STATE_KEEP_ENABLE;
            }
        }
        for(var i = 0; i < enabledAttributeListInContext.length; i++){
            switch(enabledAttributeListInContext[i]){
                case SHADER_STATE_TO_ENABLE:
                    _gl.enableVertexAttribArray(i);
                    enabledAttributeListInContext[i] = SHADER_STATE_PENDING;
                    break;
                case SHADER_STATE_KEEP_ENABLE:
                    enabledAttributeListInContext[i] = SHADER_STATE_PENDING;
                    break;
                // Expired
                case SHADER_STATE_PENDING:
                    _gl.disableVertexAttribArray(i);
                    enabledAttributeListInContext[i] = 0;
                    break;
            }
        }
        return locationList;
    },
    getAttribLocation: function(_gl, symbol) {
        var locationMap = this._locations;
        var location = locationMap[symbol];
        if (location == null) {
            location = _gl.getAttribLocation(this._program, symbol);
            locationMap[symbol] = location;
        }
        return location;
    },
    buildProgram: function(_gl, shader, vertexShaderCode, fragmentShaderCode) {
        var vertexShader = _gl.createShader(_gl.VERTEX_SHADER);
        var program = _gl.createProgram();
        _gl.shaderSource(vertexShader, vertexShaderCode);
        _gl.compileShader(vertexShader);
        var fragmentShader = _gl.createShader(_gl.FRAGMENT_SHADER);
        _gl.shaderSource(fragmentShader, fragmentShaderCode);
        _gl.compileShader(fragmentShader);
        var msg = checkShaderErrorMsg(_gl, vertexShader, vertexShaderCode);
        if (msg) {
            return msg;
        }
        msg = checkShaderErrorMsg(_gl, fragmentShader, fragmentShaderCode);
        if (msg) {
            return msg;
        }
        _gl.attachShader(program, vertexShader);
        _gl.attachShader(program, fragmentShader);
        // Force the position bind to location 0;
        if (shader.attributeSemantics['POSITION']) {
            _gl.bindAttribLocation(program, 0, shader.attributeSemantics['POSITION'].symbol);
        } else {
            // Else choose an attribute and bind to location 0;
            var keys = Object.keys(this.attributes);
            _gl.bindAttribLocation(program, 0, keys[0]);
        }
        _gl.linkProgram(program);
        _gl.deleteShader(vertexShader);
        _gl.deleteShader(fragmentShader);
        this._program = program;
        // Save code.
        this.vertexCode = vertexShaderCode;
        this.fragmentCode = fragmentShaderCode;
        if (!_gl.getProgramParameter(program, _gl.LINK_STATUS)) {
            return 'Could not link program\n' + _gl.getProgramInfoLog(program);
        }
        // Cache uniform locations
        for(var i = 0; i < shader.uniforms.length; i++){
            var uniformSymbol = shader.uniforms[i];
            this._locations[uniformSymbol] = _gl.getUniformLocation(program, uniformSymbol);
        }
    }
});
const __TURBOPACK__default__export__ = GLProgram;
}}),
"[project]/node_modules/claygl/src/gpu/ProgramManager.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$gpu$2f$GLProgram$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/gpu/GLProgram.js [app-client] (ecmascript)");
;
var loopRegex = /for\s*?\(int\s*?_idx_\s*\=\s*([\w-]+)\;\s*_idx_\s*<\s*([\w-]+);\s*_idx_\s*\+\+\s*\)\s*\{\{([\s\S]+?)(?=\}\})\}\}/g;
function unrollLoop(shaderStr, defines, lightsNumbers) {
    // Loop unroll from three.js, https://github.com/mrdoob/three.js/blob/master/src/renderers/webgl/WebGLProgram.js#L175
    // In some case like shadowMap in loop use 'i' to index value much slower.
    // Loop use _idx_ and increased with _idx_++ will be unrolled
    // Use {{ }} to match the pair so the if statement will not be affected
    // Write like following
    // for (int _idx_ = 0; _idx_ < 4; _idx_++) {{
    //     vec3 color = texture2D(textures[_idx_], uv).rgb;
    // }}
    function replace(match, start, end, snippet) {
        var unroll = '';
        // Try to treat as define
        if (isNaN(start)) {
            if (start in defines) {
                start = defines[start];
            } else {
                start = lightNumberDefines[start];
            }
        }
        if (isNaN(end)) {
            if (end in defines) {
                end = defines[end];
            } else {
                end = lightNumberDefines[end];
            }
        }
        // TODO Error checking
        for(var idx = parseInt(start); idx < parseInt(end); idx++){
            // PENDING Add scope?
            unroll += '{' + snippet.replace(/float\s*\(\s*_idx_\s*\)/g, idx.toFixed(1)).replace(/_idx_/g, idx) + '}';
        }
        return unroll;
    }
    var lightNumberDefines = {};
    for(var lightType in lightsNumbers){
        lightNumberDefines[lightType + '_COUNT'] = lightsNumbers[lightType];
    }
    return shaderStr.replace(loopRegex, replace);
}
function getDefineCode(defines, lightsNumbers, enabledTextures) {
    var defineStr = [];
    if (lightsNumbers) {
        for(var lightType in lightsNumbers){
            var count = lightsNumbers[lightType];
            if (count > 0) {
                defineStr.push('#define ' + lightType.toUpperCase() + '_COUNT ' + count);
            }
        }
    }
    if (enabledTextures) {
        for(var i = 0; i < enabledTextures.length; i++){
            var symbol = enabledTextures[i];
            defineStr.push('#define ' + symbol.toUpperCase() + '_ENABLED');
        }
    }
    // Custom Defines
    for(var symbol in defines){
        var value = defines[symbol];
        if (value === null) {
            defineStr.push('#define ' + symbol);
        } else {
            defineStr.push('#define ' + symbol + ' ' + value.toString());
        }
    }
    return defineStr.join('\n');
}
function getExtensionCode(exts) {
    // Extension declaration must before all non-preprocessor codes
    // TODO vertex ? extension enum ?
    var extensionStr = [];
    for(var i = 0; i < exts.length; i++){
        extensionStr.push('#extension GL_' + exts[i] + ' : enable');
    }
    return extensionStr.join('\n');
}
function getPrecisionCode(precision) {
    return [
        'precision',
        precision,
        'float'
    ].join(' ') + ';\n' + [
        'precision',
        precision,
        'int'
    ].join(' ') + ';\n' + [
        'precision',
        precision,
        'sampler2D'
    ].join(' ') + ';\n';
}
function ProgramManager(renderer) {
    this._renderer = renderer;
    this._cache = {};
}
ProgramManager.prototype.getProgram = function(renderable, material, scene) {
    var cache = this._cache;
    var isSkinnedMesh = renderable.isSkinnedMesh && renderable.isSkinnedMesh();
    var isInstancedMesh = renderable.isInstancedMesh && renderable.isInstancedMesh();
    var key = 's' + material.shader.shaderID + 'm' + material.getProgramKey();
    if (scene) {
        key += 'se' + scene.getProgramKey(renderable.lightGroup);
    }
    if (isSkinnedMesh) {
        key += ',sk' + renderable.joints.length;
    }
    if (isInstancedMesh) {
        key += ',is';
    }
    var program = cache[key];
    if (program) {
        return program;
    }
    var lightsNumbers = scene ? scene.getLightsNumbers(renderable.lightGroup) : {};
    var renderer = this._renderer;
    var _gl = renderer.gl;
    var enabledTextures = material.getEnabledTextures();
    var extraDefineCode = '';
    if (isSkinnedMesh) {
        var skinDefines = {
            SKINNING: null,
            JOINT_COUNT: renderable.joints.length
        };
        if (renderable.joints.length > renderer.getMaxJointNumber()) {
            skinDefines.USE_SKIN_MATRICES_TEXTURE = null;
        }
        // TODO Add skinning code?
        extraDefineCode += '\n' + getDefineCode(skinDefines) + '\n';
    }
    if (isInstancedMesh) {
        extraDefineCode += '\n#define INSTANCING\n';
    }
    // TODO Optimize key generation
    // VERTEX
    var vertexDefineStr = extraDefineCode + getDefineCode(material.vertexDefines, lightsNumbers, enabledTextures);
    // FRAGMENT
    var fragmentDefineStr = extraDefineCode + getDefineCode(material.fragmentDefines, lightsNumbers, enabledTextures);
    var vertexCode = vertexDefineStr + '\n' + material.shader.vertex;
    var extensions = [
        'OES_standard_derivatives',
        'EXT_shader_texture_lod'
    ].filter(function(ext) {
        return renderer.getGLExtension(ext) != null;
    });
    if (extensions.indexOf('EXT_shader_texture_lod') >= 0) {
        fragmentDefineStr += '\n#define SUPPORT_TEXTURE_LOD';
    }
    if (extensions.indexOf('OES_standard_derivatives') >= 0) {
        fragmentDefineStr += '\n#define SUPPORT_STANDARD_DERIVATIVES';
    }
    var fragmentCode = getExtensionCode(extensions) + '\n' + getPrecisionCode(material.precision) + '\n' + fragmentDefineStr + '\n' + material.shader.fragment;
    var finalVertexCode = unrollLoop(vertexCode, material.vertexDefines, lightsNumbers);
    var finalFragmentCode = unrollLoop(fragmentCode, material.fragmentDefines, lightsNumbers);
    var program = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$gpu$2f$GLProgram$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
    program.uniformSemantics = material.shader.uniformSemantics;
    program.attributes = material.shader.attributes;
    var errorMsg = program.buildProgram(_gl, material.shader, finalVertexCode, finalFragmentCode);
    program.__error = errorMsg;
    cache[key] = program;
    return program;
};
const __TURBOPACK__default__export__ = ProgramManager;
}}),
"[project]/node_modules/claygl/src/Shader.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * Mainly do the parse and compile of shader string
 * Support shader code chunk import and export
 * Support shader semantics
 * http://www.nvidia.com/object/using_sas.html
 * https://github.com/KhronosGroup/collada2json/issues/45
 */ __turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$util$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/core/util.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$vendor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/core/vendor.js [app-client] (ecmascript)");
;
;
var uniformRegex = /uniform\s+(bool|float|int|vec2|vec3|vec4|ivec2|ivec3|ivec4|mat2|mat3|mat4|sampler2D|samplerCube)\s+([\s\S]*?);/g;
var attributeRegex = /attribute\s+(float|int|vec2|vec3|vec4)\s+([\s\S]*?);/g;
// Only parse number define.
var defineRegex = /#define\s+(\w+)?(\s+[\d-.]+)?\s*;?\s*\n/g;
var uniformTypeMap = {
    'bool': '1i',
    'int': '1i',
    'sampler2D': 't',
    'samplerCube': 't',
    'float': '1f',
    'vec2': '2f',
    'vec3': '3f',
    'vec4': '4f',
    'ivec2': '2i',
    'ivec3': '3i',
    'ivec4': '4i',
    'mat2': 'm2',
    'mat3': 'm3',
    'mat4': 'm4'
};
function createZeroArray(len) {
    var arr = [];
    for(var i = 0; i < len; i++){
        arr[i] = 0;
    }
    return arr;
}
var uniformValueConstructor = {
    'bool': function() {
        return true;
    },
    'int': function() {
        return 0;
    },
    'float': function() {
        return 0;
    },
    'sampler2D': function() {
        return null;
    },
    'samplerCube': function() {
        return null;
    },
    'vec2': function() {
        return createZeroArray(2);
    },
    'vec3': function() {
        return createZeroArray(3);
    },
    'vec4': function() {
        return createZeroArray(4);
    },
    'ivec2': function() {
        return createZeroArray(2);
    },
    'ivec3': function() {
        return createZeroArray(3);
    },
    'ivec4': function() {
        return createZeroArray(4);
    },
    'mat2': function() {
        return createZeroArray(4);
    },
    'mat3': function() {
        return createZeroArray(9);
    },
    'mat4': function() {
        return createZeroArray(16);
    },
    'array': function() {
        return [];
    }
};
var attributeSemantics = [
    'POSITION',
    'NORMAL',
    'BINORMAL',
    'TANGENT',
    'TEXCOORD',
    'TEXCOORD_0',
    'TEXCOORD_1',
    'COLOR',
    // Skinning
    // https://github.com/KhronosGroup/glTF/blob/master/specification/README.md#semantics
    'JOINT',
    'WEIGHT'
];
var uniformSemantics = [
    'SKIN_MATRIX',
    // Information about viewport
    'VIEWPORT_SIZE',
    'VIEWPORT',
    'DEVICEPIXELRATIO',
    // Window size for window relative coordinate
    // https://www.opengl.org/sdk/docs/man/html/gl_FragCoord.xhtml
    'WINDOW_SIZE',
    // Infomation about camera
    'NEAR',
    'FAR',
    // Time
    'TIME'
];
var matrixSemantics = [
    'WORLD',
    'VIEW',
    'PROJECTION',
    'WORLDVIEW',
    'VIEWPROJECTION',
    'WORLDVIEWPROJECTION',
    'WORLDINVERSE',
    'VIEWINVERSE',
    'PROJECTIONINVERSE',
    'WORLDVIEWINVERSE',
    'VIEWPROJECTIONINVERSE',
    'WORLDVIEWPROJECTIONINVERSE',
    'WORLDTRANSPOSE',
    'VIEWTRANSPOSE',
    'PROJECTIONTRANSPOSE',
    'WORLDVIEWTRANSPOSE',
    'VIEWPROJECTIONTRANSPOSE',
    'WORLDVIEWPROJECTIONTRANSPOSE',
    'WORLDINVERSETRANSPOSE',
    'VIEWINVERSETRANSPOSE',
    'PROJECTIONINVERSETRANSPOSE',
    'WORLDVIEWINVERSETRANSPOSE',
    'VIEWPROJECTIONINVERSETRANSPOSE',
    'WORLDVIEWPROJECTIONINVERSETRANSPOSE'
];
var attributeSizeMap = {
    // WebGL does not support integer attributes
    'vec4': 4,
    'vec3': 3,
    'vec2': 2,
    'float': 1
};
var shaderIDCache = {};
var shaderCodeCache = {};
function getShaderID(vertex, fragment) {
    var key = 'vertex:' + vertex + 'fragment:' + fragment;
    if (shaderIDCache[key]) {
        return shaderIDCache[key];
    }
    var id = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$util$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].genGUID();
    shaderIDCache[key] = id;
    shaderCodeCache[id] = {
        vertex: vertex,
        fragment: fragment
    };
    return id;
}
function removeComment(code) {
    return code.replace(/[ \t]*\/\/.*\n/g, '') // remove //
    .replace(/[ \t]*\/\*[\s\S]*?\*\//g, ''); // remove /* */
}
function logSyntaxError() {
    console.error('Wrong uniform/attributes syntax');
}
function parseDeclarations(type, line) {
    var speratorsRegexp = /[,=\(\):]/;
    var tokens = line// Convert `symbol: [1,2,3]` to `symbol: vec3(1,2,3)`
    .replace(/:\s*\[\s*(.*)\s*\]/g, '=' + type + '($1)').replace(/\s+/g, '').split(/(?=[,=\(\):])/g);
    var newTokens = [];
    for(var i = 0; i < tokens.length; i++){
        if (tokens[i].match(speratorsRegexp)) {
            newTokens.push(tokens[i].charAt(0), tokens[i].slice(1));
        } else {
            newTokens.push(tokens[i]);
        }
    }
    tokens = newTokens;
    var TYPE_SYMBOL = 0;
    var TYPE_ASSIGN = 1;
    var TYPE_VEC = 2;
    var TYPE_ARR = 3;
    var TYPE_SEMANTIC = 4;
    var TYPE_NORMAL = 5;
    var opType = TYPE_SYMBOL;
    var declarations = {};
    var declarationValue = null;
    var currentDeclaration;
    addSymbol(tokens[0]);
    function addSymbol(symbol) {
        if (!symbol) {
            logSyntaxError();
        }
        var arrResult = symbol.match(/\[(.*?)\]/);
        currentDeclaration = symbol.replace(/\[(.*?)\]/, '');
        declarations[currentDeclaration] = {};
        if (arrResult) {
            declarations[currentDeclaration].isArray = true;
            declarations[currentDeclaration].arraySize = arrResult[1];
        }
    }
    for(var i = 1; i < tokens.length; i++){
        var token = tokens[i];
        if (!token) {
            continue;
        }
        if (token === '=') {
            if (opType !== TYPE_SYMBOL && opType !== TYPE_ARR) {
                logSyntaxError();
                break;
            }
            opType = TYPE_ASSIGN;
            continue;
        } else if (token === ':') {
            opType = TYPE_SEMANTIC;
            continue;
        } else if (token === ',') {
            if (opType === TYPE_VEC) {
                if (!(declarationValue instanceof Array)) {
                    logSyntaxError();
                    break;
                }
                declarationValue.push(+tokens[++i]);
            } else {
                opType = TYPE_NORMAL;
            }
            continue;
        } else if (token === ')') {
            declarations[currentDeclaration].value = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$vendor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].Float32Array(declarationValue);
            declarationValue = null;
            opType = TYPE_NORMAL;
            continue;
        } else if (token === '(') {
            if (opType !== TYPE_VEC) {
                logSyntaxError();
                break;
            }
            if (!(declarationValue instanceof Array)) {
                logSyntaxError();
                break;
            }
            declarationValue.push(+tokens[++i]);
            continue;
        } else if (token.indexOf('vec') >= 0) {
            if (opType !== TYPE_ASSIGN && opType !== TYPE_SEMANTIC) {
                logSyntaxError();
                break;
            }
            opType = TYPE_VEC;
            declarationValue = [];
            continue;
        } else if (opType === TYPE_ASSIGN) {
            if (type === 'bool') {
                declarations[currentDeclaration].value = token === 'true';
            } else {
                declarations[currentDeclaration].value = parseFloat(token);
            }
            declarationValue = null;
            continue;
        } else if (opType === TYPE_SEMANTIC) {
            var semantic = token;
            if (attributeSemantics.indexOf(semantic) >= 0 || uniformSemantics.indexOf(semantic) >= 0 || matrixSemantics.indexOf(semantic) >= 0) {
                declarations[currentDeclaration].semantic = semantic;
            } else if (semantic === 'ignore' || semantic === 'unconfigurable') {
                declarations[currentDeclaration].ignore = true;
            } else {
                // Try to parse as a default tvalue.
                if (type === 'bool') {
                    declarations[currentDeclaration].value = semantic === 'true';
                } else {
                    declarations[currentDeclaration].value = parseFloat(semantic);
                }
            }
            continue;
        }
        // treat as symbol.
        addSymbol(token);
        opType = TYPE_SYMBOL;
    }
    return declarations;
}
/**
 * @constructor
 * @extends clay.core.Base
 * @alias clay.Shader
 * @param {string} vertex
 * @param {string} fragment
 * @example
 * // Create a phong shader
 * var shader = new clay.Shader(
 *      clay.Shader.source('clay.standard.vertex'),
 *      clay.Shader.source('clay.standard.fragment')
 * );
 */ function Shader(vertex, fragment) {
    // First argument can be { vertex, fragment }
    if (typeof vertex === 'object') {
        fragment = vertex.fragment;
        vertex = vertex.vertex;
    }
    vertex = removeComment(vertex);
    fragment = removeComment(fragment);
    this._shaderID = getShaderID(vertex, fragment);
    this._vertexCode = Shader.parseImport(vertex);
    this._fragmentCode = Shader.parseImport(fragment);
    /**
     * @readOnly
     */ this.attributeSemantics = {};
    /**
     * @readOnly
     */ this.matrixSemantics = {};
    /**
     * @readOnly
     */ this.uniformSemantics = {};
    /**
     * @readOnly
     */ this.matrixSemanticKeys = [];
    /**
     * @readOnly
     */ this.uniformTemplates = {};
    /**
     * @readOnly
     */ this.attributes = {};
    /**
     * @readOnly
     */ this.textures = {};
    /**
     * @readOnly
     */ this.vertexDefines = {};
    /**
     * @readOnly
     */ this.fragmentDefines = {};
    this._parseAttributes();
    this._parseUniforms();
    this._parseDefines();
}
Shader.prototype = {
    constructor: Shader,
    // Create a new uniform instance for material
    createUniforms: function() {
        var uniforms = {};
        for(var symbol in this.uniformTemplates){
            var uniformTpl = this.uniformTemplates[symbol];
            uniforms[symbol] = {
                type: uniformTpl.type,
                value: uniformTpl.value()
            };
        }
        return uniforms;
    },
    _parseImport: function() {
        this._vertexCode = Shader.parseImport(this.vertex);
        this._fragmentCode = Shader.parseImport(this.fragment);
    },
    _addSemanticUniform: function(symbol, uniformType, semantic) {
        // This case is only for SKIN_MATRIX
        // TODO
        if (attributeSemantics.indexOf(semantic) >= 0) {
            this.attributeSemantics[semantic] = {
                symbol: symbol,
                type: uniformType
            };
        } else if (matrixSemantics.indexOf(semantic) >= 0) {
            var isTranspose = false;
            var semanticNoTranspose = semantic;
            if (semantic.match(/TRANSPOSE$/)) {
                isTranspose = true;
                semanticNoTranspose = semantic.slice(0, -9);
            }
            this.matrixSemantics[semantic] = {
                symbol: symbol,
                type: uniformType,
                isTranspose: isTranspose,
                semanticNoTranspose: semanticNoTranspose
            };
        } else if (uniformSemantics.indexOf(semantic) >= 0) {
            this.uniformSemantics[semantic] = {
                symbol: symbol,
                type: uniformType
            };
        }
    },
    _addMaterialUniform: function(symbol, type, uniformType, defaultValueFunc, isArray, materialUniforms) {
        materialUniforms[symbol] = {
            type: uniformType,
            value: isArray ? uniformValueConstructor['array'] : defaultValueFunc || uniformValueConstructor[type],
            semantic: null
        };
    },
    _parseUniforms: function() {
        var uniforms = {};
        var self = this;
        var shaderType = 'vertex';
        this._uniformList = [];
        this._vertexCode = this._vertexCode.replace(uniformRegex, _uniformParser);
        shaderType = 'fragment';
        this._fragmentCode = this._fragmentCode.replace(uniformRegex, _uniformParser);
        self.matrixSemanticKeys = Object.keys(this.matrixSemantics);
        function makeDefaultValueFunc(value) {
            return value != null ? function() {
                return value;
            } : null;
        }
        function _uniformParser(str, type, content) {
            var declaredUniforms = parseDeclarations(type, content);
            var uniformMainStr = [];
            for(var symbol in declaredUniforms){
                var uniformInfo = declaredUniforms[symbol];
                var semantic = uniformInfo.semantic;
                var tmpStr = symbol;
                var uniformType = uniformTypeMap[type];
                var defaultValueFunc = makeDefaultValueFunc(declaredUniforms[symbol].value);
                if (declaredUniforms[symbol].isArray) {
                    tmpStr += '[' + declaredUniforms[symbol].arraySize + ']';
                    uniformType += 'v';
                }
                uniformMainStr.push(tmpStr);
                self._uniformList.push(symbol);
                if (!uniformInfo.ignore) {
                    if (type === 'sampler2D' || type === 'samplerCube') {
                        // Texture is default disabled
                        self.textures[symbol] = {
                            shaderType: shaderType,
                            type: type
                        };
                    }
                    if (semantic) {
                        // TODO Should not declare multiple symbols if have semantic.
                        self._addSemanticUniform(symbol, uniformType, semantic);
                    } else {
                        self._addMaterialUniform(symbol, type, uniformType, defaultValueFunc, declaredUniforms[symbol].isArray, uniforms);
                    }
                }
            }
            return uniformMainStr.length > 0 ? 'uniform ' + type + ' ' + uniformMainStr.join(',') + ';\n' : '';
        }
        this.uniformTemplates = uniforms;
    },
    _parseAttributes: function() {
        var attributes = {};
        var self = this;
        this._vertexCode = this._vertexCode.replace(attributeRegex, _attributeParser);
        function _attributeParser(str, type, content) {
            var declaredAttributes = parseDeclarations(type, content);
            var size = attributeSizeMap[type] || 1;
            var attributeMainStr = [];
            for(var symbol in declaredAttributes){
                var semantic = declaredAttributes[symbol].semantic;
                attributes[symbol] = {
                    // TODO Can only be float
                    type: 'float',
                    size: size,
                    semantic: semantic || null
                };
                // TODO Should not declare multiple symbols if have semantic.
                if (semantic) {
                    if (attributeSemantics.indexOf(semantic) < 0) {
                        throw new Error('Unkown semantic "' + semantic + '"');
                    } else {
                        self.attributeSemantics[semantic] = {
                            symbol: symbol,
                            type: type
                        };
                    }
                }
                attributeMainStr.push(symbol);
            }
            return 'attribute ' + type + ' ' + attributeMainStr.join(',') + ';\n';
        }
        this.attributes = attributes;
    },
    _parseDefines: function() {
        var self = this;
        var shaderType = 'vertex';
        this._vertexCode = this._vertexCode.replace(defineRegex, _defineParser);
        shaderType = 'fragment';
        this._fragmentCode = this._fragmentCode.replace(defineRegex, _defineParser);
        function _defineParser(str, symbol, value) {
            var defines = shaderType === 'vertex' ? self.vertexDefines : self.fragmentDefines;
            if (!defines[symbol]) {
                if (value === 'false') {
                    defines[symbol] = false;
                } else if (value === 'true') {
                    defines[symbol] = true;
                } else {
                    defines[symbol] = value ? isNaN(parseFloat(value)) ? value.trim() : parseFloat(value) : null;
                }
            }
            return '';
        }
    },
    /**
     * Clone a new shader
     * @return {clay.Shader}
     */ clone: function() {
        var code = shaderCodeCache[this._shaderID];
        var shader = new Shader(code.vertex, code.fragment);
        return shader;
    }
};
if (Object.defineProperty) {
    Object.defineProperty(Shader.prototype, 'shaderID', {
        get: function() {
            return this._shaderID;
        }
    });
    Object.defineProperty(Shader.prototype, 'vertex', {
        get: function() {
            return this._vertexCode;
        }
    });
    Object.defineProperty(Shader.prototype, 'fragment', {
        get: function() {
            return this._fragmentCode;
        }
    });
    Object.defineProperty(Shader.prototype, 'uniforms', {
        get: function() {
            return this._uniformList;
        }
    });
}
var importRegex = /(@import)\s*([0-9a-zA-Z_\-\.]*)/g;
Shader.parseImport = function(shaderStr) {
    shaderStr = shaderStr.replace(importRegex, function(str, importSymbol, importName) {
        var str = Shader.source(importName);
        if (str) {
            // Recursively parse
            return Shader.parseImport(str);
        } else {
            console.error('Shader chunk "' + importName + '" not existed in library');
            return '';
        }
    });
    return shaderStr;
};
var exportRegex = /(@export)\s*([0-9a-zA-Z_\-\.]*)\s*\n([\s\S]*?)@end/g;
/**
 * Import shader source
 * @param  {string} shaderStr
 * @memberOf clay.Shader
 */ Shader['import'] = function(shaderStr) {
    shaderStr.replace(exportRegex, function(str, exportSymbol, exportName, code) {
        var code = code.replace(/(^[\s\t\xa0\u3000]+)|([\u3000\xa0\s\t]+\x24)/g, '');
        if (code) {
            var parts = exportName.split('.');
            var obj = Shader.codes;
            var i = 0;
            var key;
            while(i < parts.length - 1){
                key = parts[i++];
                if (!obj[key]) {
                    obj[key] = {};
                }
                obj = obj[key];
            }
            key = parts[i];
            obj[key] = code;
        }
        return code;
    });
};
/**
 * Library to store all the loaded shader codes
 * @type {Object}
 * @readOnly
 * @memberOf clay.Shader
 */ Shader.codes = {};
/**
 * Get shader source
 * @param  {string} name
 * @return {string}
 */ Shader.source = function(name) {
    var parts = name.split('.');
    var obj = Shader.codes;
    var i = 0;
    while(obj && i < parts.length){
        var key = parts[i++];
        obj = obj[key];
    }
    if (typeof obj !== 'string') {
        // FIXME Use default instead
        console.error('Shader "' + name + '" not existed in library');
        return '';
    }
    return obj;
};
const __TURBOPACK__default__export__ = Shader;
}}),
"[project]/node_modules/claygl/src/shader/source/prez.glsl.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
const __TURBOPACK__default__export__ = "@export clay.prez.vertex\nuniform mat4 WVP : WORLDVIEWPROJECTION;\nattribute vec3 pos : POSITION;\nattribute vec2 uv : TEXCOORD_0;\nuniform vec2 uvRepeat : [1.0, 1.0];\nuniform vec2 uvOffset : [0.0, 0.0];\n@import clay.chunk.skinning_header\n@import clay.chunk.instancing_header\nvarying vec2 v_Texcoord;\nvoid main()\n{\n vec4 P = vec4(pos, 1.0);\n#ifdef SKINNING\n @import clay.chunk.skin_matrix\n P = skinMatrixWS * P;\n#endif\n#ifdef INSTANCING\n @import clay.chunk.instancing_matrix\n P = instanceMat * P;\n#endif\n gl_Position = WVP * P;\n v_Texcoord = uv * uvRepeat + uvOffset;\n}\n@end\n@export clay.prez.fragment\nuniform sampler2D alphaMap;\nuniform float alphaCutoff: 0.0;\nvarying vec2 v_Texcoord;\nvoid main()\n{\n if (alphaCutoff > 0.0) {\n if (texture2D(alphaMap, v_Texcoord).a <= alphaCutoff) {\n discard;\n }\n }\n gl_FragColor = vec4(0.0,0.0,0.0,1.0);\n}\n@end";
}}),
"[project]/node_modules/claygl/src/glmatrix/mat4.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
  * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */ __turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$common$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/glmatrix/common.js [app-client] (ecmascript)");
;
/**
 * @class 4x4 Matrix
 * @name mat4
 */ var mat4 = {};
/**
 * Creates a new identity mat4
 *
 * @returns {mat4} a new 4x4 matrix
 */ mat4.create = function() {
    var out = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$common$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GLMAT_ARRAY_TYPE"](16);
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
};
/**
 * Creates a new mat4 initialized with values from an existing matrix
 *
 * @param {mat4} a matrix to clone
 * @returns {mat4} a new 4x4 matrix
 */ mat4.clone = function(a) {
    var out = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$common$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GLMAT_ARRAY_TYPE"](16);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    out[9] = a[9];
    out[10] = a[10];
    out[11] = a[11];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
};
/**
 * Copy the values from one mat4 to another
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */ mat4.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    out[9] = a[9];
    out[10] = a[10];
    out[11] = a[11];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
};
/**
 * Set a mat4 to the identity matrix
 *
 * @param {mat4} out the receiving matrix
 * @returns {mat4} out
 */ mat4.identity = function(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
};
/**
 * Transpose the values of a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */ mat4.transpose = function(out, a) {
    // If we are transposing ourselves we can skip a few steps but have to cache some values
    if (out === a) {
        var a01 = a[1], a02 = a[2], a03 = a[3], a12 = a[6], a13 = a[7], a23 = a[11];
        out[1] = a[4];
        out[2] = a[8];
        out[3] = a[12];
        out[4] = a01;
        out[6] = a[9];
        out[7] = a[13];
        out[8] = a02;
        out[9] = a12;
        out[11] = a[14];
        out[12] = a03;
        out[13] = a13;
        out[14] = a23;
    } else {
        out[0] = a[0];
        out[1] = a[4];
        out[2] = a[8];
        out[3] = a[12];
        out[4] = a[1];
        out[5] = a[5];
        out[6] = a[9];
        out[7] = a[13];
        out[8] = a[2];
        out[9] = a[6];
        out[10] = a[10];
        out[11] = a[14];
        out[12] = a[3];
        out[13] = a[7];
        out[14] = a[11];
        out[15] = a[15];
    }
    return out;
};
/**
 * Inverts a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */ mat4.invert = function(out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3], a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7], a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11], a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15], b00 = a00 * a11 - a01 * a10, b01 = a00 * a12 - a02 * a10, b02 = a00 * a13 - a03 * a10, b03 = a01 * a12 - a02 * a11, b04 = a01 * a13 - a03 * a11, b05 = a02 * a13 - a03 * a12, b06 = a20 * a31 - a21 * a30, b07 = a20 * a32 - a22 * a30, b08 = a20 * a33 - a23 * a30, b09 = a21 * a32 - a22 * a31, b10 = a21 * a33 - a23 * a31, b11 = a22 * a33 - a23 * a32, // Calculate the determinant
    det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
    if (!det) {
        return null;
    }
    det = 1.0 / det;
    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;
    return out;
};
/**
 * Calculates the adjugate of a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */ mat4.adjoint = function(out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3], a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7], a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11], a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];
    out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);
    out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));
    out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);
    out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));
    out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));
    out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);
    out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));
    out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);
    out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);
    out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));
    out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);
    out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));
    out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));
    out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);
    out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));
    out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);
    return out;
};
/**
 * Calculates the determinant of a mat4
 *
 * @param {mat4} a the source matrix
 * @returns {Number} determinant of a
 */ mat4.determinant = function(a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3], a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7], a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11], a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15], b00 = a00 * a11 - a01 * a10, b01 = a00 * a12 - a02 * a10, b02 = a00 * a13 - a03 * a10, b03 = a01 * a12 - a02 * a11, b04 = a01 * a13 - a03 * a11, b05 = a02 * a13 - a03 * a12, b06 = a20 * a31 - a21 * a30, b07 = a20 * a32 - a22 * a30, b08 = a20 * a33 - a23 * a30, b09 = a21 * a32 - a22 * a31, b10 = a21 * a33 - a23 * a31, b11 = a22 * a33 - a23 * a32;
    // Calculate the determinant
    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
};
/**
 * Multiplies two mat4's
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the first operand
 * @param {mat4} b the second operand
 * @returns {mat4} out
 */ mat4.multiply = function(out, a, b) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3], a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7], a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11], a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];
    // Cache only the current line of the second matrix
    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
    out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
    b0 = b[4];
    b1 = b[5];
    b2 = b[6];
    b3 = b[7];
    out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
    b0 = b[8];
    b1 = b[9];
    b2 = b[10];
    b3 = b[11];
    out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
    b0 = b[12];
    b1 = b[13];
    b2 = b[14];
    b3 = b[15];
    out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
    return out;
};
/**
 * Multiplies two affine mat4's
 * Add by https://github.com/pissang
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the first operand
 * @param {mat4} b the second operand
 * @returns {mat4} out
 */ mat4.multiplyAffine = function(out, a, b) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a10 = a[4], a11 = a[5], a12 = a[6], a20 = a[8], a21 = a[9], a22 = a[10], a30 = a[12], a31 = a[13], a32 = a[14];
    // Cache only the current line of the second matrix
    var b0 = b[0], b1 = b[1], b2 = b[2];
    out[0] = b0 * a00 + b1 * a10 + b2 * a20;
    out[1] = b0 * a01 + b1 * a11 + b2 * a21;
    out[2] = b0 * a02 + b1 * a12 + b2 * a22;
    // out[3] = 0;
    b0 = b[4];
    b1 = b[5];
    b2 = b[6];
    out[4] = b0 * a00 + b1 * a10 + b2 * a20;
    out[5] = b0 * a01 + b1 * a11 + b2 * a21;
    out[6] = b0 * a02 + b1 * a12 + b2 * a22;
    // out[7] = 0;
    b0 = b[8];
    b1 = b[9];
    b2 = b[10];
    out[8] = b0 * a00 + b1 * a10 + b2 * a20;
    out[9] = b0 * a01 + b1 * a11 + b2 * a21;
    out[10] = b0 * a02 + b1 * a12 + b2 * a22;
    // out[11] = 0;
    b0 = b[12];
    b1 = b[13];
    b2 = b[14];
    out[12] = b0 * a00 + b1 * a10 + b2 * a20 + a30;
    out[13] = b0 * a01 + b1 * a11 + b2 * a21 + a31;
    out[14] = b0 * a02 + b1 * a12 + b2 * a22 + a32;
    // out[15] = 1;
    return out;
};
/**
 * Alias for {@link mat4.multiply}
 * @function
 */ mat4.mul = mat4.multiply;
/**
 * Alias for {@link mat4.multiplyAffine}
 * @function
 */ mat4.mulAffine = mat4.multiplyAffine;
/**
 * Translate a mat4 by the given vector
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to translate
 * @param {vec3} v vector to translate by
 * @returns {mat4} out
 */ mat4.translate = function(out, a, v) {
    var x = v[0], y = v[1], z = v[2], a00, a01, a02, a03, a10, a11, a12, a13, a20, a21, a22, a23;
    if (a === out) {
        out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
        out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
        out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
        out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
    } else {
        a00 = a[0];
        a01 = a[1];
        a02 = a[2];
        a03 = a[3];
        a10 = a[4];
        a11 = a[5];
        a12 = a[6];
        a13 = a[7];
        a20 = a[8];
        a21 = a[9];
        a22 = a[10];
        a23 = a[11];
        out[0] = a00;
        out[1] = a01;
        out[2] = a02;
        out[3] = a03;
        out[4] = a10;
        out[5] = a11;
        out[6] = a12;
        out[7] = a13;
        out[8] = a20;
        out[9] = a21;
        out[10] = a22;
        out[11] = a23;
        out[12] = a00 * x + a10 * y + a20 * z + a[12];
        out[13] = a01 * x + a11 * y + a21 * z + a[13];
        out[14] = a02 * x + a12 * y + a22 * z + a[14];
        out[15] = a03 * x + a13 * y + a23 * z + a[15];
    }
    return out;
};
/**
 * Scales the mat4 by the dimensions in the given vec3
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to scale
 * @param {vec3} v the vec3 to scale the matrix by
 * @returns {mat4} out
 **/ mat4.scale = function(out, a, v) {
    var x = v[0], y = v[1], z = v[2];
    out[0] = a[0] * x;
    out[1] = a[1] * x;
    out[2] = a[2] * x;
    out[3] = a[3] * x;
    out[4] = a[4] * y;
    out[5] = a[5] * y;
    out[6] = a[6] * y;
    out[7] = a[7] * y;
    out[8] = a[8] * z;
    out[9] = a[9] * z;
    out[10] = a[10] * z;
    out[11] = a[11] * z;
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
};
/**
 * Rotates a mat4 by the given angle
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @param {vec3} axis the axis to rotate around
 * @returns {mat4} out
 */ mat4.rotate = function(out, a, rad, axis) {
    var x = axis[0], y = axis[1], z = axis[2], len = Math.sqrt(x * x + y * y + z * z), s, c, t, a00, a01, a02, a03, a10, a11, a12, a13, a20, a21, a22, a23, b00, b01, b02, b10, b11, b12, b20, b21, b22;
    if (Math.abs(len) < __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$common$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GLMAT_EPSILON"]) {
        return null;
    }
    len = 1 / len;
    x *= len;
    y *= len;
    z *= len;
    s = Math.sin(rad);
    c = Math.cos(rad);
    t = 1 - c;
    a00 = a[0];
    a01 = a[1];
    a02 = a[2];
    a03 = a[3];
    a10 = a[4];
    a11 = a[5];
    a12 = a[6];
    a13 = a[7];
    a20 = a[8];
    a21 = a[9];
    a22 = a[10];
    a23 = a[11];
    // Construct the elements of the rotation matrix
    b00 = x * x * t + c;
    b01 = y * x * t + z * s;
    b02 = z * x * t - y * s;
    b10 = x * y * t - z * s;
    b11 = y * y * t + c;
    b12 = z * y * t + x * s;
    b20 = x * z * t + y * s;
    b21 = y * z * t - x * s;
    b22 = z * z * t + c;
    // Perform rotation-specific matrix multiplication
    out[0] = a00 * b00 + a10 * b01 + a20 * b02;
    out[1] = a01 * b00 + a11 * b01 + a21 * b02;
    out[2] = a02 * b00 + a12 * b01 + a22 * b02;
    out[3] = a03 * b00 + a13 * b01 + a23 * b02;
    out[4] = a00 * b10 + a10 * b11 + a20 * b12;
    out[5] = a01 * b10 + a11 * b11 + a21 * b12;
    out[6] = a02 * b10 + a12 * b11 + a22 * b12;
    out[7] = a03 * b10 + a13 * b11 + a23 * b12;
    out[8] = a00 * b20 + a10 * b21 + a20 * b22;
    out[9] = a01 * b20 + a11 * b21 + a21 * b22;
    out[10] = a02 * b20 + a12 * b21 + a22 * b22;
    out[11] = a03 * b20 + a13 * b21 + a23 * b22;
    if (a !== out) {
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }
    return out;
};
/**
 * Rotates a matrix by the given angle around the X axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */ mat4.rotateX = function(out, a, rad) {
    var s = Math.sin(rad), c = Math.cos(rad), a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7], a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
    if (a !== out) {
        out[0] = a[0];
        out[1] = a[1];
        out[2] = a[2];
        out[3] = a[3];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }
    // Perform axis-specific matrix multiplication
    out[4] = a10 * c + a20 * s;
    out[5] = a11 * c + a21 * s;
    out[6] = a12 * c + a22 * s;
    out[7] = a13 * c + a23 * s;
    out[8] = a20 * c - a10 * s;
    out[9] = a21 * c - a11 * s;
    out[10] = a22 * c - a12 * s;
    out[11] = a23 * c - a13 * s;
    return out;
};
/**
 * Rotates a matrix by the given angle around the Y axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */ mat4.rotateY = function(out, a, rad) {
    var s = Math.sin(rad), c = Math.cos(rad), a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3], a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
    if (a !== out) {
        out[4] = a[4];
        out[5] = a[5];
        out[6] = a[6];
        out[7] = a[7];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }
    // Perform axis-specific matrix multiplication
    out[0] = a00 * c - a20 * s;
    out[1] = a01 * c - a21 * s;
    out[2] = a02 * c - a22 * s;
    out[3] = a03 * c - a23 * s;
    out[8] = a00 * s + a20 * c;
    out[9] = a01 * s + a21 * c;
    out[10] = a02 * s + a22 * c;
    out[11] = a03 * s + a23 * c;
    return out;
};
/**
 * Rotates a matrix by the given angle around the Z axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */ mat4.rotateZ = function(out, a, rad) {
    var s = Math.sin(rad), c = Math.cos(rad), a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3], a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
    if (a !== out) {
        out[8] = a[8];
        out[9] = a[9];
        out[10] = a[10];
        out[11] = a[11];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }
    // Perform axis-specific matrix multiplication
    out[0] = a00 * c + a10 * s;
    out[1] = a01 * c + a11 * s;
    out[2] = a02 * c + a12 * s;
    out[3] = a03 * c + a13 * s;
    out[4] = a10 * c - a00 * s;
    out[5] = a11 * c - a01 * s;
    out[6] = a12 * c - a02 * s;
    out[7] = a13 * c - a03 * s;
    return out;
};
/**
 * Creates a matrix from a quaternion rotation and vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     var quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {vec3} v Translation vector
 * @returns {mat4} out
 */ mat4.fromRotationTranslation = function(out, q, v) {
    // Quaternion math
    var x = q[0], y = q[1], z = q[2], w = q[3], x2 = x + x, y2 = y + y, z2 = z + z, xx = x * x2, xy = x * y2, xz = x * z2, yy = y * y2, yz = y * z2, zz = z * z2, wx = w * x2, wy = w * y2, wz = w * z2;
    out[0] = 1 - (yy + zz);
    out[1] = xy + wz;
    out[2] = xz - wy;
    out[3] = 0;
    out[4] = xy - wz;
    out[5] = 1 - (xx + zz);
    out[6] = yz + wx;
    out[7] = 0;
    out[8] = xz + wy;
    out[9] = yz - wx;
    out[10] = 1 - (xx + yy);
    out[11] = 0;
    out[12] = v[0];
    out[13] = v[1];
    out[14] = v[2];
    out[15] = 1;
    return out;
};
mat4.fromQuat = function(out, q) {
    var x = q[0], y = q[1], z = q[2], w = q[3], x2 = x + x, y2 = y + y, z2 = z + z, xx = x * x2, yx = y * x2, yy = y * y2, zx = z * x2, zy = z * y2, zz = z * z2, wx = w * x2, wy = w * y2, wz = w * z2;
    out[0] = 1 - yy - zz;
    out[1] = yx + wz;
    out[2] = zx - wy;
    out[3] = 0;
    out[4] = yx - wz;
    out[5] = 1 - xx - zz;
    out[6] = zy + wx;
    out[7] = 0;
    out[8] = zx + wy;
    out[9] = zy - wx;
    out[10] = 1 - xx - yy;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
};
/**
 * Generates a frustum matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {Number} left Left bound of the frustum
 * @param {Number} right Right bound of the frustum
 * @param {Number} bottom Bottom bound of the frustum
 * @param {Number} top Top bound of the frustum
 * @param {Number} near Near bound of the frustum
 * @param {Number} far Far bound of the frustum
 * @returns {mat4} out
 */ mat4.frustum = function(out, left, right, bottom, top, near, far) {
    var rl = 1 / (right - left), tb = 1 / (top - bottom), nf = 1 / (near - far);
    out[0] = near * 2 * rl;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = near * 2 * tb;
    out[6] = 0;
    out[7] = 0;
    out[8] = (right + left) * rl;
    out[9] = (top + bottom) * tb;
    out[10] = (far + near) * nf;
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[14] = far * near * 2 * nf;
    out[15] = 0;
    return out;
};
/**
 * Generates a perspective projection matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} fovy Vertical field of view in radians
 * @param {number} aspect Aspect ratio. typically viewport width/height
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */ mat4.perspective = function(out, fovy, aspect, near, far) {
    var f = 1.0 / Math.tan(fovy / 2), nf = 1 / (near - far);
    out[0] = f / aspect;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = f;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = (far + near) * nf;
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[14] = 2 * far * near * nf;
    out[15] = 0;
    return out;
};
/**
 * Generates a orthogonal projection matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} left Left bound of the frustum
 * @param {number} right Right bound of the frustum
 * @param {number} bottom Bottom bound of the frustum
 * @param {number} top Top bound of the frustum
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */ mat4.ortho = function(out, left, right, bottom, top, near, far) {
    var lr = 1 / (left - right), bt = 1 / (bottom - top), nf = 1 / (near - far);
    out[0] = -2 * lr;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = -2 * bt;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 2 * nf;
    out[11] = 0;
    out[12] = (left + right) * lr;
    out[13] = (top + bottom) * bt;
    out[14] = (far + near) * nf;
    out[15] = 1;
    return out;
};
/**
 * Generates a look-at matrix with the given eye position, focal point, and up axis
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {vec3} eye Position of the viewer
 * @param {vec3} center Point the viewer is looking at
 * @param {vec3} up vec3 pointing up
 * @returns {mat4} out
 */ mat4.lookAt = function(out, eye, center, up) {
    var x0, x1, x2, y0, y1, y2, z0, z1, z2, len, eyex = eye[0], eyey = eye[1], eyez = eye[2], upx = up[0], upy = up[1], upz = up[2], centerx = center[0], centery = center[1], centerz = center[2];
    if (Math.abs(eyex - centerx) < __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$common$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GLMAT_EPSILON"] && Math.abs(eyey - centery) < __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$common$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GLMAT_EPSILON"] && Math.abs(eyez - centerz) < __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$common$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GLMAT_EPSILON"]) {
        return mat4.identity(out);
    }
    z0 = eyex - centerx;
    z1 = eyey - centery;
    z2 = eyez - centerz;
    len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);
    z0 *= len;
    z1 *= len;
    z2 *= len;
    x0 = upy * z2 - upz * z1;
    x1 = upz * z0 - upx * z2;
    x2 = upx * z1 - upy * z0;
    len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);
    if (!len) {
        x0 = 0;
        x1 = 0;
        x2 = 0;
    } else {
        len = 1 / len;
        x0 *= len;
        x1 *= len;
        x2 *= len;
    }
    y0 = z1 * x2 - z2 * x1;
    y1 = z2 * x0 - z0 * x2;
    y2 = z0 * x1 - z1 * x0;
    len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);
    if (!len) {
        y0 = 0;
        y1 = 0;
        y2 = 0;
    } else {
        len = 1 / len;
        y0 *= len;
        y1 *= len;
        y2 *= len;
    }
    out[0] = x0;
    out[1] = y0;
    out[2] = z0;
    out[3] = 0;
    out[4] = x1;
    out[5] = y1;
    out[6] = z1;
    out[7] = 0;
    out[8] = x2;
    out[9] = y2;
    out[10] = z2;
    out[11] = 0;
    out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
    out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
    out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
    out[15] = 1;
    return out;
};
/**
 * Returns Frobenius norm of a mat4
 *
 * @param {mat4} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */ mat4.frob = function(a) {
    return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2));
};
const __TURBOPACK__default__export__ = mat4;
}}),
"[project]/node_modules/claygl/src/glmatrix/vec3.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
  * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */ __turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$common$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/glmatrix/common.js [app-client] (ecmascript)");
;
/**
 * @class 3 Dimensional Vector
 * @name vec3
 */ var vec3 = {};
/**
 * Creates a new, empty vec3
 *
 * @returns {vec3} a new 3D vector
 */ vec3.create = function() {
    var out = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$common$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GLMAT_ARRAY_TYPE"](3);
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    return out;
};
/**
 * Creates a new vec3 initialized with values from an existing vector
 *
 * @param {vec3} a vector to clone
 * @returns {vec3} a new 3D vector
 */ vec3.clone = function(a) {
    var out = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$common$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GLMAT_ARRAY_TYPE"](3);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    return out;
};
/**
 * Creates a new vec3 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @returns {vec3} a new 3D vector
 */ vec3.fromValues = function(x, y, z) {
    var out = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$common$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GLMAT_ARRAY_TYPE"](3);
    out[0] = x;
    out[1] = y;
    out[2] = z;
    return out;
};
/**
 * Copy the values from one vec3 to another
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the source vector
 * @returns {vec3} out
 */ vec3.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    return out;
};
/**
 * Set the components of a vec3 to the given values
 *
 * @param {vec3} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @returns {vec3} out
 */ vec3.set = function(out, x, y, z) {
    out[0] = x;
    out[1] = y;
    out[2] = z;
    return out;
};
/**
 * Adds two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */ vec3.add = function(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
    return out;
};
/**
 * Subtracts vector b from vector a
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */ vec3.subtract = function(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    out[2] = a[2] - b[2];
    return out;
};
/**
 * Alias for {@link vec3.subtract}
 * @function
 */ vec3.sub = vec3.subtract;
/**
 * Multiplies two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */ vec3.multiply = function(out, a, b) {
    out[0] = a[0] * b[0];
    out[1] = a[1] * b[1];
    out[2] = a[2] * b[2];
    return out;
};
/**
 * Alias for {@link vec3.multiply}
 * @function
 */ vec3.mul = vec3.multiply;
/**
 * Divides two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */ vec3.divide = function(out, a, b) {
    out[0] = a[0] / b[0];
    out[1] = a[1] / b[1];
    out[2] = a[2] / b[2];
    return out;
};
/**
 * Alias for {@link vec3.divide}
 * @function
 */ vec3.div = vec3.divide;
/**
 * Returns the minimum of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */ vec3.min = function(out, a, b) {
    out[0] = Math.min(a[0], b[0]);
    out[1] = Math.min(a[1], b[1]);
    out[2] = Math.min(a[2], b[2]);
    return out;
};
/**
 * Returns the maximum of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */ vec3.max = function(out, a, b) {
    out[0] = Math.max(a[0], b[0]);
    out[1] = Math.max(a[1], b[1]);
    out[2] = Math.max(a[2], b[2]);
    return out;
};
/**
 * Scales a vec3 by a scalar number
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec3} out
 */ vec3.scale = function(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    out[2] = a[2] * b;
    return out;
};
/**
 * Adds two vec3's after scaling the second operand by a scalar value
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec3} out
 */ vec3.scaleAndAdd = function(out, a, b, scale) {
    out[0] = a[0] + b[0] * scale;
    out[1] = a[1] + b[1] * scale;
    out[2] = a[2] + b[2] * scale;
    return out;
};
/**
 * Calculates the euclidian distance between two vec3's
 *
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {Number} distance between a and b
 */ vec3.distance = function(a, b) {
    var x = b[0] - a[0], y = b[1] - a[1], z = b[2] - a[2];
    return Math.sqrt(x * x + y * y + z * z);
};
/**
 * Alias for {@link vec3.distance}
 * @function
 */ vec3.dist = vec3.distance;
/**
 * Calculates the squared euclidian distance between two vec3's
 *
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {Number} squared distance between a and b
 */ vec3.squaredDistance = function(a, b) {
    var x = b[0] - a[0], y = b[1] - a[1], z = b[2] - a[2];
    return x * x + y * y + z * z;
};
/**
 * Alias for {@link vec3.squaredDistance}
 * @function
 */ vec3.sqrDist = vec3.squaredDistance;
/**
 * Calculates the length of a vec3
 *
 * @param {vec3} a vector to calculate length of
 * @returns {Number} length of a
 */ vec3.length = function(a) {
    var x = a[0], y = a[1], z = a[2];
    return Math.sqrt(x * x + y * y + z * z);
};
/**
 * Alias for {@link vec3.length}
 * @function
 */ vec3.len = vec3.length;
/**
 * Calculates the squared length of a vec3
 *
 * @param {vec3} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */ vec3.squaredLength = function(a) {
    var x = a[0], y = a[1], z = a[2];
    return x * x + y * y + z * z;
};
/**
 * Alias for {@link vec3.squaredLength}
 * @function
 */ vec3.sqrLen = vec3.squaredLength;
/**
 * Negates the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to negate
 * @returns {vec3} out
 */ vec3.negate = function(out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    out[2] = -a[2];
    return out;
};
/**
 * Returns the inverse of the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to invert
 * @returns {vec3} out
 */ vec3.inverse = function(out, a) {
    out[0] = 1.0 / a[0];
    out[1] = 1.0 / a[1];
    out[2] = 1.0 / a[2];
    return out;
};
/**
 * Normalize a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to normalize
 * @returns {vec3} out
 */ vec3.normalize = function(out, a) {
    var x = a[0], y = a[1], z = a[2];
    var len = x * x + y * y + z * z;
    if (len > 0) {
        //TODO: evaluate use of glm_invsqrt here?
        len = 1 / Math.sqrt(len);
        out[0] = a[0] * len;
        out[1] = a[1] * len;
        out[2] = a[2] * len;
    }
    return out;
};
/**
 * Calculates the dot product of two vec3's
 *
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {Number} dot product of a and b
 */ vec3.dot = function(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
};
/**
 * Computes the cross product of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */ vec3.cross = function(out, a, b) {
    var ax = a[0], ay = a[1], az = a[2], bx = b[0], by = b[1], bz = b[2];
    out[0] = ay * bz - az * by;
    out[1] = az * bx - ax * bz;
    out[2] = ax * by - ay * bx;
    return out;
};
/**
 * Performs a linear interpolation between two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {vec3} out
 */ vec3.lerp = function(out, a, b, t) {
    var ax = a[0], ay = a[1], az = a[2];
    out[0] = ax + t * (b[0] - ax);
    out[1] = ay + t * (b[1] - ay);
    out[2] = az + t * (b[2] - az);
    return out;
};
/**
 * Generates a random vector with the given scale
 *
 * @param {vec3} out the receiving vector
 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
 * @returns {vec3} out
 */ vec3.random = function(out, scale) {
    scale = scale || 1.0;
    var r = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$common$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GLMAT_RANDOM"])() * 2.0 * Math.PI;
    var z = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$common$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GLMAT_RANDOM"])() * 2.0 - 1.0;
    var zScale = Math.sqrt(1.0 - z * z) * scale;
    out[0] = Math.cos(r) * zScale;
    out[1] = Math.sin(r) * zScale;
    out[2] = z * scale;
    return out;
};
/**
 * Transforms the vec3 with a mat4.
 * 4th vector component is implicitly '1'
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the vector to transform
 * @param {mat4} m matrix to transform with
 * @returns {vec3} out
 */ vec3.transformMat4 = function(out, a, m) {
    var x = a[0], y = a[1], z = a[2], w = m[3] * x + m[7] * y + m[11] * z + m[15];
    w = w || 1.0;
    out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;
    out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;
    out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;
    return out;
};
/**
 * Transforms the vec3 with a mat3.
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the vector to transform
 * @param {mat4} m the 3x3 matrix to transform with
 * @returns {vec3} out
 */ vec3.transformMat3 = function(out, a, m) {
    var x = a[0], y = a[1], z = a[2];
    out[0] = x * m[0] + y * m[3] + z * m[6];
    out[1] = x * m[1] + y * m[4] + z * m[7];
    out[2] = x * m[2] + y * m[5] + z * m[8];
    return out;
};
/**
 * Transforms the vec3 with a quat
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the vector to transform
 * @param {quat} q quaternion to transform with
 * @returns {vec3} out
 */ vec3.transformQuat = function(out, a, q) {
    // benchmarks: http://jsperf.com/quaternion-transform-vec3-implementations
    var x = a[0], y = a[1], z = a[2], qx = q[0], qy = q[1], qz = q[2], qw = q[3], // calculate quat * vec
    ix = qw * x + qy * z - qz * y, iy = qw * y + qz * x - qx * z, iz = qw * z + qx * y - qy * x, iw = -qx * x - qy * y - qz * z;
    // calculate result * inverse quat
    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
    return out;
};
/**
 * Rotate a 3D vector around the x-axis
 * @param {vec3} out The receiving vec3
 * @param {vec3} a The vec3 point to rotate
 * @param {vec3} b The origin of the rotation
 * @param {Number} c The angle of rotation
 * @returns {vec3} out
 */ vec3.rotateX = function(out, a, b, c) {
    var p = [], r = [];
    //Translate point to the origin
    p[0] = a[0] - b[0];
    p[1] = a[1] - b[1];
    p[2] = a[2] - b[2];
    //perform rotation
    r[0] = p[0];
    r[1] = p[1] * Math.cos(c) - p[2] * Math.sin(c);
    r[2] = p[1] * Math.sin(c) + p[2] * Math.cos(c);
    //translate to correct position
    out[0] = r[0] + b[0];
    out[1] = r[1] + b[1];
    out[2] = r[2] + b[2];
    return out;
};
/**
 * Rotate a 3D vector around the y-axis
 * @param {vec3} out The receiving vec3
 * @param {vec3} a The vec3 point to rotate
 * @param {vec3} b The origin of the rotation
 * @param {Number} c The angle of rotation
 * @returns {vec3} out
 */ vec3.rotateY = function(out, a, b, c) {
    var p = [], r = [];
    //Translate point to the origin
    p[0] = a[0] - b[0];
    p[1] = a[1] - b[1];
    p[2] = a[2] - b[2];
    //perform rotation
    r[0] = p[2] * Math.sin(c) + p[0] * Math.cos(c);
    r[1] = p[1];
    r[2] = p[2] * Math.cos(c) - p[0] * Math.sin(c);
    //translate to correct position
    out[0] = r[0] + b[0];
    out[1] = r[1] + b[1];
    out[2] = r[2] + b[2];
    return out;
};
/**
 * Rotate a 3D vector around the z-axis
 * @param {vec3} out The receiving vec3
 * @param {vec3} a The vec3 point to rotate
 * @param {vec3} b The origin of the rotation
 * @param {Number} c The angle of rotation
 * @returns {vec3} out
 */ vec3.rotateZ = function(out, a, b, c) {
    var p = [], r = [];
    //Translate point to the origin
    p[0] = a[0] - b[0];
    p[1] = a[1] - b[1];
    p[2] = a[2] - b[2];
    //perform rotation
    r[0] = p[0] * Math.cos(c) - p[1] * Math.sin(c);
    r[1] = p[0] * Math.sin(c) + p[1] * Math.cos(c);
    r[2] = p[2];
    //translate to correct position
    out[0] = r[0] + b[0];
    out[1] = r[1] + b[1];
    out[2] = r[2] + b[2];
    return out;
};
/**
 * Perform some operation over an array of vec3s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */ vec3.forEach = function() {
    var vec = vec3.create();
    return function(a, stride, offset, count, fn, arg) {
        var i, l;
        if (!stride) {
            stride = 3;
        }
        if (!offset) {
            offset = 0;
        }
        if (count) {
            l = Math.min(count * stride + offset, a.length);
        } else {
            l = a.length;
        }
        for(i = offset; i < l; i += stride){
            vec[0] = a[i];
            vec[1] = a[i + 1];
            vec[2] = a[i + 2];
            fn(vec, vec, arg);
            a[i] = vec[0];
            a[i + 1] = vec[1];
            a[i + 2] = vec[2];
        }
        return a;
    };
}();
/**
 * Get the angle between two 3D vectors
 * @param {vec3} a The first operand
 * @param {vec3} b The second operand
 * @returns {Number} The angle in radians
 */ vec3.angle = function(a, b) {
    var tempA = vec3.fromValues(a[0], a[1], a[2]);
    var tempB = vec3.fromValues(b[0], b[1], b[2]);
    vec3.normalize(tempA, tempA);
    vec3.normalize(tempB, tempB);
    var cosine = vec3.dot(tempA, tempB);
    if (cosine > 1.0) {
        return 0;
    } else {
        return Math.acos(cosine);
    }
};
const __TURBOPACK__default__export__ = vec3;
}}),
"[project]/node_modules/claygl/src/Renderer.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// TODO Resources like shader, texture, geometry reference management
// Trace and find out which shader, texture, geometry can be destroyed
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$Base$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/core/Base.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$GLInfo$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/core/GLInfo.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/core/glenum.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$vendor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/core/vendor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Material$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/Material.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/math/Vector2.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$gpu$2f$ProgramManager$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/gpu/ProgramManager.js [app-client] (ecmascript)");
// Light header
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Shader$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/Shader.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$shader$2f$source$2f$prez$2e$glsl$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/shader/source/prez.glsl.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/glmatrix/mat4.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/glmatrix/vec3.js [app-client] (ecmascript)");
;
;
;
;
;
;
;
;
;
__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Shader$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]['import'](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$shader$2f$source$2f$prez$2e$glsl$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]);
;
;
var mat4Create = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].create;
var errorShader = {};
function defaultGetMaterial(renderable) {
    return renderable.material;
}
function defaultGetUniform(renderable, material, symbol) {
    return material.uniforms[symbol].value;
}
function defaultIsMaterialChanged(renderabled, prevRenderable, material, prevMaterial) {
    return material !== prevMaterial;
}
function defaultIfRender(renderable) {
    return true;
}
function noop() {}
var attributeBufferTypeMap = {
    float: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].FLOAT,
    byte: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].BYTE,
    ubyte: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].UNSIGNED_BYTE,
    short: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].SHORT,
    ushort: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].UNSIGNED_SHORT
};
function VertexArrayObject(availableAttributes, availableAttributeSymbols, indicesBuffer) {
    this.availableAttributes = availableAttributes;
    this.availableAttributeSymbols = availableAttributeSymbols;
    this.indicesBuffer = indicesBuffer;
    this.vao = null;
}
function PlaceHolderTexture(renderer) {
    var blankCanvas;
    var webglTexture;
    this.bind = function(renderer) {
        if (!blankCanvas) {
            // TODO Environment not support createCanvas.
            blankCanvas = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$vendor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].createCanvas();
            blankCanvas.width = blankCanvas.height = 1;
            blankCanvas.getContext('2d');
        }
        var gl = renderer.gl;
        var firstBind = !webglTexture;
        if (firstBind) {
            webglTexture = gl.createTexture();
        }
        gl.bindTexture(gl.TEXTURE_2D, webglTexture);
        if (firstBind) {
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, blankCanvas);
        }
    };
    this.unbind = function(renderer) {
        renderer.gl.bindTexture(renderer.gl.TEXTURE_2D, null);
    };
    this.isRenderable = function() {
        return true;
    };
}
/**
 * @constructor clay.Renderer
 * @extends clay.core.Base
 */ var Renderer = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$Base$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].extend(function() {
    return /** @lends clay.Renderer# */ {
        /**
         * @type {HTMLCanvasElement}
         * @readonly
         */ canvas: null,
        /**
         * Canvas width, set by resize method
         * @type {number}
         * @private
         */ _width: 100,
        /**
         * Canvas width, set by resize method
         * @type {number}
         * @private
         */ _height: 100,
        /**
         * Device pixel ratio, set by setDevicePixelRatio method
         * Specially for high defination display
         * @see http://www.khronos.org/webgl/wiki/HandlingHighDPI
         * @type {number}
         * @private
         */ devicePixelRatio: typeof window !== 'undefined' && window.devicePixelRatio || 1.0,
        /**
         * Clear color
         * @type {number[]}
         */ clearColor: [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        /**
         * Default:
         *     _gl.COLOR_BUFFER_BIT | _gl.DEPTH_BUFFER_BIT | _gl.STENCIL_BUFFER_BIT
         * @type {number}
         */ clearBit: 17664,
        // Settings when getting context
        // http://www.khronos.org/registry/webgl/specs/latest/#2.4
        /**
         * If enable alpha, default true
         * @type {boolean}
         */ alpha: true,
        /**
         * If enable depth buffer, default true
         * @type {boolean}
         */ depth: true,
        /**
         * If enable stencil buffer, default false
         * @type {boolean}
         */ stencil: false,
        /**
         * If enable antialias, default true
         * @type {boolean}
         */ antialias: true,
        /**
         * If enable premultiplied alpha, default true
         * @type {boolean}
         */ premultipliedAlpha: true,
        /**
         * If preserve drawing buffer, default false
         * @type {boolean}
         */ preserveDrawingBuffer: false,
        /**
         * If throw context error, usually turned on in debug mode
         * @type {boolean}
         */ throwError: true,
        /**
         * WebGL Context created from given canvas
         * @type {WebGLRenderingContext}
         */ gl: null,
        /**
         * Renderer viewport, read-only, can be set by setViewport method
         * @type {Object}
         */ viewport: {},
        /**
         * Max joint number
         * @type {number}
         */ maxJointNumber: 20,
        // Set by FrameBuffer#bind
        __currentFrameBuffer: null,
        _viewportStack: [],
        _clearStack: [],
        _sceneRendering: null
    };
}, function() {
    if (!this.canvas) {
        this.canvas = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$vendor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].createCanvas();
    }
    var canvas = this.canvas;
    try {
        var opts = {
            alpha: this.alpha,
            depth: this.depth,
            stencil: this.stencil,
            antialias: this.antialias,
            premultipliedAlpha: this.premultipliedAlpha,
            preserveDrawingBuffer: this.preserveDrawingBuffer
        };
        this.gl = canvas.getContext('webgl', opts) || canvas.getContext('experimental-webgl', opts);
        if (!this.gl) {
            throw new Error();
        }
        this._glinfo = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$GLInfo$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](this.gl);
        if (this.gl.targetRenderer) {
            console.error('Already created a renderer');
        }
        this.gl.targetRenderer = this;
        this.resize();
    } catch (e) {
        throw 'Error creating WebGL Context ' + e;
    }
    // Init managers
    this._programMgr = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$gpu$2f$ProgramManager$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](this);
    this._placeholderTexture = new PlaceHolderTexture(this);
}, /** @lends clay.Renderer.prototype. **/ {
    /**
     * Resize the canvas
     * @param {number} width
     * @param {number} height
     */ resize: function(width, height) {
        var canvas = this.canvas;
        // http://www.khronos.org/webgl/wiki/HandlingHighDPI
        // set the display size of the canvas.
        var dpr = this.devicePixelRatio;
        if (width != null) {
            if (canvas.style) {
                canvas.style.width = width + 'px';
                canvas.style.height = height + 'px';
            }
            // set the size of the drawingBuffer
            canvas.width = width * dpr;
            canvas.height = height * dpr;
            this._width = width;
            this._height = height;
        } else {
            this._width = canvas.width / dpr;
            this._height = canvas.height / dpr;
        }
        this.setViewport(0, 0, this._width, this._height);
    },
    /**
     * Get renderer width
     * @return {number}
     */ getWidth: function() {
        return this._width;
    },
    /**
     * Get renderer height
     * @return {number}
     */ getHeight: function() {
        return this._height;
    },
    /**
     * Get viewport aspect,
     * @return {number}
     */ getViewportAspect: function() {
        var viewport = this.viewport;
        return viewport.width / viewport.height;
    },
    /**
     * Set devicePixelRatio
     * @param {number} devicePixelRatio
     */ setDevicePixelRatio: function(devicePixelRatio) {
        this.devicePixelRatio = devicePixelRatio;
        this.resize(this._width, this._height);
    },
    /**
     * Get devicePixelRatio
     * @param {number} devicePixelRatio
     */ getDevicePixelRatio: function() {
        return this.devicePixelRatio;
    },
    /**
     * Get WebGL extension
     * @param {string} name
     * @return {object}
     */ getGLExtension: function(name) {
        return this._glinfo.getExtension(name);
    },
    /**
     * Get WebGL parameter
     * @param {string} name
     * @return {*}
     */ getGLParameter: function(name) {
        return this._glinfo.getParameter(name);
    },
    /**
     * Set rendering viewport
     * @param {number|Object} x
     * @param {number} [y]
     * @param {number} [width]
     * @param {number} [height]
     * @param {number} [devicePixelRatio]
     *        Defaultly use the renderere devicePixelRatio
     *        It needs to be 1 when setViewport is called by frameBuffer
     *
     * @example
     *  setViewport(0,0,width,height,1)
     *  setViewport({
     *      x: 0,
     *      y: 0,
     *      width: width,
     *      height: height,
     *      devicePixelRatio: 1
     *  })
     */ setViewport: function(x, y, width, height, dpr) {
        if (typeof x === 'object') {
            var obj = x;
            x = obj.x;
            y = obj.y;
            width = obj.width;
            height = obj.height;
            dpr = obj.devicePixelRatio;
        }
        dpr = dpr || this.devicePixelRatio;
        this.gl.viewport(x * dpr, y * dpr, width * dpr, height * dpr);
        // Use a fresh new object, not write property.
        this.viewport = {
            x: x,
            y: y,
            width: width,
            height: height,
            devicePixelRatio: dpr
        };
    },
    /**
     * Push current viewport into a stack
     */ saveViewport: function() {
        this._viewportStack.push(this.viewport);
    },
    /**
     * Pop viewport from stack, restore in the renderer
     */ restoreViewport: function() {
        if (this._viewportStack.length > 0) {
            this.setViewport(this._viewportStack.pop());
        }
    },
    /**
     * Push current clear into a stack
     */ saveClear: function() {
        this._clearStack.push({
            clearBit: this.clearBit,
            clearColor: this.clearColor
        });
    },
    /**
     * Pop clear from stack, restore in the renderer
     */ restoreClear: function() {
        if (this._clearStack.length > 0) {
            var opt = this._clearStack.pop();
            this.clearColor = opt.clearColor;
            this.clearBit = opt.clearBit;
        }
    },
    bindSceneRendering: function(scene) {
        this._sceneRendering = scene;
    },
    /**
     * Render the scene in camera to the screen or binded offline framebuffer
     * @param  {clay.Scene}       scene
     * @param  {clay.Camera}      camera
     * @param  {boolean}     [notUpdateScene] If not call the scene.update methods in the rendering, default true
     * @param  {boolean}     [preZ]           If use preZ optimization, default false
     * @return {IRenderInfo}
     */ render: function(scene, camera, notUpdateScene, preZ) {
        var _gl = this.gl;
        var clearColor = this.clearColor;
        if (this.clearBit) {
            // Must set depth and color mask true before clear
            _gl.colorMask(true, true, true, true);
            _gl.depthMask(true);
            var viewport = this.viewport;
            var needsScissor = false;
            var viewportDpr = viewport.devicePixelRatio;
            if (viewport.width !== this._width || viewport.height !== this._height || viewportDpr && viewportDpr !== this.devicePixelRatio || viewport.x || viewport.y) {
                needsScissor = true;
                // http://stackoverflow.com/questions/11544608/how-to-clear-a-rectangle-area-in-webgl
                // Only clear the viewport
                _gl.enable(_gl.SCISSOR_TEST);
                _gl.scissor(viewport.x * viewportDpr, viewport.y * viewportDpr, viewport.width * viewportDpr, viewport.height * viewportDpr);
            }
            _gl.clearColor(clearColor[0], clearColor[1], clearColor[2], clearColor[3]);
            _gl.clear(this.clearBit);
            if (needsScissor) {
                _gl.disable(_gl.SCISSOR_TEST);
            }
        }
        // If the scene have been updated in the prepass like shadow map
        // There is no need to update it again
        if (!notUpdateScene) {
            scene.update(false);
        }
        scene.updateLights();
        camera = camera || scene.getMainCamera();
        if (!camera) {
            console.error('Can\'t find camera in the scene.');
            return;
        }
        camera.update();
        var renderList = scene.updateRenderList(camera, true);
        this._sceneRendering = scene;
        var opaqueList = renderList.opaque;
        var transparentList = renderList.transparent;
        var sceneMaterial = scene.material;
        scene.trigger('beforerender', this, scene, camera, renderList);
        // Render pre z
        if (preZ) {
            this.renderPreZ(opaqueList, scene, camera);
            _gl.depthFunc(_gl.LEQUAL);
        } else {
            _gl.depthFunc(_gl.LESS);
        }
        // Update the depth of transparent list.
        var worldViewMat = mat4Create();
        var posViewSpace = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].create();
        for(var i = 0; i < transparentList.length; i++){
            var renderable = transparentList[i];
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].multiplyAffine(worldViewMat, camera.viewMatrix.array, renderable.worldTransform.array);
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].transformMat4(posViewSpace, renderable.position.array, worldViewMat);
            renderable.__depth = posViewSpace[2];
        }
        // Render opaque list
        this.renderPass(opaqueList, camera, {
            getMaterial: function(renderable) {
                return sceneMaterial || renderable.material;
            },
            sortCompare: this.opaqueSortCompare
        });
        this.renderPass(transparentList, camera, {
            getMaterial: function(renderable) {
                return sceneMaterial || renderable.material;
            },
            sortCompare: this.transparentSortCompare
        });
        scene.trigger('afterrender', this, scene, camera, renderList);
        // Cleanup
        this._sceneRendering = null;
    },
    getProgram: function(renderable, renderMaterial, scene) {
        renderMaterial = renderMaterial || renderable.material;
        return this._programMgr.getProgram(renderable, renderMaterial, scene);
    },
    validateProgram: function(program) {
        if (program.__error) {
            var errorMsg = program.__error;
            if (errorShader[program.__uid__]) {
                return;
            }
            errorShader[program.__uid__] = true;
            if (this.throwError) {
                throw new Error(errorMsg);
            } else {
                this.trigger('error', errorMsg);
            }
        }
    },
    updatePrograms: function(list, scene, passConfig) {
        var getMaterial = passConfig && passConfig.getMaterial || defaultGetMaterial;
        scene = scene || null;
        for(var i = 0; i < list.length; i++){
            var renderable = list[i];
            var renderMaterial = getMaterial.call(this, renderable);
            if (i > 0) {
                var prevRenderable = list[i - 1];
                var prevJointsLen = prevRenderable.joints ? prevRenderable.joints.length : 0;
                var jointsLen = renderable.joints ? renderable.joints.length : 0;
                // Keep program not change if joints, material, lightGroup are same of two renderables.
                if (jointsLen === prevJointsLen && renderable.material === prevRenderable.material && renderable.lightGroup === prevRenderable.lightGroup) {
                    renderable.__program = prevRenderable.__program;
                    continue;
                }
            }
            var program = this._programMgr.getProgram(renderable, renderMaterial, scene);
            this.validateProgram(program);
            renderable.__program = program;
        }
    },
    /**
     * Render a single renderable list in camera in sequence
     * @param {clay.Renderable[]} list List of all renderables.
     * @param {clay.Camera} [camera] Camera provide view matrix and porjection matrix. It can be null.
     * @param {Object} [passConfig]
     * @param {Function} [passConfig.getMaterial] Get renderable material.
     * @param {Function} [passConfig.getUniform] Get material uniform value.
     * @param {Function} [passConfig.isMaterialChanged] If material changed.
     * @param {Function} [passConfig.beforeRender] Before render each renderable.
     * @param {Function} [passConfig.afterRender] After render each renderable
     * @param {Function} [passConfig.ifRender] If render the renderable.
     * @param {Function} [passConfig.sortCompare] Sort compare function.
     * @return {IRenderInfo}
     */ renderPass: function(list, camera, passConfig) {
        this.trigger('beforerenderpass', this, list, camera, passConfig);
        passConfig = passConfig || {};
        passConfig.getMaterial = passConfig.getMaterial || defaultGetMaterial;
        passConfig.getUniform = passConfig.getUniform || defaultGetUniform;
        // PENDING Better solution?
        passConfig.isMaterialChanged = passConfig.isMaterialChanged || defaultIsMaterialChanged;
        passConfig.beforeRender = passConfig.beforeRender || noop;
        passConfig.afterRender = passConfig.afterRender || noop;
        var ifRenderObject = passConfig.ifRender || defaultIfRender;
        this.updatePrograms(list, this._sceneRendering, passConfig);
        if (passConfig.sortCompare) {
            list.sort(passConfig.sortCompare);
        }
        // Some common builtin uniforms
        var viewport = this.viewport;
        var vDpr = viewport.devicePixelRatio;
        var viewportUniform = [
            viewport.x * vDpr,
            viewport.y * vDpr,
            viewport.width * vDpr,
            viewport.height * vDpr
        ];
        var windowDpr = this.devicePixelRatio;
        var windowSizeUniform = this.__currentFrameBuffer ? [
            this.__currentFrameBuffer.getTextureWidth(),
            this.__currentFrameBuffer.getTextureHeight()
        ] : [
            this._width * windowDpr,
            this._height * windowDpr
        ];
        // DEPRECATED
        var viewportSizeUniform = [
            viewportUniform[2],
            viewportUniform[3]
        ];
        var time = Date.now();
        // Calculate view and projection matrix
        if (camera) {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].copy(matrices.VIEW, camera.viewMatrix.array);
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].copy(matrices.PROJECTION, camera.projectionMatrix.array);
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].copy(matrices.VIEWINVERSE, camera.worldTransform.array);
        } else {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].identity(matrices.VIEW);
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].identity(matrices.PROJECTION);
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].identity(matrices.VIEWINVERSE);
        }
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].multiply(matrices.VIEWPROJECTION, matrices.PROJECTION, matrices.VIEW);
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].invert(matrices.PROJECTIONINVERSE, matrices.PROJECTION);
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].invert(matrices.VIEWPROJECTIONINVERSE, matrices.VIEWPROJECTION);
        var _gl = this.gl;
        var scene = this._sceneRendering;
        var prevMaterial;
        var prevProgram;
        var prevRenderable;
        // Status
        var depthTest, depthMask;
        var culling, cullFace, frontFace;
        var transparent;
        var drawID;
        var currentVAO;
        var materialTakesTextureSlot;
        // var vaoExt = this.getGLExtension('OES_vertex_array_object');
        // not use vaoExt, some platforms may mess it up.
        var vaoExt = null;
        for(var i = 0; i < list.length; i++){
            var renderable = list[i];
            var isSceneNode = renderable.worldTransform != null;
            var worldM;
            if (!ifRenderObject(renderable)) {
                continue;
            }
            // Skinned mesh will transformed to joint space. Ignore the mesh transform
            if (isSceneNode) {
                worldM = renderable.isSkinnedMesh && renderable.isSkinnedMesh() ? renderable.offsetMatrix ? renderable.offsetMatrix.array : matrices.IDENTITY : renderable.worldTransform.array;
            }
            var geometry = renderable.geometry;
            var material = passConfig.getMaterial.call(this, renderable);
            var program = renderable.__program;
            var shader = material.shader;
            var currentDrawID = geometry.__uid__ + '-' + program.__uid__;
            var drawIDChanged = currentDrawID !== drawID;
            drawID = currentDrawID;
            if ("TURBOPACK compile-time falsy", 0) {
                "TURBOPACK unreachable";
            }
            if (isSceneNode) {
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].copy(matrices.WORLD, worldM);
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].multiply(matrices.WORLDVIEWPROJECTION, matrices.VIEWPROJECTION, worldM);
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].multiplyAffine(matrices.WORLDVIEW, matrices.VIEW, worldM);
                if (shader.matrixSemantics.WORLDINVERSE || shader.matrixSemantics.WORLDINVERSETRANSPOSE) {
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].invert(matrices.WORLDINVERSE, worldM);
                }
                if (shader.matrixSemantics.WORLDVIEWINVERSE || shader.matrixSemantics.WORLDVIEWINVERSETRANSPOSE) {
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].invert(matrices.WORLDVIEWINVERSE, matrices.WORLDVIEW);
                }
                if (shader.matrixSemantics.WORLDVIEWPROJECTIONINVERSE || shader.matrixSemantics.WORLDVIEWPROJECTIONINVERSETRANSPOSE) {
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].invert(matrices.WORLDVIEWPROJECTIONINVERSE, matrices.WORLDVIEWPROJECTION);
                }
            }
            // Before render hook
            renderable.beforeRender && renderable.beforeRender(this);
            passConfig.beforeRender.call(this, renderable, material, prevMaterial);
            var programChanged = program !== prevProgram;
            if (programChanged) {
                // Set lights number
                program.bind(this);
                // Set some common uniforms
                program.setUniformOfSemantic(_gl, 'VIEWPORT', viewportUniform);
                program.setUniformOfSemantic(_gl, 'WINDOW_SIZE', windowSizeUniform);
                if (camera) {
                    program.setUniformOfSemantic(_gl, 'NEAR', camera.near);
                    program.setUniformOfSemantic(_gl, 'FAR', camera.far);
                }
                program.setUniformOfSemantic(_gl, 'DEVICEPIXELRATIO', vDpr);
                program.setUniformOfSemantic(_gl, 'TIME', time);
                // DEPRECATED
                program.setUniformOfSemantic(_gl, 'VIEWPORT_SIZE', viewportSizeUniform);
                // Set lights uniforms
                // TODO needs optimized
                if (scene) {
                    scene.setLightUniforms(program, renderable.lightGroup, this);
                }
            } else {
                program = prevProgram;
            }
            // Program changes also needs reset the materials.
            if (programChanged || passConfig.isMaterialChanged(renderable, prevRenderable, material, prevMaterial)) {
                if (material.depthTest !== depthTest) {
                    material.depthTest ? _gl.enable(_gl.DEPTH_TEST) : _gl.disable(_gl.DEPTH_TEST);
                    depthTest = material.depthTest;
                }
                if (material.depthMask !== depthMask) {
                    _gl.depthMask(material.depthMask);
                    depthMask = material.depthMask;
                }
                if (material.transparent !== transparent) {
                    material.transparent ? _gl.enable(_gl.BLEND) : _gl.disable(_gl.BLEND);
                    transparent = material.transparent;
                }
                // TODO cache blending
                if (material.transparent) {
                    if (material.blend) {
                        material.blend(_gl);
                    } else {
                        // Default blend function
                        _gl.blendEquationSeparate(_gl.FUNC_ADD, _gl.FUNC_ADD);
                        _gl.blendFuncSeparate(_gl.SRC_ALPHA, _gl.ONE_MINUS_SRC_ALPHA, _gl.ONE, _gl.ONE_MINUS_SRC_ALPHA);
                    }
                }
                materialTakesTextureSlot = this._bindMaterial(renderable, material, program, prevRenderable || null, prevMaterial || null, prevProgram || null, passConfig.getUniform);
                prevMaterial = material;
            }
            var matrixSemanticKeys = shader.matrixSemanticKeys;
            if (isSceneNode) {
                for(var k = 0; k < matrixSemanticKeys.length; k++){
                    var semantic = matrixSemanticKeys[k];
                    var semanticInfo = shader.matrixSemantics[semantic];
                    var matrix = matrices[semantic];
                    if (semanticInfo.isTranspose) {
                        var matrixNoTranspose = matrices[semanticInfo.semanticNoTranspose];
                        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].transpose(matrix, matrixNoTranspose);
                    }
                    program.setUniform(_gl, semanticInfo.type, semanticInfo.symbol, matrix);
                }
            }
            if (renderable.cullFace !== cullFace) {
                cullFace = renderable.cullFace;
                _gl.cullFace(cullFace);
            }
            if (renderable.frontFace !== frontFace) {
                frontFace = renderable.frontFace;
                _gl.frontFace(frontFace);
            }
            if (renderable.culling !== culling) {
                culling = renderable.culling;
                culling ? _gl.enable(_gl.CULL_FACE) : _gl.disable(_gl.CULL_FACE);
            }
            // TODO Not update skeleton in each renderable.
            this._updateSkeleton(renderable, program, materialTakesTextureSlot);
            if (drawIDChanged) {
                currentVAO = this._bindVAO(vaoExt, shader, geometry, program);
            }
            this._renderObject(renderable, currentVAO, program);
            // After render hook
            passConfig.afterRender(this, renderable);
            renderable.afterRender && renderable.afterRender(this);
            prevProgram = program;
            prevRenderable = renderable;
        }
        // TODO Seems need to be bound to null immediately if vao is changed?
        if ("TURBOPACK compile-time falsy", 0) {
            "TURBOPACK unreachable";
        }
        this.trigger('afterrenderpass', this, list, camera, passConfig);
    },
    getMaxJointNumber: function() {
        return this.maxJointNumber;
    },
    _updateSkeleton: function(object, program, slot) {
        var _gl = this.gl;
        var skeleton = object.skeleton;
        // Set pose matrices of skinned mesh
        if (skeleton) {
            // TODO Update before culling.
            skeleton.update();
            if (object.joints.length > this.getMaxJointNumber()) {
                var skinMatricesTexture = skeleton.getSubSkinMatricesTexture(object.__uid__, object.joints);
                program.useTextureSlot(this, skinMatricesTexture, slot);
                program.setUniform(_gl, '1i', 'skinMatricesTexture', slot);
                program.setUniform(_gl, '1f', 'skinMatricesTextureSize', skinMatricesTexture.width);
            } else {
                var skinMatricesArray = skeleton.getSubSkinMatrices(object.__uid__, object.joints);
                program.setUniformOfSemantic(_gl, 'SKIN_MATRIX', skinMatricesArray);
            }
        }
    },
    _renderObject: function(renderable, vao, program) {
        var _gl = this.gl;
        var geometry = renderable.geometry;
        var glDrawMode = renderable.mode;
        if (glDrawMode == null) {
            glDrawMode = 0x0004;
        }
        var ext = null;
        var isInstanced = renderable.isInstancedMesh && renderable.isInstancedMesh();
        if (isInstanced) {
            ext = this.getGLExtension('ANGLE_instanced_arrays');
            if (!ext) {
                console.warn('Device not support ANGLE_instanced_arrays extension');
                return;
            }
        }
        var instancedAttrLocations;
        if (isInstanced) {
            instancedAttrLocations = this._bindInstancedAttributes(renderable, program, ext);
        }
        if (vao.indicesBuffer) {
            var uintExt = this.getGLExtension('OES_element_index_uint');
            var useUintExt = uintExt && geometry.indices instanceof Uint32Array;
            var indicesType = useUintExt ? _gl.UNSIGNED_INT : _gl.UNSIGNED_SHORT;
            if (isInstanced) {
                ext.drawElementsInstancedANGLE(glDrawMode, vao.indicesBuffer.count, indicesType, 0, renderable.getInstanceCount());
            } else {
                _gl.drawElements(glDrawMode, vao.indicesBuffer.count, indicesType, 0);
            }
        } else {
            if (isInstanced) {
                ext.drawArraysInstancedANGLE(glDrawMode, 0, geometry.vertexCount, renderable.getInstanceCount());
            } else {
                // FIXME Use vertex number in buffer
                // vertexCount may get the wrong value when geometry forget to mark dirty after update
                _gl.drawArrays(glDrawMode, 0, geometry.vertexCount);
            }
        }
        if (isInstanced) {
            for(var i = 0; i < instancedAttrLocations.length; i++){
                _gl.disableVertexAttribArray(instancedAttrLocations[i]);
            }
        }
    },
    _bindInstancedAttributes: function(renderable, program, ext) {
        var _gl = this.gl;
        var instancedBuffers = renderable.getInstancedAttributesBuffers(this);
        var locations = [];
        for(var i = 0; i < instancedBuffers.length; i++){
            var bufferObj = instancedBuffers[i];
            var location = program.getAttribLocation(_gl, bufferObj.symbol);
            if (location < 0) {
                continue;
            }
            var glType = attributeBufferTypeMap[bufferObj.type] || _gl.FLOAT;
            ;
            _gl.enableVertexAttribArray(location); // TODO
            _gl.bindBuffer(_gl.ARRAY_BUFFER, bufferObj.buffer);
            _gl.vertexAttribPointer(location, bufferObj.size, glType, false, 0, 0);
            ext.vertexAttribDivisorANGLE(location, bufferObj.divisor);
            locations.push(location);
        }
        return locations;
    },
    _bindMaterial: function(renderable, material, program, prevRenderable, prevMaterial, prevProgram, getUniformValue) {
        var _gl = this.gl;
        // PENDING Same texture in different material take different slot?
        // May use shader of other material if shader code are same
        var sameProgram = prevProgram === program;
        var currentTextureSlot = program.currentTextureSlot();
        var enabledUniforms = material.getEnabledUniforms();
        var textureUniforms = material.getTextureUniforms();
        var placeholderTexture = this._placeholderTexture;
        for(var u = 0; u < textureUniforms.length; u++){
            var symbol = textureUniforms[u];
            var uniformValue = getUniformValue(renderable, material, symbol);
            var uniformType = material.uniforms[symbol].type;
            // Not use `instanceof` to determine if a value is texture in Material#bind.
            // Use type instead, in some case texture may be in different namespaces.
            // TODO Duck type validate.
            if (uniformType === 't' && uniformValue) {
                // Reset slot
                uniformValue.__slot = -1;
            } else if (uniformType === 'tv') {
                for(var i = 0; i < uniformValue.length; i++){
                    if (uniformValue[i]) {
                        uniformValue[i].__slot = -1;
                    }
                }
            }
        }
        placeholderTexture.__slot = -1;
        // Set uniforms
        for(var u = 0; u < enabledUniforms.length; u++){
            var symbol = enabledUniforms[u];
            var uniform = material.uniforms[symbol];
            var uniformValue = getUniformValue(renderable, material, symbol);
            var uniformType = uniform.type;
            var isTexture = uniformType === 't';
            if (isTexture) {
                if (!uniformValue || !uniformValue.isRenderable()) {
                    uniformValue = placeholderTexture;
                }
            }
            // PENDING
            // When binding two materials with the same shader
            // Many uniforms will be be set twice even if they have the same value
            // So add a evaluation to see if the uniform is really needed to be set
            if (prevMaterial && sameProgram) {
                var prevUniformValue = getUniformValue(prevRenderable, prevMaterial, symbol);
                if (isTexture) {
                    if (!prevUniformValue || !prevUniformValue.isRenderable()) {
                        prevUniformValue = placeholderTexture;
                    }
                }
                if (prevUniformValue === uniformValue) {
                    if (isTexture) {
                        // Still take the slot to make sure same texture in different materials have same slot.
                        program.takeCurrentTextureSlot(this, null);
                    } else if (uniformType === 'tv' && uniformValue) {
                        for(var i = 0; i < uniformValue.length; i++){
                            program.takeCurrentTextureSlot(this, null);
                        }
                    }
                    continue;
                }
            }
            if (uniformValue == null) {
                continue;
            } else if (isTexture) {
                if (uniformValue.__slot < 0) {
                    var slot = program.currentTextureSlot();
                    var res = program.setUniform(_gl, '1i', symbol, slot);
                    if (res) {
                        program.takeCurrentTextureSlot(this, uniformValue);
                        uniformValue.__slot = slot;
                    }
                } else {
                    program.setUniform(_gl, '1i', symbol, uniformValue.__slot);
                }
            } else if (Array.isArray(uniformValue)) {
                if (uniformValue.length === 0) {
                    continue;
                }
                // Texture Array
                if (uniformType === 'tv') {
                    if (!program.hasUniform(symbol)) {
                        continue;
                    }
                    var arr = [];
                    for(var i = 0; i < uniformValue.length; i++){
                        var texture = uniformValue[i];
                        if (texture.__slot < 0) {
                            var slot = program.currentTextureSlot();
                            arr.push(slot);
                            program.takeCurrentTextureSlot(this, texture);
                            texture.__slot = slot;
                        } else {
                            arr.push(texture.__slot);
                        }
                    }
                    program.setUniform(_gl, '1iv', symbol, arr);
                } else {
                    program.setUniform(_gl, uniform.type, symbol, uniformValue);
                }
            } else {
                program.setUniform(_gl, uniform.type, symbol, uniformValue);
            }
        }
        var newSlot = program.currentTextureSlot();
        // Texture slot maybe used out of material.
        program.resetTextureSlot(currentTextureSlot);
        return newSlot;
    },
    _bindVAO: function(vaoExt, shader, geometry, program) {
        var isStatic = !geometry.dynamic;
        var _gl = this.gl;
        var vaoId = this.__uid__ + '-' + program.__uid__;
        var vao = geometry.__vaoCache[vaoId];
        if (!vao) {
            var chunks = geometry.getBufferChunks(this);
            if (!chunks || !chunks.length) {
                return;
            }
            var chunk = chunks[0];
            var attributeBuffers = chunk.attributeBuffers;
            var indicesBuffer = chunk.indicesBuffer;
            var availableAttributes = [];
            var availableAttributeSymbols = [];
            for(var a = 0; a < attributeBuffers.length; a++){
                var attributeBufferInfo = attributeBuffers[a];
                var name = attributeBufferInfo.name;
                var semantic = attributeBufferInfo.semantic;
                var symbol;
                if (semantic) {
                    var semanticInfo = shader.attributeSemantics[semantic];
                    symbol = semanticInfo && semanticInfo.symbol;
                } else {
                    symbol = name;
                }
                if (symbol && program.attributes[symbol]) {
                    availableAttributes.push(attributeBufferInfo);
                    availableAttributeSymbols.push(symbol);
                }
            }
            vao = new VertexArrayObject(availableAttributes, availableAttributeSymbols, indicesBuffer);
            if (isStatic) {
                geometry.__vaoCache[vaoId] = vao;
            }
        }
        var needsBindAttributes = true;
        // Create vertex object array cost a lot
        // So we don't use it on the dynamic object
        if (vaoExt && isStatic) {
            // Use vertex array object
            // http://blog.tojicode.com/2012/10/oesvertexarrayobject-extension.html
            if (vao.vao == null) {
                vao.vao = vaoExt.createVertexArrayOES();
            } else {
                needsBindAttributes = false;
            }
            vaoExt.bindVertexArrayOES(vao.vao);
        }
        var availableAttributes = vao.availableAttributes;
        var indicesBuffer = vao.indicesBuffer;
        if (needsBindAttributes) {
            var locationList = program.enableAttributes(this, vao.availableAttributeSymbols, vaoExt && isStatic && vao);
            // Setting attributes;
            for(var a = 0; a < availableAttributes.length; a++){
                var location = locationList[a];
                if (location === -1) {
                    continue;
                }
                var attributeBufferInfo = availableAttributes[a];
                var buffer = attributeBufferInfo.buffer;
                var size = attributeBufferInfo.size;
                var glType = attributeBufferTypeMap[attributeBufferInfo.type] || _gl.FLOAT;
                _gl.bindBuffer(_gl.ARRAY_BUFFER, buffer);
                _gl.vertexAttribPointer(location, size, glType, false, 0, 0);
            }
            if (geometry.isUseIndices()) {
                _gl.bindBuffer(_gl.ELEMENT_ARRAY_BUFFER, indicesBuffer.buffer);
            }
        }
        return vao;
    },
    renderPreZ: function(list, scene, camera) {
        var _gl = this.gl;
        var preZPassMaterial = this._prezMaterial || new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Material$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]({
            shader: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Shader$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Shader$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].source('clay.prez.vertex'), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Shader$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].source('clay.prez.fragment'))
        });
        this._prezMaterial = preZPassMaterial;
        _gl.colorMask(false, false, false, false);
        _gl.depthMask(true);
        // Status
        this.renderPass(list, camera, {
            ifRender: function(renderable) {
                return !renderable.ignorePreZ;
            },
            isMaterialChanged: function(renderable, prevRenderable) {
                var matA = renderable.material;
                var matB = prevRenderable.material;
                return matA.get('diffuseMap') !== matB.get('diffuseMap') || (matA.get('alphaCutoff') || 0) !== (matB.get('alphaCutoff') || 0);
            },
            getUniform: function(renderable, depthMaterial, symbol) {
                if (symbol === 'alphaMap') {
                    return renderable.material.get('diffuseMap');
                } else if (symbol === 'alphaCutoff') {
                    if (renderable.material.isDefined('fragment', 'ALPHA_TEST') && renderable.material.get('diffuseMap')) {
                        var alphaCutoff = renderable.material.get('alphaCutoff');
                        return alphaCutoff || 0;
                    }
                    return 0;
                } else if (symbol === 'uvRepeat') {
                    return renderable.material.get('uvRepeat');
                } else if (symbol === 'uvOffset') {
                    return renderable.material.get('uvOffset');
                } else {
                    return depthMaterial.get(symbol);
                }
            },
            getMaterial: function() {
                return preZPassMaterial;
            },
            sort: this.opaqueSortCompare
        });
        _gl.colorMask(true, true, true, true);
        _gl.depthMask(true);
    },
    /**
     * Dispose given scene, including all geometris, textures and shaders in the scene
     * @param {clay.Scene} scene
     */ disposeScene: function(scene) {
        this.disposeNode(scene, true, true);
        scene.dispose();
    },
    /**
     * Dispose given node, including all geometries, textures and shaders attached on it or its descendant
     * @param {clay.Node} node
     * @param {boolean} [disposeGeometry=false] If dispose the geometries used in the descendant mesh
     * @param {boolean} [disposeTexture=false] If dispose the textures used in the descendant mesh
     */ disposeNode: function(root, disposeGeometry, disposeTexture) {
        // Dettached from parent
        if (root.getParent()) {
            root.getParent().remove(root);
        }
        var disposedMap = {};
        root.traverse(function(node) {
            var material = node.material;
            if (node.geometry && disposeGeometry) {
                node.geometry.dispose(this);
            }
            if (disposeTexture && material && !disposedMap[material.__uid__]) {
                var textureUniforms = material.getTextureUniforms();
                for(var u = 0; u < textureUniforms.length; u++){
                    var uniformName = textureUniforms[u];
                    var val = material.uniforms[uniformName].value;
                    var uniformType = material.uniforms[uniformName].type;
                    if (!val) {
                        continue;
                    }
                    if (uniformType === 't') {
                        val.dispose && val.dispose(this);
                    } else if (uniformType === 'tv') {
                        for(var k = 0; k < val.length; k++){
                            if (val[k]) {
                                val[k].dispose && val[k].dispose(this);
                            }
                        }
                    }
                }
                disposedMap[material.__uid__] = true;
            }
            // Particle system and AmbientCubemap light need to dispose
            if (node.dispose) {
                node.dispose(this);
            }
        }, this);
    },
    /**
     * Dispose given geometry
     * @param {clay.Geometry} geometry
     */ disposeGeometry: function(geometry) {
        geometry.dispose(this);
    },
    /**
     * Dispose given texture
     * @param {clay.Texture} texture
     */ disposeTexture: function(texture) {
        texture.dispose(this);
    },
    /**
     * Dispose given frame buffer
     * @param {clay.FrameBuffer} frameBuffer
     */ disposeFrameBuffer: function(frameBuffer) {
        frameBuffer.dispose(this);
    },
    /**
     * Dispose renderer
     */ dispose: function() {},
    /**
     * Convert screen coords to normalized device coordinates(NDC)
     * Screen coords can get from mouse event, it is positioned relative to canvas element
     * NDC can be used in ray casting with Camera.prototype.castRay methods
     *
     * @param  {number}       x
     * @param  {number}       y
     * @param  {clay.Vector2} [out]
     * @return {clay.Vector2}
     */ screenToNDC: function(x, y, out) {
        if (!out) {
            out = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
        }
        // Invert y;
        y = this._height - y;
        var viewport = this.viewport;
        var arr = out.array;
        arr[0] = (x - viewport.x) / viewport.width;
        arr[0] = arr[0] * 2 - 1;
        arr[1] = (y - viewport.y) / viewport.height;
        arr[1] = arr[1] * 2 - 1;
        return out;
    }
});
/**
 * Opaque renderables compare function
 * @param  {clay.Renderable} x
 * @param  {clay.Renderable} y
 * @return {boolean}
 * @static
 */ Renderer.opaqueSortCompare = Renderer.prototype.opaqueSortCompare = function(x, y) {
    // Priority renderOrder -> program -> material -> geometry
    if (x.renderOrder === y.renderOrder) {
        if (x.__program === y.__program) {
            if (x.material === y.material) {
                return x.geometry.__uid__ - y.geometry.__uid__;
            }
            return x.material.__uid__ - y.material.__uid__;
        }
        if (x.__program && y.__program) {
            return x.__program.__uid__ - y.__program.__uid__;
        }
        return 0;
    }
    return x.renderOrder - y.renderOrder;
};
/**
 * Transparent renderables compare function
 * @param  {clay.Renderable} a
 * @param  {clay.Renderable} b
 * @return {boolean}
 * @static
 */ Renderer.transparentSortCompare = Renderer.prototype.transparentSortCompare = function(x, y) {
    // Priority renderOrder -> depth -> program -> material -> geometry
    if (x.renderOrder === y.renderOrder) {
        if (x.__depth === y.__depth) {
            if (x.__program === y.__program) {
                if (x.material === y.material) {
                    return x.geometry.__uid__ - y.geometry.__uid__;
                }
                return x.material.__uid__ - y.material.__uid__;
            }
            if (x.__program && y.__program) {
                return x.__program.__uid__ - y.__program.__uid__;
            }
            return 0;
        }
        // Depth is negative
        // So farther object has smaller depth value
        return x.__depth - y.__depth;
    }
    return x.renderOrder - y.renderOrder;
};
// Temporary variables
var matrices = {
    IDENTITY: mat4Create(),
    WORLD: mat4Create(),
    VIEW: mat4Create(),
    PROJECTION: mat4Create(),
    WORLDVIEW: mat4Create(),
    VIEWPROJECTION: mat4Create(),
    WORLDVIEWPROJECTION: mat4Create(),
    WORLDINVERSE: mat4Create(),
    VIEWINVERSE: mat4Create(),
    PROJECTIONINVERSE: mat4Create(),
    WORLDVIEWINVERSE: mat4Create(),
    VIEWPROJECTIONINVERSE: mat4Create(),
    WORLDVIEWPROJECTIONINVERSE: mat4Create(),
    WORLDTRANSPOSE: mat4Create(),
    VIEWTRANSPOSE: mat4Create(),
    PROJECTIONTRANSPOSE: mat4Create(),
    WORLDVIEWTRANSPOSE: mat4Create(),
    VIEWPROJECTIONTRANSPOSE: mat4Create(),
    WORLDVIEWPROJECTIONTRANSPOSE: mat4Create(),
    WORLDINVERSETRANSPOSE: mat4Create(),
    VIEWINVERSETRANSPOSE: mat4Create(),
    PROJECTIONINVERSETRANSPOSE: mat4Create(),
    WORLDVIEWINVERSETRANSPOSE: mat4Create(),
    VIEWPROJECTIONINVERSETRANSPOSE: mat4Create(),
    WORLDVIEWPROJECTIONINVERSETRANSPOSE: mat4Create()
};
/**
 * @name clay.Renderer.COLOR_BUFFER_BIT
 * @type {number}
 */ Renderer.COLOR_BUFFER_BIT = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].COLOR_BUFFER_BIT;
/**
 * @name clay.Renderer.DEPTH_BUFFER_BIT
 * @type {number}
 */ Renderer.DEPTH_BUFFER_BIT = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].DEPTH_BUFFER_BIT;
/**
 * @name clay.Renderer.STENCIL_BUFFER_BIT
 * @type {number}
 */ Renderer.STENCIL_BUFFER_BIT = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].STENCIL_BUFFER_BIT;
const __TURBOPACK__default__export__ = Renderer;
}}),
"[project]/node_modules/claygl/src/math/Vector3.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/glmatrix/vec3.js [app-client] (ecmascript)");
;
/**
 * @constructor
 * @alias clay.Vector3
 * @param {number} x
 * @param {number} y
 * @param {number} z
 */ var Vector3 = function(x, y, z) {
    x = x || 0;
    y = y || 0;
    z = z || 0;
    /**
     * Storage of Vector3, read and write of x, y, z will change the values in array
     * All methods also operate on the array instead of x, y, z components
     * @name array
     * @type {Float32Array}
     * @memberOf clay.Vector3#
     */ this.array = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].fromValues(x, y, z);
    /**
     * Dirty flag is used by the Node to determine
     * if the matrix is updated to latest
     * @name _dirty
     * @type {boolean}
     * @memberOf clay.Vector3#
     */ this._dirty = true;
};
Vector3.prototype = {
    constructor: Vector3,
    /**
     * Add b to self
     * @param  {clay.Vector3} b
     * @return {clay.Vector3}
     */ add: function(b) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].add(this.array, this.array, b.array);
        this._dirty = true;
        return this;
    },
    /**
     * Set x, y and z components
     * @param  {number}  x
     * @param  {number}  y
     * @param  {number}  z
     * @return {clay.Vector3}
     */ set: function(x, y, z) {
        this.array[0] = x;
        this.array[1] = y;
        this.array[2] = z;
        this._dirty = true;
        return this;
    },
    /**
     * Set x, y and z components from array
     * @param  {Float32Array|number[]} arr
     * @return {clay.Vector3}
     */ setArray: function(arr) {
        this.array[0] = arr[0];
        this.array[1] = arr[1];
        this.array[2] = arr[2];
        this._dirty = true;
        return this;
    },
    /**
     * Clone a new Vector3
     * @return {clay.Vector3}
     */ clone: function() {
        return new Vector3(this.x, this.y, this.z);
    },
    /**
     * Copy from b
     * @param  {clay.Vector3} b
     * @return {clay.Vector3}
     */ copy: function(b) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].copy(this.array, b.array);
        this._dirty = true;
        return this;
    },
    /**
     * Cross product of self and b, written to a Vector3 out
     * @param  {clay.Vector3} a
     * @param  {clay.Vector3} b
     * @return {clay.Vector3}
     */ cross: function(a, b) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].cross(this.array, a.array, b.array);
        this._dirty = true;
        return this;
    },
    /**
     * Alias for distance
     * @param  {clay.Vector3} b
     * @return {number}
     */ dist: function(b) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].dist(this.array, b.array);
    },
    /**
     * Distance between self and b
     * @param  {clay.Vector3} b
     * @return {number}
     */ distance: function(b) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].distance(this.array, b.array);
    },
    /**
     * Alias for divide
     * @param  {clay.Vector3} b
     * @return {clay.Vector3}
     */ div: function(b) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].div(this.array, this.array, b.array);
        this._dirty = true;
        return this;
    },
    /**
     * Divide self by b
     * @param  {clay.Vector3} b
     * @return {clay.Vector3}
     */ divide: function(b) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].divide(this.array, this.array, b.array);
        this._dirty = true;
        return this;
    },
    /**
     * Dot product of self and b
     * @param  {clay.Vector3} b
     * @return {number}
     */ dot: function(b) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].dot(this.array, b.array);
    },
    /**
     * Alias of length
     * @return {number}
     */ len: function() {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].len(this.array);
    },
    /**
     * Calculate the length
     * @return {number}
     */ length: function() {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].length(this.array);
    },
    /**
     * Linear interpolation between a and b
     * @param  {clay.Vector3} a
     * @param  {clay.Vector3} b
     * @param  {number}  t
     * @return {clay.Vector3}
     */ lerp: function(a, b, t) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].lerp(this.array, a.array, b.array, t);
        this._dirty = true;
        return this;
    },
    /**
     * Minimum of self and b
     * @param  {clay.Vector3} b
     * @return {clay.Vector3}
     */ min: function(b) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].min(this.array, this.array, b.array);
        this._dirty = true;
        return this;
    },
    /**
     * Maximum of self and b
     * @param  {clay.Vector3} b
     * @return {clay.Vector3}
     */ max: function(b) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].max(this.array, this.array, b.array);
        this._dirty = true;
        return this;
    },
    /**
     * Alias for multiply
     * @param  {clay.Vector3} b
     * @return {clay.Vector3}
     */ mul: function(b) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].mul(this.array, this.array, b.array);
        this._dirty = true;
        return this;
    },
    /**
     * Mutiply self and b
     * @param  {clay.Vector3} b
     * @return {clay.Vector3}
     */ multiply: function(b) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].multiply(this.array, this.array, b.array);
        this._dirty = true;
        return this;
    },
    /**
     * Negate self
     * @return {clay.Vector3}
     */ negate: function() {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].negate(this.array, this.array);
        this._dirty = true;
        return this;
    },
    /**
     * Normalize self
     * @return {clay.Vector3}
     */ normalize: function() {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].normalize(this.array, this.array);
        this._dirty = true;
        return this;
    },
    /**
     * Generate random x, y, z components with a given scale
     * @param  {number} scale
     * @return {clay.Vector3}
     */ random: function(scale) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].random(this.array, scale);
        this._dirty = true;
        return this;
    },
    /**
     * Scale self
     * @param  {number}  scale
     * @return {clay.Vector3}
     */ scale: function(s) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].scale(this.array, this.array, s);
        this._dirty = true;
        return this;
    },
    /**
     * Scale b and add to self
     * @param  {clay.Vector3} b
     * @param  {number}  scale
     * @return {clay.Vector3}
     */ scaleAndAdd: function(b, s) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].scaleAndAdd(this.array, this.array, b.array, s);
        this._dirty = true;
        return this;
    },
    /**
     * Alias for squaredDistance
     * @param  {clay.Vector3} b
     * @return {number}
     */ sqrDist: function(b) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].sqrDist(this.array, b.array);
    },
    /**
     * Squared distance between self and b
     * @param  {clay.Vector3} b
     * @return {number}
     */ squaredDistance: function(b) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].squaredDistance(this.array, b.array);
    },
    /**
     * Alias for squaredLength
     * @return {number}
     */ sqrLen: function() {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].sqrLen(this.array);
    },
    /**
     * Squared length of self
     * @return {number}
     */ squaredLength: function() {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].squaredLength(this.array);
    },
    /**
     * Alias for subtract
     * @param  {clay.Vector3} b
     * @return {clay.Vector3}
     */ sub: function(b) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].sub(this.array, this.array, b.array);
        this._dirty = true;
        return this;
    },
    /**
     * Subtract b from self
     * @param  {clay.Vector3} b
     * @return {clay.Vector3}
     */ subtract: function(b) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].subtract(this.array, this.array, b.array);
        this._dirty = true;
        return this;
    },
    /**
     * Transform self with a Matrix3 m
     * @param  {clay.Matrix3} m
     * @return {clay.Vector3}
     */ transformMat3: function(m) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].transformMat3(this.array, this.array, m.array);
        this._dirty = true;
        return this;
    },
    /**
     * Transform self with a Matrix4 m
     * @param  {clay.Matrix4} m
     * @return {clay.Vector3}
     */ transformMat4: function(m) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].transformMat4(this.array, this.array, m.array);
        this._dirty = true;
        return this;
    },
    /**
     * Transform self with a Quaternion q
     * @param  {clay.Quaternion} q
     * @return {clay.Vector3}
     */ transformQuat: function(q) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].transformQuat(this.array, this.array, q.array);
        this._dirty = true;
        return this;
    },
    /**
     * Trasnform self into projection space with m
     * @param  {clay.Matrix4} m
     * @return {clay.Vector3}
     */ applyProjection: function(m) {
        var v = this.array;
        m = m.array;
        // Perspective projection
        if (m[15] === 0) {
            var w = -1 / v[2];
            v[0] = m[0] * v[0] * w;
            v[1] = m[5] * v[1] * w;
            v[2] = (m[10] * v[2] + m[14]) * w;
        } else {
            v[0] = m[0] * v[0] + m[12];
            v[1] = m[5] * v[1] + m[13];
            v[2] = m[10] * v[2] + m[14];
        }
        this._dirty = true;
        return this;
    },
    eulerFromQuat: function(q, order) {
        Vector3.eulerFromQuat(this, q, order);
    },
    eulerFromMat3: function(m, order) {
        Vector3.eulerFromMat3(this, m, order);
    },
    toString: function() {
        return '[' + Array.prototype.join.call(this.array, ',') + ']';
    },
    toArray: function() {
        return Array.prototype.slice.call(this.array);
    }
};
var defineProperty = Object.defineProperty;
// Getter and Setter
if (defineProperty) {
    var proto = Vector3.prototype;
    /**
     * @name x
     * @type {number}
     * @memberOf clay.Vector3
     * @instance
     */ defineProperty(proto, 'x', {
        get: function() {
            return this.array[0];
        },
        set: function(value) {
            this.array[0] = value;
            this._dirty = true;
        }
    });
    /**
     * @name y
     * @type {number}
     * @memberOf clay.Vector3
     * @instance
     */ defineProperty(proto, 'y', {
        get: function() {
            return this.array[1];
        },
        set: function(value) {
            this.array[1] = value;
            this._dirty = true;
        }
    });
    /**
     * @name z
     * @type {number}
     * @memberOf clay.Vector3
     * @instance
     */ defineProperty(proto, 'z', {
        get: function() {
            return this.array[2];
        },
        set: function(value) {
            this.array[2] = value;
            this._dirty = true;
        }
    });
}
// Supply methods that are not in place
/**
 * @param  {clay.Vector3} out
 * @param  {clay.Vector3} a
 * @param  {clay.Vector3} b
 * @return {clay.Vector3}
 */ Vector3.add = function(out, a, b) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].add(out.array, a.array, b.array);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Vector3} out
 * @param  {number}  x
 * @param  {number}  y
 * @param  {number}  z
 * @return {clay.Vector3}
 */ Vector3.set = function(out, x, y, z) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].set(out.array, x, y, z);
    out._dirty = true;
};
/**
 * @param  {clay.Vector3} out
 * @param  {clay.Vector3} b
 * @return {clay.Vector3}
 */ Vector3.copy = function(out, b) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].copy(out.array, b.array);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Vector3} out
 * @param  {clay.Vector3} a
 * @param  {clay.Vector3} b
 * @return {clay.Vector3}
 */ Vector3.cross = function(out, a, b) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].cross(out.array, a.array, b.array);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Vector3} a
 * @param  {clay.Vector3} b
 * @return {number}
 */ Vector3.dist = function(a, b) {
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].distance(a.array, b.array);
};
/**
 * @function
 * @param  {clay.Vector3} a
 * @param  {clay.Vector3} b
 * @return {number}
 */ Vector3.distance = Vector3.dist;
/**
 * @param  {clay.Vector3} out
 * @param  {clay.Vector3} a
 * @param  {clay.Vector3} b
 * @return {clay.Vector3}
 */ Vector3.div = function(out, a, b) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].divide(out.array, a.array, b.array);
    out._dirty = true;
    return out;
};
/**
 * @function
 * @param  {clay.Vector3} out
 * @param  {clay.Vector3} a
 * @param  {clay.Vector3} b
 * @return {clay.Vector3}
 */ Vector3.divide = Vector3.div;
/**
 * @param  {clay.Vector3} a
 * @param  {clay.Vector3} b
 * @return {number}
 */ Vector3.dot = function(a, b) {
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].dot(a.array, b.array);
};
/**
 * @param  {clay.Vector3} a
 * @return {number}
 */ Vector3.len = function(b) {
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].length(b.array);
};
// Vector3.length = Vector3.len;
/**
 * @param  {clay.Vector3} out
 * @param  {clay.Vector3} a
 * @param  {clay.Vector3} b
 * @param  {number}  t
 * @return {clay.Vector3}
 */ Vector3.lerp = function(out, a, b, t) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].lerp(out.array, a.array, b.array, t);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Vector3} out
 * @param  {clay.Vector3} a
 * @param  {clay.Vector3} b
 * @return {clay.Vector3}
 */ Vector3.min = function(out, a, b) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].min(out.array, a.array, b.array);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Vector3} out
 * @param  {clay.Vector3} a
 * @param  {clay.Vector3} b
 * @return {clay.Vector3}
 */ Vector3.max = function(out, a, b) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].max(out.array, a.array, b.array);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Vector3} out
 * @param  {clay.Vector3} a
 * @param  {clay.Vector3} b
 * @return {clay.Vector3}
 */ Vector3.mul = function(out, a, b) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].multiply(out.array, a.array, b.array);
    out._dirty = true;
    return out;
};
/**
 * @function
 * @param  {clay.Vector3} out
 * @param  {clay.Vector3} a
 * @param  {clay.Vector3} b
 * @return {clay.Vector3}
 */ Vector3.multiply = Vector3.mul;
/**
 * @param  {clay.Vector3} out
 * @param  {clay.Vector3} a
 * @return {clay.Vector3}
 */ Vector3.negate = function(out, a) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].negate(out.array, a.array);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Vector3} out
 * @param  {clay.Vector3} a
 * @return {clay.Vector3}
 */ Vector3.normalize = function(out, a) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].normalize(out.array, a.array);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Vector3} out
 * @param  {number}  scale
 * @return {clay.Vector3}
 */ Vector3.random = function(out, scale) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].random(out.array, scale);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Vector3} out
 * @param  {clay.Vector3} a
 * @param  {number}  scale
 * @return {clay.Vector3}
 */ Vector3.scale = function(out, a, scale) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].scale(out.array, a.array, scale);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Vector3} out
 * @param  {clay.Vector3} a
 * @param  {clay.Vector3} b
 * @param  {number}  scale
 * @return {clay.Vector3}
 */ Vector3.scaleAndAdd = function(out, a, b, scale) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].scaleAndAdd(out.array, a.array, b.array, scale);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Vector3} a
 * @param  {clay.Vector3} b
 * @return {number}
 */ Vector3.sqrDist = function(a, b) {
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].sqrDist(a.array, b.array);
};
/**
 * @function
 * @param  {clay.Vector3} a
 * @param  {clay.Vector3} b
 * @return {number}
 */ Vector3.squaredDistance = Vector3.sqrDist;
/**
 * @param  {clay.Vector3} a
 * @return {number}
 */ Vector3.sqrLen = function(a) {
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].sqrLen(a.array);
};
/**
 * @function
 * @param  {clay.Vector3} a
 * @return {number}
 */ Vector3.squaredLength = Vector3.sqrLen;
/**
 * @param  {clay.Vector3} out
 * @param  {clay.Vector3} a
 * @param  {clay.Vector3} b
 * @return {clay.Vector3}
 */ Vector3.sub = function(out, a, b) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].subtract(out.array, a.array, b.array);
    out._dirty = true;
    return out;
};
/**
 * @function
 * @param  {clay.Vector3} out
 * @param  {clay.Vector3} a
 * @param  {clay.Vector3} b
 * @return {clay.Vector3}
 */ Vector3.subtract = Vector3.sub;
/**
 * @param  {clay.Vector3} out
 * @param  {clay.Vector3} a
 * @param  {Matrix3} m
 * @return {clay.Vector3}
 */ Vector3.transformMat3 = function(out, a, m) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].transformMat3(out.array, a.array, m.array);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Vector3} out
 * @param  {clay.Vector3} a
 * @param  {clay.Matrix4} m
 * @return {clay.Vector3}
 */ Vector3.transformMat4 = function(out, a, m) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].transformMat4(out.array, a.array, m.array);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Vector3} out
 * @param  {clay.Vector3} a
 * @param  {clay.Quaternion} q
 * @return {clay.Vector3}
 */ Vector3.transformQuat = function(out, a, q) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].transformQuat(out.array, a.array, q.array);
    out._dirty = true;
    return out;
};
function clamp(val, min, max) {
    return val < min ? min : val > max ? max : val;
}
var atan2 = Math.atan2;
var asin = Math.asin;
var abs = Math.abs;
/**
 * Convert quaternion to euler angle
 * Quaternion must be normalized
 * From three.js
 */ Vector3.eulerFromQuat = function(out, q, order) {
    out._dirty = true;
    q = q.array;
    var target = out.array;
    var x = q[0], y = q[1], z = q[2], w = q[3];
    var x2 = x * x;
    var y2 = y * y;
    var z2 = z * z;
    var w2 = w * w;
    var order = (order || 'XYZ').toUpperCase();
    switch(order){
        case 'XYZ':
            target[0] = atan2(2 * (x * w - y * z), w2 - x2 - y2 + z2);
            target[1] = asin(clamp(2 * (x * z + y * w), -1, 1));
            target[2] = atan2(2 * (z * w - x * y), w2 + x2 - y2 - z2);
            break;
        case 'YXZ':
            target[0] = asin(clamp(2 * (x * w - y * z), -1, 1));
            target[1] = atan2(2 * (x * z + y * w), w2 - x2 - y2 + z2);
            target[2] = atan2(2 * (x * y + z * w), w2 - x2 + y2 - z2);
            break;
        case 'ZXY':
            target[0] = asin(clamp(2 * (x * w + y * z), -1, 1));
            target[1] = atan2(2 * (y * w - z * x), w2 - x2 - y2 + z2);
            target[2] = atan2(2 * (z * w - x * y), w2 - x2 + y2 - z2);
            break;
        case 'ZYX':
            target[0] = atan2(2 * (x * w + z * y), w2 - x2 - y2 + z2);
            target[1] = asin(clamp(2 * (y * w - x * z), -1, 1));
            target[2] = atan2(2 * (x * y + z * w), w2 + x2 - y2 - z2);
            break;
        case 'YZX':
            target[0] = atan2(2 * (x * w - z * y), w2 - x2 + y2 - z2);
            target[1] = atan2(2 * (y * w - x * z), w2 + x2 - y2 - z2);
            target[2] = asin(clamp(2 * (x * y + z * w), -1, 1));
            break;
        case 'XZY':
            target[0] = atan2(2 * (x * w + y * z), w2 - x2 + y2 - z2);
            target[1] = atan2(2 * (x * z + y * w), w2 + x2 - y2 - z2);
            target[2] = asin(clamp(2 * (z * w - x * y), -1, 1));
            break;
        default:
            console.warn('Unkown order: ' + order);
    }
    return out;
};
/**
 * Convert rotation matrix to euler angle
 * from three.js
 */ Vector3.eulerFromMat3 = function(out, m, order) {
    // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
    var te = m.array;
    var m11 = te[0], m12 = te[3], m13 = te[6];
    var m21 = te[1], m22 = te[4], m23 = te[7];
    var m31 = te[2], m32 = te[5], m33 = te[8];
    var target = out.array;
    var order = (order || 'XYZ').toUpperCase();
    switch(order){
        case 'XYZ':
            target[1] = asin(clamp(m13, -1, 1));
            if (abs(m13) < 0.99999) {
                target[0] = atan2(-m23, m33);
                target[2] = atan2(-m12, m11);
            } else {
                target[0] = atan2(m32, m22);
                target[2] = 0;
            }
            break;
        case 'YXZ':
            target[0] = asin(-clamp(m23, -1, 1));
            if (abs(m23) < 0.99999) {
                target[1] = atan2(m13, m33);
                target[2] = atan2(m21, m22);
            } else {
                target[1] = atan2(-m31, m11);
                target[2] = 0;
            }
            break;
        case 'ZXY':
            target[0] = asin(clamp(m32, -1, 1));
            if (abs(m32) < 0.99999) {
                target[1] = atan2(-m31, m33);
                target[2] = atan2(-m12, m22);
            } else {
                target[1] = 0;
                target[2] = atan2(m21, m11);
            }
            break;
        case 'ZYX':
            target[1] = asin(-clamp(m31, -1, 1));
            if (abs(m31) < 0.99999) {
                target[0] = atan2(m32, m33);
                target[2] = atan2(m21, m11);
            } else {
                target[0] = 0;
                target[2] = atan2(-m12, m22);
            }
            break;
        case 'YZX':
            target[2] = asin(clamp(m21, -1, 1));
            if (abs(m21) < 0.99999) {
                target[0] = atan2(-m23, m22);
                target[1] = atan2(-m31, m11);
            } else {
                target[0] = 0;
                target[1] = atan2(m13, m33);
            }
            break;
        case 'XZY':
            target[2] = asin(-clamp(m12, -1, 1));
            if (abs(m12) < 0.99999) {
                target[0] = atan2(m32, m22);
                target[1] = atan2(m13, m11);
            } else {
                target[0] = atan2(-m23, m33);
                target[1] = 0;
            }
            break;
        default:
            console.warn('Unkown order: ' + order);
    }
    out._dirty = true;
    return out;
};
Object.defineProperties(Vector3, {
    /**
     * @type {clay.Vector3}
     * @readOnly
     * @memberOf clay.Vector3
     */ POSITIVE_X: {
        get: function() {
            return new Vector3(1, 0, 0);
        }
    },
    /**
     * @type {clay.Vector3}
     * @readOnly
     * @memberOf clay.Vector3
     */ NEGATIVE_X: {
        get: function() {
            return new Vector3(-1, 0, 0);
        }
    },
    /**
     * @type {clay.Vector3}
     * @readOnly
     * @memberOf clay.Vector3
     */ POSITIVE_Y: {
        get: function() {
            return new Vector3(0, 1, 0);
        }
    },
    /**
     * @type {clay.Vector3}
     * @readOnly
     * @memberOf clay.Vector3
     */ NEGATIVE_Y: {
        get: function() {
            return new Vector3(0, -1, 0);
        }
    },
    /**
     * @type {clay.Vector3}
     * @readOnly
     * @memberOf clay.Vector3
     */ POSITIVE_Z: {
        get: function() {
            return new Vector3(0, 0, 1);
        }
    },
    /**
     * @type {clay.Vector3}
     * @readOnly
     */ NEGATIVE_Z: {
        get: function() {
            return new Vector3(0, 0, -1);
        }
    },
    /**
     * @type {clay.Vector3}
     * @readOnly
     * @memberOf clay.Vector3
     */ UP: {
        get: function() {
            return new Vector3(0, 1, 0);
        }
    },
    /**
     * @type {clay.Vector3}
     * @readOnly
     * @memberOf clay.Vector3
     */ ZERO: {
        get: function() {
            return new Vector3();
        }
    }
});
const __TURBOPACK__default__export__ = Vector3;
}}),
"[project]/node_modules/claygl/src/math/Ray.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/math/Vector3.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/glmatrix/vec3.js [app-client] (ecmascript)");
;
;
var EPSILON = 1e-5;
/**
 * @constructor
 * @alias clay.Ray
 * @param {clay.Vector3} [origin]
 * @param {clay.Vector3} [direction]
 */ var Ray = function(origin, direction) {
    /**
     * @type {clay.Vector3}
     */ this.origin = origin || new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
    /**
     * @type {clay.Vector3}
     */ this.direction = direction || new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
};
Ray.prototype = {
    constructor: Ray,
    // http://www.siggraph.org/education/materials/HyperGraph/raytrace/rayplane_intersection.htm
    /**
     * Calculate intersection point between ray and a give plane
     * @param  {clay.Plane} plane
     * @param  {clay.Vector3} [out]
     * @return {clay.Vector3}
     */ intersectPlane: function(plane, out) {
        var pn = plane.normal.array;
        var d = plane.distance;
        var ro = this.origin.array;
        var rd = this.direction.array;
        var divider = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].dot(pn, rd);
        // ray is parallel to the plane
        if (divider === 0) {
            return null;
        }
        if (!out) {
            out = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
        }
        var t = (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].dot(pn, ro) - d) / divider;
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].scaleAndAdd(out.array, ro, rd, -t);
        out._dirty = true;
        return out;
    },
    /**
     * Mirror the ray against plane
     * @param  {clay.Plane} plane
     */ mirrorAgainstPlane: function(plane) {
        // Distance to plane
        var d = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].dot(plane.normal.array, this.direction.array);
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].scaleAndAdd(this.direction.array, this.direction.array, plane.normal.array, -d * 2);
        this.direction._dirty = true;
    },
    distanceToPoint: function() {
        var v = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].create();
        return function(point) {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].sub(v, point, this.origin.array);
            // Distance from projection point to origin
            var b = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].dot(v, this.direction.array);
            if (b < 0) {
                return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].distance(this.origin.array, point);
            }
            // Squared distance from center to origin
            var c2 = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].lenSquared(v);
            // Squared distance from center to projection point
            return Math.sqrt(c2 - b * b);
        };
    }(),
    /**
     * Calculate intersection point between ray and sphere
     * @param  {clay.Vector3} center
     * @param  {number} radius
     * @param  {clay.Vector3} out
     * @return {clay.Vector3}
     */ intersectSphere: function() {
        var v = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].create();
        return function(center, radius, out) {
            var origin = this.origin.array;
            var direction = this.direction.array;
            center = center.array;
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].sub(v, center, origin);
            // Distance from projection point to origin
            var b = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].dot(v, direction);
            // Squared distance from center to origin
            var c2 = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].squaredLength(v);
            // Squared distance from center to projection point
            var d2 = c2 - b * b;
            var r2 = radius * radius;
            // No intersection
            if (d2 > r2) {
                return;
            }
            var a = Math.sqrt(r2 - d2);
            // First intersect point
            var t0 = b - a;
            // Second intersect point
            var t1 = b + a;
            if (!out) {
                out = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
            }
            if (t0 < 0) {
                if (t1 < 0) {
                    return null;
                } else {
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].scaleAndAdd(out.array, origin, direction, t1);
                    return out;
                }
            } else {
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].scaleAndAdd(out.array, origin, direction, t0);
                return out;
            }
        };
    }(),
    // http://www.scratchapixel.com/lessons/3d-basic-lessons/lesson-7-intersecting-simple-shapes/ray-box-intersection/
    /**
     * Calculate intersection point between ray and bounding box
     * @param {clay.BoundingBox} bbox
     * @param {clay.Vector3}
     * @return {clay.Vector3}
     */ intersectBoundingBox: function(bbox, out) {
        var dir = this.direction.array;
        var origin = this.origin.array;
        var min = bbox.min.array;
        var max = bbox.max.array;
        var invdirx = 1 / dir[0];
        var invdiry = 1 / dir[1];
        var invdirz = 1 / dir[2];
        var tmin, tmax, tymin, tymax, tzmin, tzmax;
        if (invdirx >= 0) {
            tmin = (min[0] - origin[0]) * invdirx;
            tmax = (max[0] - origin[0]) * invdirx;
        } else {
            tmax = (min[0] - origin[0]) * invdirx;
            tmin = (max[0] - origin[0]) * invdirx;
        }
        if (invdiry >= 0) {
            tymin = (min[1] - origin[1]) * invdiry;
            tymax = (max[1] - origin[1]) * invdiry;
        } else {
            tymax = (min[1] - origin[1]) * invdiry;
            tymin = (max[1] - origin[1]) * invdiry;
        }
        if (tmin > tymax || tymin > tmax) {
            return null;
        }
        if (tymin > tmin || tmin !== tmin) {
            tmin = tymin;
        }
        if (tymax < tmax || tmax !== tmax) {
            tmax = tymax;
        }
        if (invdirz >= 0) {
            tzmin = (min[2] - origin[2]) * invdirz;
            tzmax = (max[2] - origin[2]) * invdirz;
        } else {
            tzmax = (min[2] - origin[2]) * invdirz;
            tzmin = (max[2] - origin[2]) * invdirz;
        }
        if (tmin > tzmax || tzmin > tmax) {
            return null;
        }
        if (tzmin > tmin || tmin !== tmin) {
            tmin = tzmin;
        }
        if (tzmax < tmax || tmax !== tmax) {
            tmax = tzmax;
        }
        if (tmax < 0) {
            return null;
        }
        var t = tmin >= 0 ? tmin : tmax;
        if (!out) {
            out = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
        }
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].scaleAndAdd(out.array, origin, dir, t);
        return out;
    },
    // http://en.wikipedia.org/wiki/M%C3%B6ller%E2%80%93Trumbore_intersection_algorithm
    /**
     * Calculate intersection point between ray and three triangle vertices
     * @param {clay.Vector3} a
     * @param {clay.Vector3} b
     * @param {clay.Vector3} c
     * @param {boolean}           singleSided, CW triangle will be ignored
     * @param {clay.Vector3} [out]
     * @param {clay.Vector3} [barycenteric] barycentric coords
     * @return {clay.Vector3}
     */ intersectTriangle: function() {
        var eBA = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].create();
        var eCA = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].create();
        var AO = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].create();
        var vCross = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].create();
        return function(a, b, c, singleSided, out, barycenteric) {
            var dir = this.direction.array;
            var origin = this.origin.array;
            a = a.array;
            b = b.array;
            c = c.array;
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].sub(eBA, b, a);
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].sub(eCA, c, a);
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].cross(vCross, eCA, dir);
            var det = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].dot(eBA, vCross);
            if (singleSided) {
                if (det > -EPSILON) {
                    return null;
                }
            } else {
                if (det > -EPSILON && det < EPSILON) {
                    return null;
                }
            }
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].sub(AO, origin, a);
            var u = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].dot(vCross, AO) / det;
            if (u < 0 || u > 1) {
                return null;
            }
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].cross(vCross, eBA, AO);
            var v = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].dot(dir, vCross) / det;
            if (v < 0 || v > 1 || u + v > 1) {
                return null;
            }
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].cross(vCross, eBA, eCA);
            var t = -__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].dot(AO, vCross) / det;
            if (t < 0) {
                return null;
            }
            if (!out) {
                out = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
            }
            if (barycenteric) {
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].set(barycenteric, 1 - u - v, u, v);
            }
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].scaleAndAdd(out.array, origin, dir, t);
            return out;
        };
    }(),
    /**
     * Apply an affine transform matrix to the ray
     * @return {clay.Matrix4} matrix
     */ applyTransform: function(matrix) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].add(this.direction, this.direction, this.origin);
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].transformMat4(this.origin, this.origin, matrix);
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].transformMat4(this.direction, this.direction, matrix);
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].sub(this.direction, this.direction, this.origin);
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].normalize(this.direction, this.direction);
    },
    /**
     * Copy values from another ray
     * @param {clay.Ray} ray
     */ copy: function(ray) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].copy(this.origin, ray.origin);
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].copy(this.direction, ray.direction);
    },
    /**
     * Clone a new ray
     * @return {clay.Ray}
     */ clone: function() {
        var ray = new Ray();
        ray.copy(this);
        return ray;
    }
};
const __TURBOPACK__default__export__ = Ray;
}}),
"[project]/node_modules/claygl/src/glmatrix/vec4.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
  * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */ __turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__),
    "vec4": (()=>vec4)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$common$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/glmatrix/common.js [app-client] (ecmascript)");
;
var vec4 = {};
/**
 * Creates a new, empty vec4
 *
 * @returns {vec4} a new 4D vector
 */ vec4.create = function() {
    var out = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$common$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GLMAT_ARRAY_TYPE"](4);
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    return out;
};
/**
 * Creates a new vec4 initialized with values from an existing vector
 *
 * @param {vec4} a vector to clone
 * @returns {vec4} a new 4D vector
 */ vec4.clone = function(a) {
    var out = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$common$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GLMAT_ARRAY_TYPE"](4);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    return out;
};
/**
 * Creates a new vec4 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {vec4} a new 4D vector
 */ vec4.fromValues = function(x, y, z, w) {
    var out = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$common$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GLMAT_ARRAY_TYPE"](4);
    out[0] = x;
    out[1] = y;
    out[2] = z;
    out[3] = w;
    return out;
};
/**
 * Copy the values from one vec4 to another
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the source vector
 * @returns {vec4} out
 */ vec4.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    return out;
};
/**
 * Set the components of a vec4 to the given values
 *
 * @param {vec4} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {vec4} out
 */ vec4.set = function(out, x, y, z, w) {
    out[0] = x;
    out[1] = y;
    out[2] = z;
    out[3] = w;
    return out;
};
/**
 * Adds two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */ vec4.add = function(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
    out[3] = a[3] + b[3];
    return out;
};
/**
 * Subtracts vector b from vector a
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */ vec4.subtract = function(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    out[2] = a[2] - b[2];
    out[3] = a[3] - b[3];
    return out;
};
/**
 * Alias for {@link vec4.subtract}
 * @function
 */ vec4.sub = vec4.subtract;
/**
 * Multiplies two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */ vec4.multiply = function(out, a, b) {
    out[0] = a[0] * b[0];
    out[1] = a[1] * b[1];
    out[2] = a[2] * b[2];
    out[3] = a[3] * b[3];
    return out;
};
/**
 * Alias for {@link vec4.multiply}
 * @function
 */ vec4.mul = vec4.multiply;
/**
 * Divides two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */ vec4.divide = function(out, a, b) {
    out[0] = a[0] / b[0];
    out[1] = a[1] / b[1];
    out[2] = a[2] / b[2];
    out[3] = a[3] / b[3];
    return out;
};
/**
 * Alias for {@link vec4.divide}
 * @function
 */ vec4.div = vec4.divide;
/**
 * Returns the minimum of two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */ vec4.min = function(out, a, b) {
    out[0] = Math.min(a[0], b[0]);
    out[1] = Math.min(a[1], b[1]);
    out[2] = Math.min(a[2], b[2]);
    out[3] = Math.min(a[3], b[3]);
    return out;
};
/**
 * Returns the maximum of two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */ vec4.max = function(out, a, b) {
    out[0] = Math.max(a[0], b[0]);
    out[1] = Math.max(a[1], b[1]);
    out[2] = Math.max(a[2], b[2]);
    out[3] = Math.max(a[3], b[3]);
    return out;
};
/**
 * Scales a vec4 by a scalar number
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec4} out
 */ vec4.scale = function(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    out[2] = a[2] * b;
    out[3] = a[3] * b;
    return out;
};
/**
 * Adds two vec4's after scaling the second operand by a scalar value
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec4} out
 */ vec4.scaleAndAdd = function(out, a, b, scale) {
    out[0] = a[0] + b[0] * scale;
    out[1] = a[1] + b[1] * scale;
    out[2] = a[2] + b[2] * scale;
    out[3] = a[3] + b[3] * scale;
    return out;
};
/**
 * Calculates the euclidian distance between two vec4's
 *
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {Number} distance between a and b
 */ vec4.distance = function(a, b) {
    var x = b[0] - a[0], y = b[1] - a[1], z = b[2] - a[2], w = b[3] - a[3];
    return Math.sqrt(x * x + y * y + z * z + w * w);
};
/**
 * Alias for {@link vec4.distance}
 * @function
 */ vec4.dist = vec4.distance;
/**
 * Calculates the squared euclidian distance between two vec4's
 *
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {Number} squared distance between a and b
 */ vec4.squaredDistance = function(a, b) {
    var x = b[0] - a[0], y = b[1] - a[1], z = b[2] - a[2], w = b[3] - a[3];
    return x * x + y * y + z * z + w * w;
};
/**
 * Alias for {@link vec4.squaredDistance}
 * @function
 */ vec4.sqrDist = vec4.squaredDistance;
/**
 * Calculates the length of a vec4
 *
 * @param {vec4} a vector to calculate length of
 * @returns {Number} length of a
 */ vec4.length = function(a) {
    var x = a[0], y = a[1], z = a[2], w = a[3];
    return Math.sqrt(x * x + y * y + z * z + w * w);
};
/**
 * Alias for {@link vec4.length}
 * @function
 */ vec4.len = vec4.length;
/**
 * Calculates the squared length of a vec4
 *
 * @param {vec4} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */ vec4.squaredLength = function(a) {
    var x = a[0], y = a[1], z = a[2], w = a[3];
    return x * x + y * y + z * z + w * w;
};
/**
 * Alias for {@link vec4.squaredLength}
 * @function
 */ vec4.sqrLen = vec4.squaredLength;
/**
 * Negates the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to negate
 * @returns {vec4} out
 */ vec4.negate = function(out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    out[2] = -a[2];
    out[3] = -a[3];
    return out;
};
/**
 * Returns the inverse of the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to invert
 * @returns {vec4} out
 */ vec4.inverse = function(out, a) {
    out[0] = 1.0 / a[0];
    out[1] = 1.0 / a[1];
    out[2] = 1.0 / a[2];
    out[3] = 1.0 / a[3];
    return out;
};
/**
 * Normalize a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to normalize
 * @returns {vec4} out
 */ vec4.normalize = function(out, a) {
    var x = a[0], y = a[1], z = a[2], w = a[3];
    var len = x * x + y * y + z * z + w * w;
    if (len > 0) {
        len = 1 / Math.sqrt(len);
        out[0] = a[0] * len;
        out[1] = a[1] * len;
        out[2] = a[2] * len;
        out[3] = a[3] * len;
    }
    return out;
};
/**
 * Calculates the dot product of two vec4's
 *
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {Number} dot product of a and b
 */ vec4.dot = function(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
};
/**
 * Performs a linear interpolation between two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {vec4} out
 */ vec4.lerp = function(out, a, b, t) {
    var ax = a[0], ay = a[1], az = a[2], aw = a[3];
    out[0] = ax + t * (b[0] - ax);
    out[1] = ay + t * (b[1] - ay);
    out[2] = az + t * (b[2] - az);
    out[3] = aw + t * (b[3] - aw);
    return out;
};
/**
 * Generates a random vector with the given scale
 *
 * @param {vec4} out the receiving vector
 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
 * @returns {vec4} out
 */ vec4.random = function(out, scale) {
    scale = scale || 1.0;
    //TODO: This is a pretty awful way of doing this. Find something better.
    out[0] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$common$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GLMAT_RANDOM"])();
    out[1] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$common$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GLMAT_RANDOM"])();
    out[2] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$common$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GLMAT_RANDOM"])();
    out[3] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$common$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GLMAT_RANDOM"])();
    vec4.normalize(out, out);
    vec4.scale(out, out, scale);
    return out;
};
/**
 * Transforms the vec4 with a mat4.
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the vector to transform
 * @param {mat4} m matrix to transform with
 * @returns {vec4} out
 */ vec4.transformMat4 = function(out, a, m) {
    var x = a[0], y = a[1], z = a[2], w = a[3];
    out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;
    out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;
    out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;
    out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;
    return out;
};
/**
 * Transforms the vec4 with a quat
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the vector to transform
 * @param {quat} q quaternion to transform with
 * @returns {vec4} out
 */ vec4.transformQuat = function(out, a, q) {
    var x = a[0], y = a[1], z = a[2], qx = q[0], qy = q[1], qz = q[2], qw = q[3], // calculate quat * vec
    ix = qw * x + qy * z - qz * y, iy = qw * y + qz * x - qx * z, iz = qw * z + qx * y - qy * x, iw = -qx * x - qy * y - qz * z;
    // calculate result * inverse quat
    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
    return out;
};
/**
 * Perform some operation over an array of vec4s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */ vec4.forEach = function() {
    var vec = vec4.create();
    return function(a, stride, offset, count, fn, arg) {
        var i, l;
        if (!stride) {
            stride = 4;
        }
        if (!offset) {
            offset = 0;
        }
        if (count) {
            l = Math.min(count * stride + offset, a.length);
        } else {
            l = a.length;
        }
        for(i = offset; i < l; i += stride){
            vec[0] = a[i];
            vec[1] = a[i + 1];
            vec[2] = a[i + 2];
            vec[3] = a[i + 3];
            fn(vec, vec, arg);
            a[i] = vec[0];
            a[i + 1] = vec[1];
            a[i + 2] = vec[2];
            a[i + 3] = vec[3];
        }
        return a;
    };
}();
const __TURBOPACK__default__export__ = vec4;
}}),
"[project]/node_modules/claygl/src/glmatrix/mat3.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
  * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */ __turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$common$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/glmatrix/common.js [app-client] (ecmascript)");
;
/**
 * @class 3x3 Matrix
 * @name mat3
 */ var mat3 = {};
/**
 * Creates a new identity mat3
 *
 * @returns {mat3} a new 3x3 matrix
 */ mat3.create = function() {
    var out = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$common$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GLMAT_ARRAY_TYPE"](9);
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 1;
    out[5] = 0;
    out[6] = 0;
    out[7] = 0;
    out[8] = 1;
    return out;
};
/**
 * Copies the upper-left 3x3 values into the given mat3.
 *
 * @param {mat3} out the receiving 3x3 matrix
 * @param {mat4} a   the source 4x4 matrix
 * @returns {mat3} out
 */ mat3.fromMat4 = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[4];
    out[4] = a[5];
    out[5] = a[6];
    out[6] = a[8];
    out[7] = a[9];
    out[8] = a[10];
    return out;
};
/**
 * Creates a new mat3 initialized with values from an existing matrix
 *
 * @param {mat3} a matrix to clone
 * @returns {mat3} a new 3x3 matrix
 */ mat3.clone = function(a) {
    var out = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$common$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GLMAT_ARRAY_TYPE"](9);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    return out;
};
/**
 * Copy the values from one mat3 to another
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the source matrix
 * @returns {mat3} out
 */ mat3.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    return out;
};
/**
 * Set a mat3 to the identity matrix
 *
 * @param {mat3} out the receiving matrix
 * @returns {mat3} out
 */ mat3.identity = function(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 1;
    out[5] = 0;
    out[6] = 0;
    out[7] = 0;
    out[8] = 1;
    return out;
};
/**
 * Transpose the values of a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the source matrix
 * @returns {mat3} out
 */ mat3.transpose = function(out, a) {
    // If we are transposing ourselves we can skip a few steps but have to cache some values
    if (out === a) {
        var a01 = a[1], a02 = a[2], a12 = a[5];
        out[1] = a[3];
        out[2] = a[6];
        out[3] = a01;
        out[5] = a[7];
        out[6] = a02;
        out[7] = a12;
    } else {
        out[0] = a[0];
        out[1] = a[3];
        out[2] = a[6];
        out[3] = a[1];
        out[4] = a[4];
        out[5] = a[7];
        out[6] = a[2];
        out[7] = a[5];
        out[8] = a[8];
    }
    return out;
};
/**
 * Inverts a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the source matrix
 * @returns {mat3} out
 */ mat3.invert = function(out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a10 = a[3], a11 = a[4], a12 = a[5], a20 = a[6], a21 = a[7], a22 = a[8], b01 = a22 * a11 - a12 * a21, b11 = -a22 * a10 + a12 * a20, b21 = a21 * a10 - a11 * a20, // Calculate the determinant
    det = a00 * b01 + a01 * b11 + a02 * b21;
    if (!det) {
        return null;
    }
    det = 1.0 / det;
    out[0] = b01 * det;
    out[1] = (-a22 * a01 + a02 * a21) * det;
    out[2] = (a12 * a01 - a02 * a11) * det;
    out[3] = b11 * det;
    out[4] = (a22 * a00 - a02 * a20) * det;
    out[5] = (-a12 * a00 + a02 * a10) * det;
    out[6] = b21 * det;
    out[7] = (-a21 * a00 + a01 * a20) * det;
    out[8] = (a11 * a00 - a01 * a10) * det;
    return out;
};
/**
 * Calculates the adjugate of a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the source matrix
 * @returns {mat3} out
 */ mat3.adjoint = function(out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a10 = a[3], a11 = a[4], a12 = a[5], a20 = a[6], a21 = a[7], a22 = a[8];
    out[0] = a11 * a22 - a12 * a21;
    out[1] = a02 * a21 - a01 * a22;
    out[2] = a01 * a12 - a02 * a11;
    out[3] = a12 * a20 - a10 * a22;
    out[4] = a00 * a22 - a02 * a20;
    out[5] = a02 * a10 - a00 * a12;
    out[6] = a10 * a21 - a11 * a20;
    out[7] = a01 * a20 - a00 * a21;
    out[8] = a00 * a11 - a01 * a10;
    return out;
};
/**
 * Calculates the determinant of a mat3
 *
 * @param {mat3} a the source matrix
 * @returns {Number} determinant of a
 */ mat3.determinant = function(a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a10 = a[3], a11 = a[4], a12 = a[5], a20 = a[6], a21 = a[7], a22 = a[8];
    return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);
};
/**
 * Multiplies two mat3's
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the first operand
 * @param {mat3} b the second operand
 * @returns {mat3} out
 */ mat3.multiply = function(out, a, b) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a10 = a[3], a11 = a[4], a12 = a[5], a20 = a[6], a21 = a[7], a22 = a[8], b00 = b[0], b01 = b[1], b02 = b[2], b10 = b[3], b11 = b[4], b12 = b[5], b20 = b[6], b21 = b[7], b22 = b[8];
    out[0] = b00 * a00 + b01 * a10 + b02 * a20;
    out[1] = b00 * a01 + b01 * a11 + b02 * a21;
    out[2] = b00 * a02 + b01 * a12 + b02 * a22;
    out[3] = b10 * a00 + b11 * a10 + b12 * a20;
    out[4] = b10 * a01 + b11 * a11 + b12 * a21;
    out[5] = b10 * a02 + b11 * a12 + b12 * a22;
    out[6] = b20 * a00 + b21 * a10 + b22 * a20;
    out[7] = b20 * a01 + b21 * a11 + b22 * a21;
    out[8] = b20 * a02 + b21 * a12 + b22 * a22;
    return out;
};
/**
 * Alias for {@link mat3.multiply}
 * @function
 */ mat3.mul = mat3.multiply;
/**
 * Translate a mat3 by the given vector
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the matrix to translate
 * @param {vec2} v vector to translate by
 * @returns {mat3} out
 */ mat3.translate = function(out, a, v) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a10 = a[3], a11 = a[4], a12 = a[5], a20 = a[6], a21 = a[7], a22 = a[8], x = v[0], y = v[1];
    out[0] = a00;
    out[1] = a01;
    out[2] = a02;
    out[3] = a10;
    out[4] = a11;
    out[5] = a12;
    out[6] = x * a00 + y * a10 + a20;
    out[7] = x * a01 + y * a11 + a21;
    out[8] = x * a02 + y * a12 + a22;
    return out;
};
/**
 * Rotates a mat3 by the given angle
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat3} out
 */ mat3.rotate = function(out, a, rad) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a10 = a[3], a11 = a[4], a12 = a[5], a20 = a[6], a21 = a[7], a22 = a[8], s = Math.sin(rad), c = Math.cos(rad);
    out[0] = c * a00 + s * a10;
    out[1] = c * a01 + s * a11;
    out[2] = c * a02 + s * a12;
    out[3] = c * a10 - s * a00;
    out[4] = c * a11 - s * a01;
    out[5] = c * a12 - s * a02;
    out[6] = a20;
    out[7] = a21;
    out[8] = a22;
    return out;
};
/**
 * Scales the mat3 by the dimensions in the given vec2
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the matrix to rotate
 * @param {vec2} v the vec2 to scale the matrix by
 * @returns {mat3} out
 **/ mat3.scale = function(out, a, v) {
    var x = v[0], y = v[1];
    out[0] = x * a[0];
    out[1] = x * a[1];
    out[2] = x * a[2];
    out[3] = y * a[3];
    out[4] = y * a[4];
    out[5] = y * a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    return out;
};
/**
 * Copies the values from a mat2d into a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {mat2d} a the matrix to copy
 * @returns {mat3} out
 **/ mat3.fromMat2d = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = 0;
    out[3] = a[2];
    out[4] = a[3];
    out[5] = 0;
    out[6] = a[4];
    out[7] = a[5];
    out[8] = 1;
    return out;
};
/**
* Calculates a 3x3 matrix from the given quaternion
*
* @param {mat3} out mat3 receiving operation result
* @param {quat} q Quaternion to create matrix from
*
* @returns {mat3} out
*/ mat3.fromQuat = function(out, q) {
    var x = q[0], y = q[1], z = q[2], w = q[3], x2 = x + x, y2 = y + y, z2 = z + z, xx = x * x2, yx = y * x2, yy = y * y2, zx = z * x2, zy = z * y2, zz = z * z2, wx = w * x2, wy = w * y2, wz = w * z2;
    out[0] = 1 - yy - zz;
    out[3] = yx - wz;
    out[6] = zx + wy;
    out[1] = yx + wz;
    out[4] = 1 - xx - zz;
    out[7] = zy - wx;
    out[2] = zx - wy;
    out[5] = zy + wx;
    out[8] = 1 - xx - yy;
    return out;
};
/**
* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix
*
* @param {mat3} out mat3 receiving operation result
* @param {mat4} a Mat4 to derive the normal matrix from
*
* @returns {mat3} out
*/ mat3.normalFromMat4 = function(out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3], a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7], a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11], a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15], b00 = a00 * a11 - a01 * a10, b01 = a00 * a12 - a02 * a10, b02 = a00 * a13 - a03 * a10, b03 = a01 * a12 - a02 * a11, b04 = a01 * a13 - a03 * a11, b05 = a02 * a13 - a03 * a12, b06 = a20 * a31 - a21 * a30, b07 = a20 * a32 - a22 * a30, b08 = a20 * a33 - a23 * a30, b09 = a21 * a32 - a22 * a31, b10 = a21 * a33 - a23 * a31, b11 = a22 * a33 - a23 * a32, // Calculate the determinant
    det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
    if (!det) {
        return null;
    }
    det = 1.0 / det;
    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
    out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
    out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
    out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
    out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
    out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
    out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
    out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
    out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
    return out;
};
/**
 * Returns Frobenius norm of a mat3
 *
 * @param {mat3} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */ mat3.frob = function(a) {
    return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2));
};
const __TURBOPACK__default__export__ = mat3;
}}),
"[project]/node_modules/claygl/src/glmatrix/quat.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
  * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */ __turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$common$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/glmatrix/common.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/glmatrix/vec3.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/glmatrix/vec4.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/glmatrix/mat3.js [app-client] (ecmascript)");
;
;
;
;
/**
 * @class Quaternion
 * @name quat
 */ var quat = {};
/**
 * Creates a new identity quat
 *
 * @returns {quat} a new quaternion
 */ quat.create = function() {
    var out = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$common$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GLMAT_ARRAY_TYPE"](4);
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    return out;
};
/**
 * Sets a quaternion to represent the shortest rotation from one
 * vector to another.
 *
 * Both vectors are assumed to be unit length.
 *
 * @param {quat} out the receiving quaternion.
 * @param {vec3} a the initial vector
 * @param {vec3} b the destination vector
 * @returns {quat} out
 */ quat.rotationTo = function() {
    var tmpvec3 = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].create();
    var xUnitVec3 = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].fromValues(1, 0, 0);
    var yUnitVec3 = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].fromValues(0, 1, 0);
    return function(out, a, b) {
        var dot = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].dot(a, b);
        if (dot < -0.999999) {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].cross(tmpvec3, xUnitVec3, a);
            if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].length(tmpvec3) < 0.000001) __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].cross(tmpvec3, yUnitVec3, a);
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].normalize(tmpvec3, tmpvec3);
            quat.setAxisAngle(out, tmpvec3, Math.PI);
            return out;
        } else if (dot > 0.999999) {
            out[0] = 0;
            out[1] = 0;
            out[2] = 0;
            out[3] = 1;
            return out;
        } else {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].cross(tmpvec3, a, b);
            out[0] = tmpvec3[0];
            out[1] = tmpvec3[1];
            out[2] = tmpvec3[2];
            out[3] = 1 + dot;
            return quat.normalize(out, out);
        }
    };
}();
/**
 * Sets the specified quaternion with values corresponding to the given
 * axes. Each axis is a vec3 and is expected to be unit length and
 * perpendicular to all other specified axes.
 *
 * @param {vec3} view  the vector representing the viewing direction
 * @param {vec3} right the vector representing the local "right" direction
 * @param {vec3} up    the vector representing the local "up" direction
 * @returns {quat} out
 */ quat.setAxes = function() {
    var matr = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].create();
    return function(out, view, right, up) {
        matr[0] = right[0];
        matr[3] = right[1];
        matr[6] = right[2];
        matr[1] = up[0];
        matr[4] = up[1];
        matr[7] = up[2];
        matr[2] = -view[0];
        matr[5] = -view[1];
        matr[8] = -view[2];
        return quat.normalize(out, quat.fromMat3(out, matr));
    };
}();
/**
 * Creates a new quat initialized with values from an existing quaternion
 *
 * @param {quat} a quaternion to clone
 * @returns {quat} a new quaternion
 * @function
 */ quat.clone = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].clone;
/**
 * Creates a new quat initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {quat} a new quaternion
 * @function
 */ quat.fromValues = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].fromValues;
/**
 * Copy the values from one quat to another
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the source quaternion
 * @returns {quat} out
 * @function
 */ quat.copy = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].copy;
/**
 * Set the components of a quat to the given values
 *
 * @param {quat} out the receiving quaternion
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {quat} out
 * @function
 */ quat.set = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].set;
/**
 * Set a quat to the identity quaternion
 *
 * @param {quat} out the receiving quaternion
 * @returns {quat} out
 */ quat.identity = function(out) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    return out;
};
/**
 * Sets a quat from the given angle and rotation axis,
 * then returns it.
 *
 * @param {quat} out the receiving quaternion
 * @param {vec3} axis the axis around which to rotate
 * @param {Number} rad the angle in radians
 * @returns {quat} out
 **/ quat.setAxisAngle = function(out, axis, rad) {
    rad = rad * 0.5;
    var s = Math.sin(rad);
    out[0] = s * axis[0];
    out[1] = s * axis[1];
    out[2] = s * axis[2];
    out[3] = Math.cos(rad);
    return out;
};
/**
 * Adds two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @returns {quat} out
 * @function
 */ quat.add = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].add;
/**
 * Multiplies two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @returns {quat} out
 */ quat.multiply = function(out, a, b) {
    var ax = a[0], ay = a[1], az = a[2], aw = a[3], bx = b[0], by = b[1], bz = b[2], bw = b[3];
    out[0] = ax * bw + aw * bx + ay * bz - az * by;
    out[1] = ay * bw + aw * by + az * bx - ax * bz;
    out[2] = az * bw + aw * bz + ax * by - ay * bx;
    out[3] = aw * bw - ax * bx - ay * by - az * bz;
    return out;
};
/**
 * Alias for {@link quat.multiply}
 * @function
 */ quat.mul = quat.multiply;
/**
 * Scales a quat by a scalar number
 *
 * @param {quat} out the receiving vector
 * @param {quat} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {quat} out
 * @function
 */ quat.scale = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].scale;
/**
 * Rotates a quaternion by the given angle about the X axis
 *
 * @param {quat} out quat receiving operation result
 * @param {quat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */ quat.rotateX = function(out, a, rad) {
    rad *= 0.5;
    var ax = a[0], ay = a[1], az = a[2], aw = a[3], bx = Math.sin(rad), bw = Math.cos(rad);
    out[0] = ax * bw + aw * bx;
    out[1] = ay * bw + az * bx;
    out[2] = az * bw - ay * bx;
    out[3] = aw * bw - ax * bx;
    return out;
};
/**
 * Rotates a quaternion by the given angle about the Y axis
 *
 * @param {quat} out quat receiving operation result
 * @param {quat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */ quat.rotateY = function(out, a, rad) {
    rad *= 0.5;
    var ax = a[0], ay = a[1], az = a[2], aw = a[3], by = Math.sin(rad), bw = Math.cos(rad);
    out[0] = ax * bw - az * by;
    out[1] = ay * bw + aw * by;
    out[2] = az * bw + ax * by;
    out[3] = aw * bw - ay * by;
    return out;
};
/**
 * Rotates a quaternion by the given angle about the Z axis
 *
 * @param {quat} out quat receiving operation result
 * @param {quat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */ quat.rotateZ = function(out, a, rad) {
    rad *= 0.5;
    var ax = a[0], ay = a[1], az = a[2], aw = a[3], bz = Math.sin(rad), bw = Math.cos(rad);
    out[0] = ax * bw + ay * bz;
    out[1] = ay * bw - ax * bz;
    out[2] = az * bw + aw * bz;
    out[3] = aw * bw - az * bz;
    return out;
};
/**
 * Calculates the W component of a quat from the X, Y, and Z components.
 * Assumes that quaternion is 1 unit in length.
 * Any existing W component will be ignored.
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quat to calculate W component of
 * @returns {quat} out
 */ quat.calculateW = function(out, a) {
    var x = a[0], y = a[1], z = a[2];
    out[0] = x;
    out[1] = y;
    out[2] = z;
    out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));
    return out;
};
/**
 * Calculates the dot product of two quat's
 *
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @returns {Number} dot product of a and b
 * @function
 */ quat.dot = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].dot;
/**
 * Performs a linear interpolation between two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {quat} out
 * @function
 */ quat.lerp = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].lerp;
/**
 * Performs a spherical linear interpolation between two quat
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {quat} out
 */ quat.slerp = function(out, a, b, t) {
    // benchmarks:
    //    http://jsperf.com/quaternion-slerp-implementations
    var ax = a[0], ay = a[1], az = a[2], aw = a[3], bx = b[0], by = b[1], bz = b[2], bw = b[3];
    var omega, cosom, sinom, scale0, scale1;
    // calc cosine
    cosom = ax * bx + ay * by + az * bz + aw * bw;
    // adjust signs (if necessary)
    if (cosom < 0.0) {
        cosom = -cosom;
        bx = -bx;
        by = -by;
        bz = -bz;
        bw = -bw;
    }
    // calculate coefficients
    if (1.0 - cosom > 0.000001) {
        // standard case (slerp)
        omega = Math.acos(cosom);
        sinom = Math.sin(omega);
        scale0 = Math.sin((1.0 - t) * omega) / sinom;
        scale1 = Math.sin(t * omega) / sinom;
    } else {
        // "from" and "to" quaternions are very close
        //  ... so we can do a linear interpolation
        scale0 = 1.0 - t;
        scale1 = t;
    }
    // calculate final values
    out[0] = scale0 * ax + scale1 * bx;
    out[1] = scale0 * ay + scale1 * by;
    out[2] = scale0 * az + scale1 * bz;
    out[3] = scale0 * aw + scale1 * bw;
    return out;
};
/**
 * Calculates the inverse of a quat
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quat to calculate inverse of
 * @returns {quat} out
 */ quat.invert = function(out, a) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3, invDot = dot ? 1.0 / dot : 0;
    // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0
    out[0] = -a0 * invDot;
    out[1] = -a1 * invDot;
    out[2] = -a2 * invDot;
    out[3] = a3 * invDot;
    return out;
};
/**
 * Calculates the conjugate of a quat
 * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quat to calculate conjugate of
 * @returns {quat} out
 */ quat.conjugate = function(out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    out[2] = -a[2];
    out[3] = a[3];
    return out;
};
/**
 * Calculates the length of a quat
 *
 * @param {quat} a vector to calculate length of
 * @returns {Number} length of a
 * @function
 */ quat.length = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].length;
/**
 * Alias for {@link quat.length}
 * @function
 */ quat.len = quat.length;
/**
 * Calculates the squared length of a quat
 *
 * @param {quat} a vector to calculate squared length of
 * @returns {Number} squared length of a
 * @function
 */ quat.squaredLength = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].squaredLength;
/**
 * Alias for {@link quat.squaredLength}
 * @function
 */ quat.sqrLen = quat.squaredLength;
/**
 * Normalize a quat
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quaternion to normalize
 * @returns {quat} out
 * @function
 */ quat.normalize = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].normalize;
/**
 * Creates a quaternion from the given 3x3 rotation matrix.
 *
 * NOTE: The resultant quaternion is not normalized, so you should be sure
 * to renormalize the quaternion yourself where necessary.
 *
 * @param {quat} out the receiving quaternion
 * @param {mat3} m rotation matrix
 * @returns {quat} out
 * @function
 */ quat.fromMat3 = function(out, m) {
    // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes
    // article "Quaternion Calculus and Fast Animation".
    var fTrace = m[0] + m[4] + m[8];
    var fRoot;
    if (fTrace > 0.0) {
        // |w| > 1/2, may as well choose w > 1/2
        fRoot = Math.sqrt(fTrace + 1.0); // 2w
        out[3] = 0.5 * fRoot;
        fRoot = 0.5 / fRoot; // 1/(4w)
        out[0] = (m[5] - m[7]) * fRoot;
        out[1] = (m[6] - m[2]) * fRoot;
        out[2] = (m[1] - m[3]) * fRoot;
    } else {
        // |w| <= 1/2
        var i = 0;
        if (m[4] > m[0]) i = 1;
        if (m[8] > m[i * 3 + i]) i = 2;
        var j = (i + 1) % 3;
        var k = (i + 2) % 3;
        fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);
        out[i] = 0.5 * fRoot;
        fRoot = 0.5 / fRoot;
        out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;
        out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;
        out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;
    }
    return out;
};
const __TURBOPACK__default__export__ = quat;
}}),
"[project]/node_modules/claygl/src/math/Matrix4.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/glmatrix/mat4.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/glmatrix/vec3.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$quat$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/glmatrix/quat.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/glmatrix/mat3.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/math/Vector3.js [app-client] (ecmascript)");
;
;
;
;
;
/**
 * @constructor
 * @alias clay.Matrix4
 */ var Matrix4 = function() {
    this._axisX = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
    this._axisY = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
    this._axisZ = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
    /**
     * Storage of Matrix4
     * @name array
     * @type {Float32Array}
     * @memberOf clay.Matrix4#
     */ this.array = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].create();
    /**
     * @name _dirty
     * @type {boolean}
     * @memberOf clay.Matrix4#
     */ this._dirty = true;
};
Matrix4.prototype = {
    constructor: Matrix4,
    /**
     * Set components from array
     * @param  {Float32Array|number[]} arr
     */ setArray: function(arr) {
        for(var i = 0; i < this.array.length; i++){
            this.array[i] = arr[i];
        }
        this._dirty = true;
        return this;
    },
    /**
     * Calculate the adjugate of self, in-place
     * @return {clay.Matrix4}
     */ adjoint: function() {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].adjoint(this.array, this.array);
        this._dirty = true;
        return this;
    },
    /**
     * Clone a new Matrix4
     * @return {clay.Matrix4}
     */ clone: function() {
        return new Matrix4().copy(this);
    },
    /**
     * Copy from b
     * @param  {clay.Matrix4} b
     * @return {clay.Matrix4}
     */ copy: function(a) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].copy(this.array, a.array);
        this._dirty = true;
        return this;
    },
    /**
     * Calculate matrix determinant
     * @return {number}
     */ determinant: function() {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].determinant(this.array);
    },
    /**
     * Set upper 3x3 part from quaternion
     * @param  {clay.Quaternion} q
     * @return {clay.Matrix4}
     */ fromQuat: function(q) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].fromQuat(this.array, q.array);
        this._dirty = true;
        return this;
    },
    /**
     * Set from a quaternion rotation and a vector translation
     * @param  {clay.Quaternion} q
     * @param  {clay.Vector3} v
     * @return {clay.Matrix4}
     */ fromRotationTranslation: function(q, v) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].fromRotationTranslation(this.array, q.array, v.array);
        this._dirty = true;
        return this;
    },
    /**
     * Set from Matrix2d, it is used when converting a 2d shape to 3d space.
     * In 3d space it is equivalent to ranslate on xy plane and rotate about z axis
     * @param  {clay.Matrix2d} m2d
     * @return {clay.Matrix4}
     */ fromMat2d: function(m2d) {
        Matrix4.fromMat2d(this, m2d);
        return this;
    },
    /**
     * Set from frustum bounds
     * @param  {number} left
     * @param  {number} right
     * @param  {number} bottom
     * @param  {number} top
     * @param  {number} near
     * @param  {number} far
     * @return {clay.Matrix4}
     */ frustum: function(left, right, bottom, top, near, far) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].frustum(this.array, left, right, bottom, top, near, far);
        this._dirty = true;
        return this;
    },
    /**
     * Set to a identity matrix
     * @return {clay.Matrix4}
     */ identity: function() {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].identity(this.array);
        this._dirty = true;
        return this;
    },
    /**
     * Invert self
     * @return {clay.Matrix4}
     */ invert: function() {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].invert(this.array, this.array);
        this._dirty = true;
        return this;
    },
    /**
     * Set as a matrix with the given eye position, focal point, and up axis
     * @param  {clay.Vector3} eye
     * @param  {clay.Vector3} center
     * @param  {clay.Vector3} up
     * @return {clay.Matrix4}
     */ lookAt: function(eye, center, up) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].lookAt(this.array, eye.array, center.array, up.array);
        this._dirty = true;
        return this;
    },
    /**
     * Alias for mutiply
     * @param  {clay.Matrix4} b
     * @return {clay.Matrix4}
     */ mul: function(b) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].mul(this.array, this.array, b.array);
        this._dirty = true;
        return this;
    },
    /**
     * Alias for multiplyLeft
     * @param  {clay.Matrix4} a
     * @return {clay.Matrix4}
     */ mulLeft: function(a) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].mul(this.array, a.array, this.array);
        this._dirty = true;
        return this;
    },
    /**
     * Multiply self and b
     * @param  {clay.Matrix4} b
     * @return {clay.Matrix4}
     */ multiply: function(b) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].multiply(this.array, this.array, b.array);
        this._dirty = true;
        return this;
    },
    /**
     * Multiply a and self, a is on the left
     * @param  {clay.Matrix3} a
     * @return {clay.Matrix3}
     */ multiplyLeft: function(a) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].multiply(this.array, a.array, this.array);
        this._dirty = true;
        return this;
    },
    /**
     * Set as a orthographic projection matrix
     * @param  {number} left
     * @param  {number} right
     * @param  {number} bottom
     * @param  {number} top
     * @param  {number} near
     * @param  {number} far
     * @return {clay.Matrix4}
     */ ortho: function(left, right, bottom, top, near, far) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].ortho(this.array, left, right, bottom, top, near, far);
        this._dirty = true;
        return this;
    },
    /**
     * Set as a perspective projection matrix
     * @param  {number} fovy
     * @param  {number} aspect
     * @param  {number} near
     * @param  {number} far
     * @return {clay.Matrix4}
     */ perspective: function(fovy, aspect, near, far) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].perspective(this.array, fovy, aspect, near, far);
        this._dirty = true;
        return this;
    },
    /**
     * Rotate self by rad about axis.
     * Equal to right-multiply a rotaion matrix
     * @param  {number}   rad
     * @param  {clay.Vector3} axis
     * @return {clay.Matrix4}
     */ rotate: function(rad, axis) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].rotate(this.array, this.array, rad, axis.array);
        this._dirty = true;
        return this;
    },
    /**
     * Rotate self by a given radian about X axis.
     * Equal to right-multiply a rotaion matrix
     * @param {number} rad
     * @return {clay.Matrix4}
     */ rotateX: function(rad) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].rotateX(this.array, this.array, rad);
        this._dirty = true;
        return this;
    },
    /**
     * Rotate self by a given radian about Y axis.
     * Equal to right-multiply a rotaion matrix
     * @param {number} rad
     * @return {clay.Matrix4}
     */ rotateY: function(rad) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].rotateY(this.array, this.array, rad);
        this._dirty = true;
        return this;
    },
    /**
     * Rotate self by a given radian about Z axis.
     * Equal to right-multiply a rotaion matrix
     * @param {number} rad
     * @return {clay.Matrix4}
     */ rotateZ: function(rad) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].rotateZ(this.array, this.array, rad);
        this._dirty = true;
        return this;
    },
    /**
     * Scale self by s
     * Equal to right-multiply a scale matrix
     * @param  {clay.Vector3}  s
     * @return {clay.Matrix4}
     */ scale: function(v) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].scale(this.array, this.array, v.array);
        this._dirty = true;
        return this;
    },
    /**
     * Translate self by v.
     * Equal to right-multiply a translate matrix
     * @param  {clay.Vector3}  v
     * @return {clay.Matrix4}
     */ translate: function(v) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].translate(this.array, this.array, v.array);
        this._dirty = true;
        return this;
    },
    /**
     * Transpose self, in-place.
     * @return {clay.Matrix2}
     */ transpose: function() {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].transpose(this.array, this.array);
        this._dirty = true;
        return this;
    },
    /**
     * Decompose a matrix to SRT
     * @param {clay.Vector3} [scale]
     * @param {clay.Quaternion} rotation
     * @param {clay.Vector} position
     * @see http://msdn.microsoft.com/en-us/library/microsoft.xna.framework.matrix.decompose.aspx
     */ decomposeMatrix: function() {
        var x = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].create();
        var y = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].create();
        var z = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].create();
        var m3 = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].create();
        return function(scale, rotation, position) {
            var el = this.array;
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].set(x, el[0], el[1], el[2]);
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].set(y, el[4], el[5], el[6]);
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].set(z, el[8], el[9], el[10]);
            var sx = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].length(x);
            var sy = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].length(y);
            var sz = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].length(z);
            // if determine is negative, we need to invert one scale
            var det = this.determinant();
            if (det < 0) {
                sx = -sx;
            }
            if (scale) {
                scale.set(sx, sy, sz);
            }
            position.set(el[12], el[13], el[14]);
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].fromMat4(m3, el);
            // Not like mat4, mat3 in glmatrix seems to be row-based
            // Seems fixed in gl-matrix 2.2.2
            // https://github.com/toji/gl-matrix/issues/114
            // mat3.transpose(m3, m3);
            m3[0] /= sx;
            m3[1] /= sx;
            m3[2] /= sx;
            m3[3] /= sy;
            m3[4] /= sy;
            m3[5] /= sy;
            m3[6] /= sz;
            m3[7] /= sz;
            m3[8] /= sz;
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$quat$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].fromMat3(rotation.array, m3);
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$quat$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].normalize(rotation.array, rotation.array);
            rotation._dirty = true;
            position._dirty = true;
        };
    }(),
    toString: function() {
        return '[' + Array.prototype.join.call(this.array, ',') + ']';
    },
    toArray: function() {
        return Array.prototype.slice.call(this.array);
    }
};
var defineProperty = Object.defineProperty;
if (defineProperty) {
    var proto = Matrix4.prototype;
    /**
     * Z Axis of local transform
     * @name z
     * @type {clay.Vector3}
     * @memberOf clay.Matrix4
     * @instance
     */ defineProperty(proto, 'z', {
        get: function() {
            var el = this.array;
            this._axisZ.set(el[8], el[9], el[10]);
            return this._axisZ;
        },
        set: function(v) {
            // TODO Here has a problem
            // If only set an item of vector will not work
            var el = this.array;
            v = v.array;
            el[8] = v[0];
            el[9] = v[1];
            el[10] = v[2];
            this._dirty = true;
        }
    });
    /**
     * Y Axis of local transform
     * @name y
     * @type {clay.Vector3}
     * @memberOf clay.Matrix4
     * @instance
     */ defineProperty(proto, 'y', {
        get: function() {
            var el = this.array;
            this._axisY.set(el[4], el[5], el[6]);
            return this._axisY;
        },
        set: function(v) {
            var el = this.array;
            v = v.array;
            el[4] = v[0];
            el[5] = v[1];
            el[6] = v[2];
            this._dirty = true;
        }
    });
    /**
     * X Axis of local transform
     * @name x
     * @type {clay.Vector3}
     * @memberOf clay.Matrix4
     * @instance
     */ defineProperty(proto, 'x', {
        get: function() {
            var el = this.array;
            this._axisX.set(el[0], el[1], el[2]);
            return this._axisX;
        },
        set: function(v) {
            var el = this.array;
            v = v.array;
            el[0] = v[0];
            el[1] = v[1];
            el[2] = v[2];
            this._dirty = true;
        }
    });
}
/**
 * @param  {clay.Matrix4} out
 * @param  {clay.Matrix4} a
 * @return {clay.Matrix4}
 */ Matrix4.adjoint = function(out, a) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].adjoint(out.array, a.array);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Matrix4} out
 * @param  {clay.Matrix4} a
 * @return {clay.Matrix4}
 */ Matrix4.copy = function(out, a) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].copy(out.array, a.array);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Matrix4} a
 * @return {number}
 */ Matrix4.determinant = function(a) {
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].determinant(a.array);
};
/**
 * @param  {clay.Matrix4} out
 * @return {clay.Matrix4}
 */ Matrix4.identity = function(out) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].identity(out.array);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Matrix4} out
 * @param  {number}  left
 * @param  {number}  right
 * @param  {number}  bottom
 * @param  {number}  top
 * @param  {number}  near
 * @param  {number}  far
 * @return {clay.Matrix4}
 */ Matrix4.ortho = function(out, left, right, bottom, top, near, far) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].ortho(out.array, left, right, bottom, top, near, far);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Matrix4} out
 * @param  {number}  fovy
 * @param  {number}  aspect
 * @param  {number}  near
 * @param  {number}  far
 * @return {clay.Matrix4}
 */ Matrix4.perspective = function(out, fovy, aspect, near, far) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].perspective(out.array, fovy, aspect, near, far);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Matrix4} out
 * @param  {clay.Vector3} eye
 * @param  {clay.Vector3} center
 * @param  {clay.Vector3} up
 * @return {clay.Matrix4}
 */ Matrix4.lookAt = function(out, eye, center, up) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].lookAt(out.array, eye.array, center.array, up.array);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Matrix4} out
 * @param  {clay.Matrix4} a
 * @return {clay.Matrix4}
 */ Matrix4.invert = function(out, a) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].invert(out.array, a.array);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Matrix4} out
 * @param  {clay.Matrix4} a
 * @param  {clay.Matrix4} b
 * @return {clay.Matrix4}
 */ Matrix4.mul = function(out, a, b) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].mul(out.array, a.array, b.array);
    out._dirty = true;
    return out;
};
/**
 * @function
 * @param  {clay.Matrix4} out
 * @param  {clay.Matrix4} a
 * @param  {clay.Matrix4} b
 * @return {clay.Matrix4}
 */ Matrix4.multiply = Matrix4.mul;
/**
 * @param  {clay.Matrix4}    out
 * @param  {clay.Quaternion} q
 * @return {clay.Matrix4}
 */ Matrix4.fromQuat = function(out, q) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].fromQuat(out.array, q.array);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Matrix4}    out
 * @param  {clay.Quaternion} q
 * @param  {clay.Vector3}    v
 * @return {clay.Matrix4}
 */ Matrix4.fromRotationTranslation = function(out, q, v) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].fromRotationTranslation(out.array, q.array, v.array);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Matrix4} m4
 * @param  {clay.Matrix2d} m2d
 * @return {clay.Matrix4}
 */ Matrix4.fromMat2d = function(m4, m2d) {
    m4._dirty = true;
    var m2d = m2d.array;
    var m4 = m4.array;
    m4[0] = m2d[0];
    m4[4] = m2d[2];
    m4[12] = m2d[4];
    m4[1] = m2d[1];
    m4[5] = m2d[3];
    m4[13] = m2d[5];
    return m4;
};
/**
 * @param  {clay.Matrix4} out
 * @param  {clay.Matrix4} a
 * @param  {number}  rad
 * @param  {clay.Vector3} axis
 * @return {clay.Matrix4}
 */ Matrix4.rotate = function(out, a, rad, axis) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].rotate(out.array, a.array, rad, axis.array);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Matrix4} out
 * @param  {clay.Matrix4} a
 * @param  {number}  rad
 * @return {clay.Matrix4}
 */ Matrix4.rotateX = function(out, a, rad) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].rotateX(out.array, a.array, rad);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Matrix4} out
 * @param  {clay.Matrix4} a
 * @param  {number}  rad
 * @return {clay.Matrix4}
 */ Matrix4.rotateY = function(out, a, rad) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].rotateY(out.array, a.array, rad);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Matrix4} out
 * @param  {clay.Matrix4} a
 * @param  {number}  rad
 * @return {clay.Matrix4}
 */ Matrix4.rotateZ = function(out, a, rad) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].rotateZ(out.array, a.array, rad);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Matrix4} out
 * @param  {clay.Matrix4} a
 * @param  {clay.Vector3} v
 * @return {clay.Matrix4}
 */ Matrix4.scale = function(out, a, v) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].scale(out.array, a.array, v.array);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Matrix4} out
 * @param  {clay.Matrix4} a
 * @return {clay.Matrix4}
 */ Matrix4.transpose = function(out, a) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].transpose(out.array, a.array);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Matrix4} out
 * @param  {clay.Matrix4} a
 * @param  {clay.Vector3} v
 * @return {clay.Matrix4}
 */ Matrix4.translate = function(out, a, v) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].translate(out.array, a.array, v.array);
    out._dirty = true;
    return out;
};
const __TURBOPACK__default__export__ = Matrix4;
}}),
"[project]/node_modules/claygl/src/math/Quaternion.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$quat$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/glmatrix/quat.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/glmatrix/mat3.js [app-client] (ecmascript)");
;
;
/**
 * @constructor
 * @alias clay.Quaternion
 * @param {number} x
 * @param {number} y
 * @param {number} z
 * @param {number} w
 */ var Quaternion = function(x, y, z, w) {
    x = x || 0;
    y = y || 0;
    z = z || 0;
    w = w === undefined ? 1 : w;
    /**
     * Storage of Quaternion, read and write of x, y, z, w will change the values in array
     * All methods also operate on the array instead of x, y, z, w components
     * @name array
     * @type {Float32Array}
     * @memberOf clay.Quaternion#
     */ this.array = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$quat$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].fromValues(x, y, z, w);
    /**
     * Dirty flag is used by the Node to determine
     * if the matrix is updated to latest
     * @name _dirty
     * @type {boolean}
     * @memberOf clay.Quaternion#
     */ this._dirty = true;
};
Quaternion.prototype = {
    constructor: Quaternion,
    /**
     * Add b to self
     * @param  {clay.Quaternion} b
     * @return {clay.Quaternion}
     */ add: function(b) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$quat$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].add(this.array, this.array, b.array);
        this._dirty = true;
        return this;
    },
    /**
     * Calculate the w component from x, y, z component
     * @return {clay.Quaternion}
     */ calculateW: function() {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$quat$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].calculateW(this.array, this.array);
        this._dirty = true;
        return this;
    },
    /**
     * Set x, y and z components
     * @param  {number}  x
     * @param  {number}  y
     * @param  {number}  z
     * @param  {number}  w
     * @return {clay.Quaternion}
     */ set: function(x, y, z, w) {
        this.array[0] = x;
        this.array[1] = y;
        this.array[2] = z;
        this.array[3] = w;
        this._dirty = true;
        return this;
    },
    /**
     * Set x, y, z and w components from array
     * @param  {Float32Array|number[]} arr
     * @return {clay.Quaternion}
     */ setArray: function(arr) {
        this.array[0] = arr[0];
        this.array[1] = arr[1];
        this.array[2] = arr[2];
        this.array[3] = arr[3];
        this._dirty = true;
        return this;
    },
    /**
     * Clone a new Quaternion
     * @return {clay.Quaternion}
     */ clone: function() {
        return new Quaternion(this.x, this.y, this.z, this.w);
    },
    /**
     * Calculates the conjugate of self If the quaternion is normalized,
     * this function is faster than invert and produces the same result.
     *
     * @return {clay.Quaternion}
     */ conjugate: function() {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$quat$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].conjugate(this.array, this.array);
        this._dirty = true;
        return this;
    },
    /**
     * Copy from b
     * @param  {clay.Quaternion} b
     * @return {clay.Quaternion}
     */ copy: function(b) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$quat$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].copy(this.array, b.array);
        this._dirty = true;
        return this;
    },
    /**
     * Dot product of self and b
     * @param  {clay.Quaternion} b
     * @return {number}
     */ dot: function(b) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$quat$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].dot(this.array, b.array);
    },
    /**
     * Set from the given 3x3 rotation matrix
     * @param  {clay.Matrix3} m
     * @return {clay.Quaternion}
     */ fromMat3: function(m) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$quat$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].fromMat3(this.array, m.array);
        this._dirty = true;
        return this;
    },
    /**
     * Set from the given 4x4 rotation matrix
     * The 4th column and 4th row will be droped
     * @param  {clay.Matrix4} m
     * @return {clay.Quaternion}
     */ fromMat4: function() {
        var m3 = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].create();
        return function(m) {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].fromMat4(m3, m.array);
            // TODO Not like mat4, mat3 in glmatrix seems to be row-based
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].transpose(m3, m3);
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$quat$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].fromMat3(this.array, m3);
            this._dirty = true;
            return this;
        };
    }(),
    /**
     * Set to identity quaternion
     * @return {clay.Quaternion}
     */ identity: function() {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$quat$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].identity(this.array);
        this._dirty = true;
        return this;
    },
    /**
     * Invert self
     * @return {clay.Quaternion}
     */ invert: function() {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$quat$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].invert(this.array, this.array);
        this._dirty = true;
        return this;
    },
    /**
     * Alias of length
     * @return {number}
     */ len: function() {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$quat$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].len(this.array);
    },
    /**
     * Calculate the length
     * @return {number}
     */ length: function() {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$quat$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].length(this.array);
    },
    /**
     * Linear interpolation between a and b
     * @param  {clay.Quaternion} a
     * @param  {clay.Quaternion} b
     * @param  {number}  t
     * @return {clay.Quaternion}
     */ lerp: function(a, b, t) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$quat$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].lerp(this.array, a.array, b.array, t);
        this._dirty = true;
        return this;
    },
    /**
     * Alias for multiply
     * @param  {clay.Quaternion} b
     * @return {clay.Quaternion}
     */ mul: function(b) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$quat$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].mul(this.array, this.array, b.array);
        this._dirty = true;
        return this;
    },
    /**
     * Alias for multiplyLeft
     * @param  {clay.Quaternion} a
     * @return {clay.Quaternion}
     */ mulLeft: function(a) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$quat$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].multiply(this.array, a.array, this.array);
        this._dirty = true;
        return this;
    },
    /**
     * Mutiply self and b
     * @param  {clay.Quaternion} b
     * @return {clay.Quaternion}
     */ multiply: function(b) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$quat$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].multiply(this.array, this.array, b.array);
        this._dirty = true;
        return this;
    },
    /**
     * Mutiply a and self
     * Quaternion mutiply is not commutative, so the result of mutiplyLeft is different with multiply.
     * @param  {clay.Quaternion} a
     * @return {clay.Quaternion}
     */ multiplyLeft: function(a) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$quat$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].multiply(this.array, a.array, this.array);
        this._dirty = true;
        return this;
    },
    /**
     * Normalize self
     * @return {clay.Quaternion}
     */ normalize: function() {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$quat$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].normalize(this.array, this.array);
        this._dirty = true;
        return this;
    },
    /**
     * Rotate self by a given radian about X axis
     * @param {number} rad
     * @return {clay.Quaternion}
     */ rotateX: function(rad) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$quat$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].rotateX(this.array, this.array, rad);
        this._dirty = true;
        return this;
    },
    /**
     * Rotate self by a given radian about Y axis
     * @param {number} rad
     * @return {clay.Quaternion}
     */ rotateY: function(rad) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$quat$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].rotateY(this.array, this.array, rad);
        this._dirty = true;
        return this;
    },
    /**
     * Rotate self by a given radian about Z axis
     * @param {number} rad
     * @return {clay.Quaternion}
     */ rotateZ: function(rad) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$quat$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].rotateZ(this.array, this.array, rad);
        this._dirty = true;
        return this;
    },
    /**
     * Sets self to represent the shortest rotation from Vector3 a to Vector3 b.
     * a and b needs to be normalized
     * @param  {clay.Vector3} a
     * @param  {clay.Vector3} b
     * @return {clay.Quaternion}
     */ rotationTo: function(a, b) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$quat$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].rotationTo(this.array, a.array, b.array);
        this._dirty = true;
        return this;
    },
    /**
     * Sets self with values corresponding to the given axes
     * @param {clay.Vector3} view
     * @param {clay.Vector3} right
     * @param {clay.Vector3} up
     * @return {clay.Quaternion}
     */ setAxes: function(view, right, up) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$quat$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].setAxes(this.array, view.array, right.array, up.array);
        this._dirty = true;
        return this;
    },
    /**
     * Sets self with a rotation axis and rotation angle
     * @param {clay.Vector3} axis
     * @param {number} rad
     * @return {clay.Quaternion}
     */ setAxisAngle: function(axis, rad) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$quat$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].setAxisAngle(this.array, axis.array, rad);
        this._dirty = true;
        return this;
    },
    /**
     * Perform spherical linear interpolation between a and b
     * @param  {clay.Quaternion} a
     * @param  {clay.Quaternion} b
     * @param  {number} t
     * @return {clay.Quaternion}
     */ slerp: function(a, b, t) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$quat$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].slerp(this.array, a.array, b.array, t);
        this._dirty = true;
        return this;
    },
    /**
     * Alias for squaredLength
     * @return {number}
     */ sqrLen: function() {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$quat$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].sqrLen(this.array);
    },
    /**
     * Squared length of self
     * @return {number}
     */ squaredLength: function() {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$quat$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].squaredLength(this.array);
    },
    /**
     * Set from euler
     * @param {clay.Vector3} v
     * @param {String} order
     */ fromEuler: function(v, order) {
        return Quaternion.fromEuler(this, v, order);
    },
    toString: function() {
        return '[' + Array.prototype.join.call(this.array, ',') + ']';
    },
    toArray: function() {
        return Array.prototype.slice.call(this.array);
    }
};
var defineProperty = Object.defineProperty;
// Getter and Setter
if (defineProperty) {
    var proto = Quaternion.prototype;
    /**
     * @name x
     * @type {number}
     * @memberOf clay.Quaternion
     * @instance
     */ defineProperty(proto, 'x', {
        get: function() {
            return this.array[0];
        },
        set: function(value) {
            this.array[0] = value;
            this._dirty = true;
        }
    });
    /**
     * @name y
     * @type {number}
     * @memberOf clay.Quaternion
     * @instance
     */ defineProperty(proto, 'y', {
        get: function() {
            return this.array[1];
        },
        set: function(value) {
            this.array[1] = value;
            this._dirty = true;
        }
    });
    /**
     * @name z
     * @type {number}
     * @memberOf clay.Quaternion
     * @instance
     */ defineProperty(proto, 'z', {
        get: function() {
            return this.array[2];
        },
        set: function(value) {
            this.array[2] = value;
            this._dirty = true;
        }
    });
    /**
     * @name w
     * @type {number}
     * @memberOf clay.Quaternion
     * @instance
     */ defineProperty(proto, 'w', {
        get: function() {
            return this.array[3];
        },
        set: function(value) {
            this.array[3] = value;
            this._dirty = true;
        }
    });
}
// Supply methods that are not in place
/**
 * @param  {clay.Quaternion} out
 * @param  {clay.Quaternion} a
 * @param  {clay.Quaternion} b
 * @return {clay.Quaternion}
 */ Quaternion.add = function(out, a, b) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$quat$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].add(out.array, a.array, b.array);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Quaternion} out
 * @param  {number}     x
 * @param  {number}     y
 * @param  {number}     z
 * @param  {number}     w
 * @return {clay.Quaternion}
 */ Quaternion.set = function(out, x, y, z, w) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$quat$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].set(out.array, x, y, z, w);
    out._dirty = true;
};
/**
 * @param  {clay.Quaternion} out
 * @param  {clay.Quaternion} b
 * @return {clay.Quaternion}
 */ Quaternion.copy = function(out, b) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$quat$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].copy(out.array, b.array);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Quaternion} out
 * @param  {clay.Quaternion} a
 * @return {clay.Quaternion}
 */ Quaternion.calculateW = function(out, a) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$quat$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].calculateW(out.array, a.array);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Quaternion} out
 * @param  {clay.Quaternion} a
 * @return {clay.Quaternion}
 */ Quaternion.conjugate = function(out, a) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$quat$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].conjugate(out.array, a.array);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Quaternion} out
 * @return {clay.Quaternion}
 */ Quaternion.identity = function(out) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$quat$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].identity(out.array);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Quaternion} out
 * @param  {clay.Quaternion} a
 * @return {clay.Quaternion}
 */ Quaternion.invert = function(out, a) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$quat$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].invert(out.array, a.array);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Quaternion} a
 * @param  {clay.Quaternion} b
 * @return {number}
 */ Quaternion.dot = function(a, b) {
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$quat$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].dot(a.array, b.array);
};
/**
 * @param  {clay.Quaternion} a
 * @return {number}
 */ Quaternion.len = function(a) {
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$quat$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].length(a.array);
};
// Quaternion.length = Quaternion.len;
/**
 * @param  {clay.Quaternion} out
 * @param  {clay.Quaternion} a
 * @param  {clay.Quaternion} b
 * @param  {number}     t
 * @return {clay.Quaternion}
 */ Quaternion.lerp = function(out, a, b, t) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$quat$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].lerp(out.array, a.array, b.array, t);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Quaternion} out
 * @param  {clay.Quaternion} a
 * @param  {clay.Quaternion} b
 * @param  {number}     t
 * @return {clay.Quaternion}
 */ Quaternion.slerp = function(out, a, b, t) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$quat$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].slerp(out.array, a.array, b.array, t);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Quaternion} out
 * @param  {clay.Quaternion} a
 * @param  {clay.Quaternion} b
 * @return {clay.Quaternion}
 */ Quaternion.mul = function(out, a, b) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$quat$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].multiply(out.array, a.array, b.array);
    out._dirty = true;
    return out;
};
/**
 * @function
 * @param  {clay.Quaternion} out
 * @param  {clay.Quaternion} a
 * @param  {clay.Quaternion} b
 * @return {clay.Quaternion}
 */ Quaternion.multiply = Quaternion.mul;
/**
 * @param  {clay.Quaternion} out
 * @param  {clay.Quaternion} a
 * @param  {number}     rad
 * @return {clay.Quaternion}
 */ Quaternion.rotateX = function(out, a, rad) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$quat$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].rotateX(out.array, a.array, rad);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Quaternion} out
 * @param  {clay.Quaternion} a
 * @param  {number}     rad
 * @return {clay.Quaternion}
 */ Quaternion.rotateY = function(out, a, rad) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$quat$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].rotateY(out.array, a.array, rad);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Quaternion} out
 * @param  {clay.Quaternion} a
 * @param  {number}     rad
 * @return {clay.Quaternion}
 */ Quaternion.rotateZ = function(out, a, rad) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$quat$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].rotateZ(out.array, a.array, rad);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Quaternion} out
 * @param  {clay.Vector3}    axis
 * @param  {number}     rad
 * @return {clay.Quaternion}
 */ Quaternion.setAxisAngle = function(out, axis, rad) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$quat$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].setAxisAngle(out.array, axis.array, rad);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Quaternion} out
 * @param  {clay.Quaternion} a
 * @return {clay.Quaternion}
 */ Quaternion.normalize = function(out, a) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$quat$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].normalize(out.array, a.array);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Quaternion} a
 * @return {number}
 */ Quaternion.sqrLen = function(a) {
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$quat$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].sqrLen(a.array);
};
/**
 * @function
 * @param  {clay.Quaternion} a
 * @return {number}
 */ Quaternion.squaredLength = Quaternion.sqrLen;
/**
 * @param  {clay.Quaternion} out
 * @param  {clay.Matrix3}    m
 * @return {clay.Quaternion}
 */ Quaternion.fromMat3 = function(out, m) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$quat$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].fromMat3(out.array, m.array);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Quaternion} out
 * @param  {clay.Vector3}    view
 * @param  {clay.Vector3}    right
 * @param  {clay.Vector3}    up
 * @return {clay.Quaternion}
 */ Quaternion.setAxes = function(out, view, right, up) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$quat$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].setAxes(out.array, view.array, right.array, up.array);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Quaternion} out
 * @param  {clay.Vector3}    a
 * @param  {clay.Vector3}    b
 * @return {clay.Quaternion}
 */ Quaternion.rotationTo = function(out, a, b) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$quat$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].rotationTo(out.array, a.array, b.array);
    out._dirty = true;
    return out;
};
/**
 * Set quaternion from euler
 * @param {clay.Quaternion} out
 * @param {clay.Vector3} v
 * @param {String} order
 */ Quaternion.fromEuler = function(out, v, order) {
    out._dirty = true;
    v = v.array;
    var target = out.array;
    var c1 = Math.cos(v[0] / 2);
    var c2 = Math.cos(v[1] / 2);
    var c3 = Math.cos(v[2] / 2);
    var s1 = Math.sin(v[0] / 2);
    var s2 = Math.sin(v[1] / 2);
    var s3 = Math.sin(v[2] / 2);
    var order = (order || 'XYZ').toUpperCase();
    // http://www.mathworks.com/matlabcentral/fileexchange/
    //  20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/
    //  content/SpinCalc.m
    switch(order){
        case 'XYZ':
            target[0] = s1 * c2 * c3 + c1 * s2 * s3;
            target[1] = c1 * s2 * c3 - s1 * c2 * s3;
            target[2] = c1 * c2 * s3 + s1 * s2 * c3;
            target[3] = c1 * c2 * c3 - s1 * s2 * s3;
            break;
        case 'YXZ':
            target[0] = s1 * c2 * c3 + c1 * s2 * s3;
            target[1] = c1 * s2 * c3 - s1 * c2 * s3;
            target[2] = c1 * c2 * s3 - s1 * s2 * c3;
            target[3] = c1 * c2 * c3 + s1 * s2 * s3;
            break;
        case 'ZXY':
            target[0] = s1 * c2 * c3 - c1 * s2 * s3;
            target[1] = c1 * s2 * c3 + s1 * c2 * s3;
            target[2] = c1 * c2 * s3 + s1 * s2 * c3;
            target[3] = c1 * c2 * c3 - s1 * s2 * s3;
            break;
        case 'ZYX':
            target[0] = s1 * c2 * c3 - c1 * s2 * s3;
            target[1] = c1 * s2 * c3 + s1 * c2 * s3;
            target[2] = c1 * c2 * s3 - s1 * s2 * c3;
            target[3] = c1 * c2 * c3 + s1 * s2 * s3;
            break;
        case 'YZX':
            target[0] = s1 * c2 * c3 + c1 * s2 * s3;
            target[1] = c1 * s2 * c3 + s1 * c2 * s3;
            target[2] = c1 * c2 * s3 - s1 * s2 * c3;
            target[3] = c1 * c2 * c3 - s1 * s2 * s3;
            break;
        case 'XZY':
            target[0] = s1 * c2 * c3 - c1 * s2 * s3;
            target[1] = c1 * s2 * c3 - s1 * c2 * s3;
            target[2] = c1 * c2 * s3 + s1 * s2 * c3;
            target[3] = c1 * c2 * c3 + s1 * s2 * s3;
            break;
    }
};
const __TURBOPACK__default__export__ = Quaternion;
}}),
"[project]/node_modules/claygl/src/math/BoundingBox.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/math/Vector3.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/glmatrix/vec3.js [app-client] (ecmascript)");
;
;
var vec3Set = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].set;
var vec3Copy = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].copy;
/**
 * Axis aligned bounding box
 * @constructor
 * @alias clay.BoundingBox
 * @param {clay.Vector3} [min]
 * @param {clay.Vector3} [max]
 */ var BoundingBox = function(min, max) {
    /**
     * Minimum coords of bounding box
     * @type {clay.Vector3}
     */ this.min = min || new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](Infinity, Infinity, Infinity);
    /**
     * Maximum coords of bounding box
     * @type {clay.Vector3}
     */ this.max = max || new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](-Infinity, -Infinity, -Infinity);
    this.vertices = null;
};
BoundingBox.prototype = {
    constructor: BoundingBox,
    /**
     * Update min and max coords from a vertices array
     * @param  {array} vertices
     */ updateFromVertices: function(vertices) {
        if (vertices.length > 0) {
            var min = this.min;
            var max = this.max;
            var minArr = min.array;
            var maxArr = max.array;
            vec3Copy(minArr, vertices[0]);
            vec3Copy(maxArr, vertices[0]);
            for(var i = 1; i < vertices.length; i++){
                var vertex = vertices[i];
                if (vertex[0] < minArr[0]) {
                    minArr[0] = vertex[0];
                }
                if (vertex[1] < minArr[1]) {
                    minArr[1] = vertex[1];
                }
                if (vertex[2] < minArr[2]) {
                    minArr[2] = vertex[2];
                }
                if (vertex[0] > maxArr[0]) {
                    maxArr[0] = vertex[0];
                }
                if (vertex[1] > maxArr[1]) {
                    maxArr[1] = vertex[1];
                }
                if (vertex[2] > maxArr[2]) {
                    maxArr[2] = vertex[2];
                }
            }
            min._dirty = true;
            max._dirty = true;
        }
    },
    /**
     * Union operation with another bounding box
     * @param  {clay.BoundingBox} bbox
     */ union: function(bbox) {
        var min = this.min;
        var max = this.max;
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].min(min.array, min.array, bbox.min.array);
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].max(max.array, max.array, bbox.max.array);
        min._dirty = true;
        max._dirty = true;
        return this;
    },
    /**
     * Intersection operation with another bounding box
     * @param  {clay.BoundingBox} bbox
     */ intersection: function(bbox) {
        var min = this.min;
        var max = this.max;
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].max(min.array, min.array, bbox.min.array);
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].min(max.array, max.array, bbox.max.array);
        min._dirty = true;
        max._dirty = true;
        return this;
    },
    /**
     * If intersect with another bounding box
     * @param  {clay.BoundingBox} bbox
     * @return {boolean}
     */ intersectBoundingBox: function(bbox) {
        var _min = this.min.array;
        var _max = this.max.array;
        var _min2 = bbox.min.array;
        var _max2 = bbox.max.array;
        return !(_min[0] > _max2[0] || _min[1] > _max2[1] || _min[2] > _max2[2] || _max[0] < _min2[0] || _max[1] < _min2[1] || _max[2] < _min2[2]);
    },
    /**
     * If contain another bounding box entirely
     * @param  {clay.BoundingBox} bbox
     * @return {boolean}
     */ containBoundingBox: function(bbox) {
        var _min = this.min.array;
        var _max = this.max.array;
        var _min2 = bbox.min.array;
        var _max2 = bbox.max.array;
        return _min[0] <= _min2[0] && _min[1] <= _min2[1] && _min[2] <= _min2[2] && _max[0] >= _max2[0] && _max[1] >= _max2[1] && _max[2] >= _max2[2];
    },
    /**
     * If contain point entirely
     * @param  {clay.Vector3} point
     * @return {boolean}
     */ containPoint: function(p) {
        var _min = this.min.array;
        var _max = this.max.array;
        var _p = p.array;
        return _min[0] <= _p[0] && _min[1] <= _p[1] && _min[2] <= _p[2] && _max[0] >= _p[0] && _max[1] >= _p[1] && _max[2] >= _p[2];
    },
    /**
     * If bounding box is finite
     */ isFinite: function() {
        var _min = this.min.array;
        var _max = this.max.array;
        return isFinite(_min[0]) && isFinite(_min[1]) && isFinite(_min[2]) && isFinite(_max[0]) && isFinite(_max[1]) && isFinite(_max[2]);
    },
    /**
     * Apply an affine transform matrix to the bounding box
     * @param  {clay.Matrix4} matrix
     */ applyTransform: function(matrix) {
        this.transformFrom(this, matrix);
    },
    /**
     * Get from another bounding box and an affine transform matrix.
     * @param {clay.BoundingBox} source
     * @param {clay.Matrix4} matrix
     */ transformFrom: function() {
        // http://dev.theomader.com/transform-bounding-boxes/
        var xa = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].create();
        var xb = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].create();
        var ya = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].create();
        var yb = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].create();
        var za = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].create();
        var zb = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].create();
        return function(source, matrix) {
            var min = source.min.array;
            var max = source.max.array;
            var m = matrix.array;
            xa[0] = m[0] * min[0];
            xa[1] = m[1] * min[0];
            xa[2] = m[2] * min[0];
            xb[0] = m[0] * max[0];
            xb[1] = m[1] * max[0];
            xb[2] = m[2] * max[0];
            ya[0] = m[4] * min[1];
            ya[1] = m[5] * min[1];
            ya[2] = m[6] * min[1];
            yb[0] = m[4] * max[1];
            yb[1] = m[5] * max[1];
            yb[2] = m[6] * max[1];
            za[0] = m[8] * min[2];
            za[1] = m[9] * min[2];
            za[2] = m[10] * min[2];
            zb[0] = m[8] * max[2];
            zb[1] = m[9] * max[2];
            zb[2] = m[10] * max[2];
            min = this.min.array;
            max = this.max.array;
            min[0] = Math.min(xa[0], xb[0]) + Math.min(ya[0], yb[0]) + Math.min(za[0], zb[0]) + m[12];
            min[1] = Math.min(xa[1], xb[1]) + Math.min(ya[1], yb[1]) + Math.min(za[1], zb[1]) + m[13];
            min[2] = Math.min(xa[2], xb[2]) + Math.min(ya[2], yb[2]) + Math.min(za[2], zb[2]) + m[14];
            max[0] = Math.max(xa[0], xb[0]) + Math.max(ya[0], yb[0]) + Math.max(za[0], zb[0]) + m[12];
            max[1] = Math.max(xa[1], xb[1]) + Math.max(ya[1], yb[1]) + Math.max(za[1], zb[1]) + m[13];
            max[2] = Math.max(xa[2], xb[2]) + Math.max(ya[2], yb[2]) + Math.max(za[2], zb[2]) + m[14];
            this.min._dirty = true;
            this.max._dirty = true;
            return this;
        };
    }(),
    /**
     * Apply a projection matrix to the bounding box
     * @param  {clay.Matrix4} matrix
     */ applyProjection: function(matrix) {
        var min = this.min.array;
        var max = this.max.array;
        var m = matrix.array;
        // min in min z
        var v10 = min[0];
        var v11 = min[1];
        var v12 = min[2];
        // max in min z
        var v20 = max[0];
        var v21 = max[1];
        var v22 = min[2];
        // max in max z
        var v30 = max[0];
        var v31 = max[1];
        var v32 = max[2];
        if (m[15] === 1) {
            min[0] = m[0] * v10 + m[12];
            min[1] = m[5] * v11 + m[13];
            max[2] = m[10] * v12 + m[14];
            max[0] = m[0] * v30 + m[12];
            max[1] = m[5] * v31 + m[13];
            min[2] = m[10] * v32 + m[14];
        } else {
            var w = -1 / v12;
            min[0] = m[0] * v10 * w;
            min[1] = m[5] * v11 * w;
            max[2] = (m[10] * v12 + m[14]) * w;
            w = -1 / v22;
            max[0] = m[0] * v20 * w;
            max[1] = m[5] * v21 * w;
            w = -1 / v32;
            min[2] = (m[10] * v32 + m[14]) * w;
        }
        this.min._dirty = true;
        this.max._dirty = true;
        return this;
    },
    updateVertices: function() {
        var vertices = this.vertices;
        if (!vertices) {
            // Cube vertices
            vertices = [];
            for(var i = 0; i < 8; i++){
                vertices[i] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].fromValues(0, 0, 0);
            }
            /**
             * Eight coords of bounding box
             * @type {Float32Array[]}
             */ this.vertices = vertices;
        }
        var min = this.min.array;
        var max = this.max.array;
        //--- min z
        // min x
        vec3Set(vertices[0], min[0], min[1], min[2]);
        vec3Set(vertices[1], min[0], max[1], min[2]);
        // max x
        vec3Set(vertices[2], max[0], min[1], min[2]);
        vec3Set(vertices[3], max[0], max[1], min[2]);
        //-- max z
        vec3Set(vertices[4], min[0], min[1], max[2]);
        vec3Set(vertices[5], min[0], max[1], max[2]);
        vec3Set(vertices[6], max[0], min[1], max[2]);
        vec3Set(vertices[7], max[0], max[1], max[2]);
        return this;
    },
    /**
     * Copy values from another bounding box
     * @param  {clay.BoundingBox} bbox
     */ copy: function(bbox) {
        var min = this.min;
        var max = this.max;
        vec3Copy(min.array, bbox.min.array);
        vec3Copy(max.array, bbox.max.array);
        min._dirty = true;
        max._dirty = true;
        return this;
    },
    /**
     * Clone a new bounding box
     * @return {clay.BoundingBox}
     */ clone: function() {
        var boundingBox = new BoundingBox();
        boundingBox.copy(this);
        return boundingBox;
    }
};
const __TURBOPACK__default__export__ = BoundingBox;
}}),
"[project]/node_modules/claygl/src/Node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$Base$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/core/Base.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/math/Vector3.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Quaternion$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/math/Quaternion.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Matrix4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/math/Matrix4.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/glmatrix/mat4.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$BoundingBox$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/math/BoundingBox.js [app-client] (ecmascript)");
;
;
;
;
;
;
var nameId = 0;
/**
 * @constructor clay.Node
 * @extends clay.core.Base
 */ var Node = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$Base$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].extend(/** @lends clay.Node# */ {
    /**
     * Scene node name
     * @type {string}
     */ name: '',
    /**
     * Position relative to its parent node. aka translation.
     * @type {clay.Vector3}
     */ position: null,
    /**
     * Rotation relative to its parent node. Represented by a quaternion
     * @type {clay.Quaternion}
     */ rotation: null,
    /**
     * Scale relative to its parent node
     * @type {clay.Vector3}
     */ scale: null,
    /**
     * Affine transform matrix relative to its root scene.
     * @type {clay.Matrix4}
     */ worldTransform: null,
    /**
     * Affine transform matrix relative to its parent node.
     * Composited with position, rotation and scale.
     * @type {clay.Matrix4}
     */ localTransform: null,
    /**
     * If the local transform is update from SRT(scale, rotation, translation, which is position here) each frame
     * @type {boolean}
     */ autoUpdateLocalTransform: true,
    /**
     * Parent of current scene node
     * @type {?clay.Node}
     * @private
     */ _parent: null,
    /**
     * The root scene mounted. Null if it is a isolated node
     * @type {?clay.Scene}
     * @private
     */ _scene: null,
    /**
     * @type {boolean}
     * @private
     */ _needsUpdateWorldTransform: true,
    /**
     * @type {boolean}
     * @private
     */ _inIterating: false,
    // Depth for transparent list sorting
    __depth: 0
}, function() {
    if (!this.name) {
        this.name = (this.type || 'NODE') + '_' + nameId++;
    }
    if (!this.position) {
        this.position = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
    }
    if (!this.rotation) {
        this.rotation = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Quaternion$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
    }
    if (!this.scale) {
        this.scale = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](1, 1, 1);
    }
    this.worldTransform = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Matrix4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
    this.localTransform = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Matrix4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
    this._children = [];
}, /**@lends clay.Node.prototype. */ {
    /**
     * @type {?clay.Vector3}
     * @instance
     */ target: null,
    /**
     * If node and its chilren invisible
     * @type {boolean}
     * @instance
     */ invisible: false,
    /**
     * If Node is a skinned mesh
     * @return {boolean}
     */ isSkinnedMesh: function() {
        return false;
    },
    /**
     * Return true if it is a renderable scene node, like Mesh and ParticleSystem
     * @return {boolean}
     */ isRenderable: function() {
        return false;
    },
    /**
     * Set the name of the scene node
     * @param {string} name
     */ setName: function(name) {
        var scene = this._scene;
        if (scene) {
            var nodeRepository = scene._nodeRepository;
            delete nodeRepository[this.name];
            nodeRepository[name] = this;
        }
        this.name = name;
    },
    /**
     * Add a child node
     * @param {clay.Node} node
     */ add: function(node) {
        var originalParent = node._parent;
        if (originalParent === this) {
            return;
        }
        if (originalParent) {
            originalParent.remove(node);
        }
        node._parent = this;
        this._children.push(node);
        var scene = this._scene;
        if (scene && scene !== node.scene) {
            node.traverse(this._addSelfToScene, this);
        }
        // Mark children needs update transform
        // In case child are remove and added again after parent moved
        node._needsUpdateWorldTransform = true;
    },
    /**
     * Remove the given child scene node
     * @param {clay.Node} node
     */ remove: function(node) {
        var children = this._children;
        var idx = children.indexOf(node);
        if (idx < 0) {
            return;
        }
        children.splice(idx, 1);
        node._parent = null;
        if (this._scene) {
            node.traverse(this._removeSelfFromScene, this);
        }
    },
    /**
     * Remove all children
     */ removeAll: function() {
        var children = this._children;
        for(var idx = 0; idx < children.length; idx++){
            children[idx]._parent = null;
            if (this._scene) {
                children[idx].traverse(this._removeSelfFromScene, this);
            }
        }
        this._children = [];
    },
    /**
     * Get the scene mounted
     * @return {clay.Scene}
     */ getScene: function() {
        return this._scene;
    },
    /**
     * Get parent node
     * @return {clay.Scene}
     */ getParent: function() {
        return this._parent;
    },
    _removeSelfFromScene: function(descendant) {
        descendant._scene.removeFromScene(descendant);
        descendant._scene = null;
    },
    _addSelfToScene: function(descendant) {
        this._scene.addToScene(descendant);
        descendant._scene = this._scene;
    },
    /**
     * Return true if it is ancestor of the given scene node
     * @param {clay.Node} node
     */ isAncestor: function(node) {
        var parent = node._parent;
        while(parent){
            if (parent === this) {
                return true;
            }
            parent = parent._parent;
        }
        return false;
    },
    /**
     * Get a new created array of all children nodes
     * @return {clay.Node[]}
     */ children: function() {
        return this._children.slice();
    },
    /**
     * Get child scene node at given index.
     * @param {number} idx
     * @return {clay.Node}
     */ childAt: function(idx) {
        return this._children[idx];
    },
    /**
     * Get first child with the given name
     * @param {string} name
     * @return {clay.Node}
     */ getChildByName: function(name) {
        var children = this._children;
        for(var i = 0; i < children.length; i++){
            if (children[i].name === name) {
                return children[i];
            }
        }
    },
    /**
     * Get first descendant have the given name
     * @param {string} name
     * @return {clay.Node}
     */ getDescendantByName: function(name) {
        var children = this._children;
        for(var i = 0; i < children.length; i++){
            var child = children[i];
            if (child.name === name) {
                return child;
            } else {
                var res = child.getDescendantByName(name);
                if (res) {
                    return res;
                }
            }
        }
    },
    /**
     * Query descendant node by path
     * @param {string} path
     * @return {clay.Node}
     * @example
     *  node.queryNode('root/parent/child');
     */ queryNode: function(path) {
        if (!path) {
            return;
        }
        // TODO Name have slash ?
        var pathArr = path.split('/');
        var current = this;
        for(var i = 0; i < pathArr.length; i++){
            var name = pathArr[i];
            // Skip empty
            if (!name) {
                continue;
            }
            var found = false;
            var children = current._children;
            for(var j = 0; j < children.length; j++){
                var child = children[j];
                if (child.name === name) {
                    current = child;
                    found = true;
                    break;
                }
            }
            // Early return if not found
            if (!found) {
                return;
            }
        }
        return current;
    },
    /**
     * Get query path, relative to rootNode(default is scene)
     * @param {clay.Node} [rootNode]
     * @return {string}
     */ getPath: function(rootNode) {
        if (!this._parent) {
            return '/';
        }
        var current = this._parent;
        var path = this.name;
        while(current._parent){
            path = current.name + '/' + path;
            if (current._parent == rootNode) {
                break;
            }
            current = current._parent;
        }
        if (!current._parent && rootNode) {
            return null;
        }
        return path;
    },
    /**
     * Depth first traverse all its descendant scene nodes.
     *
     * **WARN** Don't do `add`, `remove` operation in the callback during traverse.
     * @param {Function} callback
     * @param {Node} [context]
     */ traverse: function(callback, context) {
        callback.call(context, this);
        var _children = this._children;
        for(var i = 0, len = _children.length; i < len; i++){
            _children[i].traverse(callback, context);
        }
    },
    /**
     * Traverse all children nodes.
     *
     * **WARN** DON'T do `add`, `remove` operation in the callback during iteration.
     *
     * @param {Function} callback
     * @param {Node} [context]
     */ eachChild: function(callback, context) {
        var _children = this._children;
        for(var i = 0, len = _children.length; i < len; i++){
            var child = _children[i];
            callback.call(context, child, i);
        }
    },
    /**
     * Set the local transform and decompose to SRT
     * @param {clay.Matrix4} matrix
     */ setLocalTransform: function(matrix) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].copy(this.localTransform.array, matrix.array);
        this.decomposeLocalTransform();
    },
    /**
     * Decompose the local transform to SRT
     */ decomposeLocalTransform: function(keepScale) {
        var scale = !keepScale ? this.scale : null;
        this.localTransform.decomposeMatrix(scale, this.rotation, this.position);
    },
    /**
     * Set the world transform and decompose to SRT
     * @param {clay.Matrix4} matrix
     */ setWorldTransform: function(matrix) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].copy(this.worldTransform.array, matrix.array);
        this.decomposeWorldTransform();
    },
    /**
     * Decompose the world transform to SRT
     * @function
     */ decomposeWorldTransform: function() {
        var tmp = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].create();
        return function(keepScale) {
            var localTransform = this.localTransform;
            var worldTransform = this.worldTransform;
            // Assume world transform is updated
            if (this._parent) {
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].invert(tmp, this._parent.worldTransform.array);
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].multiply(localTransform.array, tmp, worldTransform.array);
            } else {
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].copy(localTransform.array, worldTransform.array);
            }
            var scale = !keepScale ? this.scale : null;
            localTransform.decomposeMatrix(scale, this.rotation, this.position);
        };
    }(),
    transformNeedsUpdate: function() {
        return this.position._dirty || this.rotation._dirty || this.scale._dirty;
    },
    /**
     * Update local transform from SRT
     * Notice that local transform will not be updated if _dirty mark of position, rotation, scale is all false
     */ updateLocalTransform: function() {
        var position = this.position;
        var rotation = this.rotation;
        var scale = this.scale;
        if (this.transformNeedsUpdate()) {
            var m = this.localTransform.array;
            // Transform order, scale->rotation->position
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].fromRotationTranslation(m, rotation.array, position.array);
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].scale(m, m, scale.array);
            rotation._dirty = false;
            scale._dirty = false;
            position._dirty = false;
            this._needsUpdateWorldTransform = true;
        }
    },
    /**
     * Update world transform, assume its parent world transform have been updated
     * @private
     */ _updateWorldTransformTopDown: function() {
        var localTransform = this.localTransform.array;
        var worldTransform = this.worldTransform.array;
        if (this._parent) {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].multiplyAffine(worldTransform, this._parent.worldTransform.array, localTransform);
        } else {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].copy(worldTransform, localTransform);
        }
    },
    /**
     * Update world transform before whole scene is updated.
     */ updateWorldTransform: function() {
        // Find the root node which transform needs update;
        var rootNodeIsDirty = this;
        while(rootNodeIsDirty && rootNodeIsDirty.getParent() && rootNodeIsDirty.getParent().transformNeedsUpdate()){
            rootNodeIsDirty = rootNodeIsDirty.getParent();
        }
        rootNodeIsDirty.update();
    },
    /**
     * Update local transform and world transform recursively
     * @param {boolean} forceUpdateWorld
     */ update: function(forceUpdateWorld) {
        if (this.autoUpdateLocalTransform) {
            this.updateLocalTransform();
        } else {
            // Transform is manually setted
            forceUpdateWorld = true;
        }
        if (forceUpdateWorld || this._needsUpdateWorldTransform) {
            this._updateWorldTransformTopDown();
            forceUpdateWorld = true;
            this._needsUpdateWorldTransform = false;
        }
        var children = this._children;
        for(var i = 0, len = children.length; i < len; i++){
            children[i].update(forceUpdateWorld);
        }
    },
    /**
     * Get bounding box of node
     * @param  {Function} [filter]
     * @param  {clay.BoundingBox} [out]
     * @return {clay.BoundingBox}
     */ // TODO Skinning
    getBoundingBox: function() {
        function defaultFilter(el) {
            return !el.invisible && el.geometry;
        }
        var tmpBBox = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$BoundingBox$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
        var tmpMat4 = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Matrix4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
        var invWorldTransform = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Matrix4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
        return function(filter, out) {
            out = out || new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$BoundingBox$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
            filter = filter || defaultFilter;
            if (this._parent) {
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Matrix4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].invert(invWorldTransform, this._parent.worldTransform);
            } else {
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Matrix4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].identity(invWorldTransform);
            }
            this.traverse(function(mesh) {
                if (mesh.geometry && mesh.geometry.boundingBox) {
                    tmpBBox.copy(mesh.geometry.boundingBox);
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Matrix4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].multiply(tmpMat4, invWorldTransform, mesh.worldTransform);
                    tmpBBox.applyTransform(tmpMat4);
                    out.union(tmpBBox);
                }
            }, this, defaultFilter);
            return out;
        };
    }(),
    /**
     * Get world position, extracted from world transform
     * @param  {clay.Vector3} [out]
     * @return {clay.Vector3}
     */ getWorldPosition: function(out) {
        // PENDING
        if (this.transformNeedsUpdate()) {
            this.updateWorldTransform();
        }
        var m = this.worldTransform.array;
        if (out) {
            var arr = out.array;
            arr[0] = m[12];
            arr[1] = m[13];
            arr[2] = m[14];
            return out;
        } else {
            return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](m[12], m[13], m[14]);
        }
    },
    /**
     * Clone a new node
     * @return {Node}
     */ clone: function() {
        var node = new this.constructor();
        var children = this._children;
        node.setName(this.name);
        node.position.copy(this.position);
        node.rotation.copy(this.rotation);
        node.scale.copy(this.scale);
        for(var i = 0; i < children.length; i++){
            node.add(children[i].clone());
        }
        return node;
    },
    /**
     * Rotate the node around a axis by angle degrees, axis passes through point
     * @param {clay.Vector3} point Center point
     * @param {clay.Vector3} axis  Center axis
     * @param {number}       angle Rotation angle
     * @see http://docs.unity3d.com/Documentation/ScriptReference/Transform.RotateAround.html
     * @function
     */ rotateAround: function() {
        var v = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
        var RTMatrix = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Matrix4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
        // TODO improve performance
        return function(point, axis, angle) {
            v.copy(this.position).subtract(point);
            var localTransform = this.localTransform;
            localTransform.identity();
            // parent node
            localTransform.translate(point);
            localTransform.rotate(angle, axis);
            RTMatrix.fromRotationTranslation(this.rotation, v);
            localTransform.multiply(RTMatrix);
            localTransform.scale(this.scale);
            this.decomposeLocalTransform();
            this._needsUpdateWorldTransform = true;
        };
    }(),
    /**
     * @param {clay.Vector3} target
     * @param {clay.Vector3} [up]
     * @see http://www.opengl.org/sdk/docs/man2/xhtml/gluLookAt.xml
     * @function
     */ lookAt: function() {
        var m = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Matrix4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
        return function(target, up) {
            m.lookAt(this.position, target, up || this.localTransform.y).invert();
            this.setLocalTransform(m);
            this.target = target;
        };
    }()
});
const __TURBOPACK__default__export__ = Node;
}}),
"[project]/node_modules/claygl/src/Renderable.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/Node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/core/glenum.js [app-client] (ecmascript)");
;
;
/**
 * @constructor
 * @alias clay.Renderable
 * @extends clay.Node
 */ var Renderable = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].extend(/** @lends clay.Renderable# */ {
    /**
     * @type {clay.Material}
     */ material: null,
    /**
     * @type {clay.Geometry}
     */ geometry: null,
    /**
     * @type {number}
     */ mode: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].TRIANGLES,
    _renderInfo: null
}, /** @lends clay.Renderable.prototype */ {
    __program: null,
    /**
     * Group of received light.
     */ lightGroup: 0,
    /**
     * Render order, Nodes with smaller value renders before nodes with larger values.
     * @type {Number}
     */ renderOrder: 0,
    /**
     * Used when mode is LINES, LINE_STRIP or LINE_LOOP
     * @type {number}
     */ // lineWidth: 1,
    /**
     * If enable culling
     * @type {boolean}
     */ culling: true,
    /**
     * Specify which side of polygon will be culled.
     * Possible values:
     *  + {@link clay.Renderable.BACK}
     *  + {@link clay.Renderable.FRONT}
     *  + {@link clay.Renderable.FRONT_AND_BACK}
     * @see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/cullFace
     * @type {number}
     */ cullFace: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].BACK,
    /**
     * Specify which side is front face.
     * Possible values:
     *  + {@link clay.Renderable.CW}
     *  + {@link clay.Renderable.CCW}
     * @see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/frontFace
     * @type {number}
     */ frontFace: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].CCW,
    /**
     * If enable software frustum culling
     * @type {boolean}
     */ frustumCulling: true,
    /**
     * @type {boolean}
     */ receiveShadow: true,
    /**
     * @type {boolean}
     */ castShadow: true,
    /**
     * @type {boolean}
     */ ignorePicking: false,
    /**
     * @type {boolean}
     */ ignorePreZ: false,
    /**
     * @type {boolean}
     */ ignoreGBuffer: false,
    /**
     * @return {boolean}
     */ isRenderable: function() {
        // TODO Shader ?
        return this.geometry && this.material && this.material.shader && !this.invisible && this.geometry.vertexCount > 0;
    },
    /**
     * Before render hook
     * @type {Function}
     */ beforeRender: function(_gl) {},
    /**
     * Before render hook
     * @type {Function}
     */ afterRender: function(_gl, renderStat) {},
    getBoundingBox: function(filter, out) {
        out = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].prototype.getBoundingBox.call(this, filter, out);
        if (this.geometry && this.geometry.boundingBox) {
            out.union(this.geometry.boundingBox);
        }
        return out;
    },
    /**
     * Clone a new renderable
     * @function
     * @return {clay.Renderable}
     */ clone: function() {
        var properties = [
            'castShadow',
            'receiveShadow',
            'mode',
            'culling',
            'cullFace',
            'frontFace',
            'frustumCulling',
            'renderOrder',
            'lineWidth',
            'ignorePicking',
            'ignorePreZ',
            'ignoreGBuffer'
        ];
        return function() {
            var renderable = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].prototype.clone.call(this);
            renderable.geometry = this.geometry;
            renderable.material = this.material;
            for(var i = 0; i < properties.length; i++){
                var name = properties[i];
                // Try not to overwrite the prototype property
                if (renderable[name] !== this[name]) {
                    renderable[name] = this[name];
                }
            }
            return renderable;
        };
    }()
});
/**
 * @type {number}
 */ Renderable.POINTS = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].POINTS;
/**
 * @type {number}
 */ Renderable.LINES = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].LINES;
/**
 * @type {number}
 */ Renderable.LINE_LOOP = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].LINE_LOOP;
/**
 * @type {number}
 */ Renderable.LINE_STRIP = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].LINE_STRIP;
/**
 * @type {number}
 */ Renderable.TRIANGLES = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].TRIANGLES;
/**
 * @type {number}
 */ Renderable.TRIANGLE_STRIP = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].TRIANGLE_STRIP;
/**
 * @type {number}
 */ Renderable.TRIANGLE_FAN = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].TRIANGLE_FAN;
/**
 * @type {number}
 */ Renderable.BACK = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].BACK;
/**
 * @type {number}
 */ Renderable.FRONT = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].FRONT;
/**
 * @type {number}
 */ Renderable.FRONT_AND_BACK = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].FRONT_AND_BACK;
/**
 * @type {number}
 */ Renderable.CW = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].CW;
/**
 * @type {number}
 */ Renderable.CCW = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].CCW;
const __TURBOPACK__default__export__ = Renderable;
}}),
"[project]/node_modules/claygl/src/picking/RayPicking.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$Base$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/core/Base.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Ray$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/math/Ray.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/math/Vector2.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/math/Vector3.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Matrix4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/math/Matrix4.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Renderable$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/Renderable.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/core/glenum.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/glmatrix/vec3.js [app-client] (ecmascript)");
;
;
;
;
;
;
;
;
/**
 * @constructor clay.picking.RayPicking
 * @extends clay.core.Base
 */ var RayPicking = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$Base$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].extend(/** @lends clay.picking.RayPicking# */ {
    /**
     * Target scene
     * @type {clay.Scene}
     */ scene: null,
    /**
     * Target camera
     * @type {clay.Camera}
     */ camera: null,
    /**
     * Target renderer
     * @type {clay.Renderer}
     */ renderer: null
}, function() {
    this._ray = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Ray$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
    this._ndc = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
}, /** @lends clay.picking.RayPicking.prototype */ {
    /**
     * Pick the nearest intersection object in the scene
     * @param  {number} x Mouse position x
     * @param  {number} y Mouse position y
     * @param  {boolean} [forcePickAll=false] ignore ignorePicking
     * @return {clay.picking.RayPicking~Intersection}
     */ pick: function(x, y, forcePickAll) {
        var out = this.pickAll(x, y, [], forcePickAll);
        return out[0] || null;
    },
    /**
     * Pick all intersection objects, wich will be sorted from near to far
     * @param  {number} x Mouse position x
     * @param  {number} y Mouse position y
     * @param  {Array} [output]
     * @param  {boolean} [forcePickAll=false] ignore ignorePicking
     * @return {Array.<clay.picking.RayPicking~Intersection>}
     */ pickAll: function(x, y, output, forcePickAll) {
        this.renderer.screenToNDC(x, y, this._ndc);
        this.camera.castRay(this._ndc, this._ray);
        output = output || [];
        this._intersectNode(this.scene, output, forcePickAll || false);
        output.sort(this._intersectionCompareFunc);
        return output;
    },
    _intersectNode: function(node, out, forcePickAll) {
        if (node instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Renderable$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"] && node.isRenderable()) {
            if ((!node.ignorePicking || forcePickAll) && (// Only triangle mesh support ray picking
            node.mode === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].TRIANGLES && node.geometry.isUseIndices() || node.geometry.pickByRay || node.geometry.pick)) {
                this._intersectRenderable(node, out);
            }
        }
        for(var i = 0; i < node._children.length; i++){
            this._intersectNode(node._children[i], out, forcePickAll);
        }
    },
    _intersectRenderable: function() {
        var v1 = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
        var v2 = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
        var v3 = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
        var ray = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Ray$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
        var worldInverse = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Matrix4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
        return function(renderable, out) {
            var isSkinnedMesh = renderable.isSkinnedMesh();
            ray.copy(this._ray);
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Matrix4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].invert(worldInverse, renderable.worldTransform);
            // Skinned mesh will ignore the world transform.
            if (!isSkinnedMesh) {
                ray.applyTransform(worldInverse);
            }
            var geometry = renderable.geometry;
            var bbox = isSkinnedMesh ? renderable.skeleton.boundingBox : geometry.boundingBox;
            if (bbox && !ray.intersectBoundingBox(bbox)) {
                return;
            }
            // Use user defined picking algorithm
            if (geometry.pick) {
                geometry.pick(this._ndc.x, this._ndc.y, this.renderer, this.camera, renderable, out);
                return;
            } else if (geometry.pickByRay) {
                geometry.pickByRay(ray, renderable, out);
                return;
            }
            var cullBack = renderable.cullFace === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].BACK && renderable.frontFace === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].CCW || renderable.cullFace === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].FRONT && renderable.frontFace === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].CW;
            var point;
            var indices = geometry.indices;
            var positionAttr = geometry.attributes.position;
            var weightAttr = geometry.attributes.weight;
            var jointAttr = geometry.attributes.joint;
            var skinMatricesArray;
            var skinMatrices = [];
            // Check if valid.
            if (!positionAttr || !positionAttr.value || !indices) {
                return;
            }
            if (isSkinnedMesh) {
                skinMatricesArray = renderable.skeleton.getSubSkinMatrices(renderable.__uid__, renderable.joints);
                for(var i = 0; i < renderable.joints.length; i++){
                    skinMatrices[i] = skinMatrices[i] || [];
                    for(var k = 0; k < 16; k++){
                        skinMatrices[i][k] = skinMatricesArray[i * 16 + k];
                    }
                }
                var pos = [];
                var weight = [];
                var joint = [];
                var skinnedPos = [];
                var tmp = [];
                var skinnedPositionAttr = geometry.attributes.skinnedPosition;
                if (!skinnedPositionAttr || !skinnedPositionAttr.value) {
                    geometry.createAttribute('skinnedPosition', 'f', 3);
                    skinnedPositionAttr = geometry.attributes.skinnedPosition;
                    skinnedPositionAttr.init(geometry.vertexCount);
                }
                for(var i = 0; i < geometry.vertexCount; i++){
                    positionAttr.get(i, pos);
                    weightAttr.get(i, weight);
                    jointAttr.get(i, joint);
                    weight[3] = 1 - weight[0] - weight[1] - weight[2];
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].set(skinnedPos, 0, 0, 0);
                    for(var k = 0; k < 4; k++){
                        if (joint[k] >= 0 && weight[k] > 1e-4) {
                            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].transformMat4(tmp, pos, skinMatrices[joint[k]]);
                            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].scaleAndAdd(skinnedPos, skinnedPos, tmp, weight[k]);
                        }
                    }
                    skinnedPositionAttr.set(i, skinnedPos);
                }
            }
            for(var i = 0; i < indices.length; i += 3){
                var i1 = indices[i];
                var i2 = indices[i + 1];
                var i3 = indices[i + 2];
                var finalPosAttr = isSkinnedMesh ? geometry.attributes.skinnedPosition : positionAttr;
                finalPosAttr.get(i1, v1.array);
                finalPosAttr.get(i2, v2.array);
                finalPosAttr.get(i3, v3.array);
                if (cullBack) {
                    point = ray.intersectTriangle(v1, v2, v3, renderable.culling);
                } else {
                    point = ray.intersectTriangle(v1, v3, v2, renderable.culling);
                }
                if (point) {
                    var pointW = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
                    if (!isSkinnedMesh) {
                        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].transformMat4(pointW, point, renderable.worldTransform);
                    } else {
                        // TODO point maybe not right.
                        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].copy(pointW, point);
                    }
                    out.push(new RayPicking.Intersection(point, pointW, renderable, [
                        i1,
                        i2,
                        i3
                    ], i / 3, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].dist(pointW, this._ray.origin)));
                }
            }
        };
    }(),
    _intersectionCompareFunc: function(a, b) {
        return a.distance - b.distance;
    }
});
/**
 * @constructor clay.picking.RayPicking~Intersection
 * @param {clay.Vector3} point
 * @param {clay.Vector3} pointWorld
 * @param {clay.Node} target
 * @param {Array.<number>} triangle
 * @param {number} triangleIndex
 * @param {number} distance
 */ RayPicking.Intersection = function(point, pointWorld, target, triangle, triangleIndex, distance) {
    /**
     * Intersection point in local transform coordinates
     * @type {clay.Vector3}
     */ this.point = point;
    /**
     * Intersection point in world transform coordinates
     * @type {clay.Vector3}
     */ this.pointWorld = pointWorld;
    /**
     * Intersection scene node
     * @type {clay.Node}
     */ this.target = target;
    /**
     * Intersection triangle, which is an array of vertex index
     * @type {Array.<number>}
     */ this.triangle = triangle;
    /**
     * Index of intersection triangle.
     */ this.triangleIndex = triangleIndex;
    /**
     * Distance from intersection point to ray origin
     * @type {number}
     */ this.distance = distance;
};
const __TURBOPACK__default__export__ = RayPicking;
}}),
"[project]/node_modules/claygl/src/core/Cache.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var DIRTY_PREFIX = '__dt__';
var Cache = function() {
    this._contextId = 0;
    this._caches = [];
    this._context = {};
};
Cache.prototype = {
    use: function(contextId, documentSchema) {
        var caches = this._caches;
        if (!caches[contextId]) {
            caches[contextId] = {};
            if (documentSchema) {
                caches[contextId] = documentSchema();
            }
        }
        this._contextId = contextId;
        this._context = caches[contextId];
    },
    put: function(key, value) {
        this._context[key] = value;
    },
    get: function(key) {
        return this._context[key];
    },
    dirty: function(field) {
        field = field || '';
        var key = DIRTY_PREFIX + field;
        this.put(key, true);
    },
    dirtyAll: function(field) {
        field = field || '';
        var key = DIRTY_PREFIX + field;
        var caches = this._caches;
        for(var i = 0; i < caches.length; i++){
            if (caches[i]) {
                caches[i][key] = true;
            }
        }
    },
    fresh: function(field) {
        field = field || '';
        var key = DIRTY_PREFIX + field;
        this.put(key, false);
    },
    freshAll: function(field) {
        field = field || '';
        var key = DIRTY_PREFIX + field;
        var caches = this._caches;
        for(var i = 0; i < caches.length; i++){
            if (caches[i]) {
                caches[i][key] = false;
            }
        }
    },
    isDirty: function(field) {
        field = field || '';
        var key = DIRTY_PREFIX + field;
        var context = this._context;
        return !context.hasOwnProperty(key) || context[key] === true;
    },
    deleteContext: function(contextId) {
        delete this._caches[contextId];
        this._context = {};
    },
    delete: function(key) {
        delete this._context[key];
    },
    clearAll: function() {
        this._caches = {};
    },
    getContext: function() {
        return this._context;
    },
    eachContext: function(cb, context) {
        var keys = Object.keys(this._caches);
        keys.forEach(function(key) {
            cb && cb.call(context, key);
        });
    },
    miss: function(key) {
        return !this._context.hasOwnProperty(key);
    }
};
Cache.prototype.constructor = Cache;
const __TURBOPACK__default__export__ = Cache;
}}),
"[project]/node_modules/claygl/src/Texture.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * Base class for all textures like compressed texture, texture2d, texturecube
 * TODO mapping
 */ __turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$Base$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/core/Base.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/core/glenum.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$Cache$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/core/Cache.js [app-client] (ecmascript)");
;
;
;
/**
 * @constructor
 * @alias clay.Texture
 * @extends clay.core.Base
 */ var Texture = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$Base$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].extend(/** @lends clay.Texture# */ {
    /**
     * Texture width, readonly when the texture source is image
     * @type {number}
     */ width: 512,
    /**
     * Texture height, readonly when the texture source is image
     * @type {number}
     */ height: 512,
    /**
     * Texel data type.
     * Possible values:
     *  + {@link clay.Texture.UNSIGNED_BYTE}
     *  + {@link clay.Texture.HALF_FLOAT}
     *  + {@link clay.Texture.FLOAT}
     *  + {@link clay.Texture.UNSIGNED_INT_24_8_WEBGL}
     *  + {@link clay.Texture.UNSIGNED_INT}
     * @type {number}
     */ type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].UNSIGNED_BYTE,
    /**
     * Format of texel data
     * Possible values:
     *  + {@link clay.Texture.RGBA}
     *  + {@link clay.Texture.DEPTH_COMPONENT}
     *  + {@link clay.Texture.DEPTH_STENCIL}
     * @type {number}
     */ format: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].RGBA,
    /**
     * Texture wrap. Default to be REPEAT.
     * Possible values:
     *  + {@link clay.Texture.CLAMP_TO_EDGE}
     *  + {@link clay.Texture.REPEAT}
     *  + {@link clay.Texture.MIRRORED_REPEAT}
     * @type {number}
     */ wrapS: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].REPEAT,
    /**
     * Texture wrap. Default to be REPEAT.
     * Possible values:
     *  + {@link clay.Texture.CLAMP_TO_EDGE}
     *  + {@link clay.Texture.REPEAT}
     *  + {@link clay.Texture.MIRRORED_REPEAT}
     * @type {number}
     */ wrapT: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].REPEAT,
    /**
     * Possible values:
     *  + {@link clay.Texture.NEAREST}
     *  + {@link clay.Texture.LINEAR}
     *  + {@link clay.Texture.NEAREST_MIPMAP_NEAREST}
     *  + {@link clay.Texture.LINEAR_MIPMAP_NEAREST}
     *  + {@link clay.Texture.NEAREST_MIPMAP_LINEAR}
     *  + {@link clay.Texture.LINEAR_MIPMAP_LINEAR}
     * @type {number}
     */ minFilter: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].LINEAR_MIPMAP_LINEAR,
    /**
     * Possible values:
     *  + {@link clay.Texture.NEAREST}
     *  + {@link clay.Texture.LINEAR}
     * @type {number}
     */ magFilter: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].LINEAR,
    /**
     * If enable mimap.
     * @type {boolean}
     */ useMipmap: true,
    /**
     * Anisotropic filtering, enabled if value is larger than 1
     * @see https://developer.mozilla.org/en-US/docs/Web/API/EXT_texture_filter_anisotropic
     * @type {number}
     */ anisotropic: 1,
    // pixelStorei parameters, not available when texture is used as render target
    // http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml
    /**
     * If flip in y axis for given image source
     * @type {boolean}
     * @default true
     */ flipY: true,
    /**
     * A flag to indicate if texture source is sRGB
     */ sRGB: true,
    /**
     * @type {number}
     * @default 4
     */ unpackAlignment: 4,
    /**
     * @type {boolean}
     * @default false
     */ premultiplyAlpha: false,
    /**
     * Dynamic option for texture like video
     * @type {boolean}
     */ dynamic: false,
    NPOT: false,
    // PENDING
    // Init it here to avoid deoptimization when it's assigned in application dynamically
    __used: 0
}, function() {
    this._cache = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$Cache$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
}, /** @lends clay.Texture.prototype */ {
    getWebGLTexture: function(renderer) {
        var _gl = renderer.gl;
        var cache = this._cache;
        cache.use(renderer.__uid__);
        if (cache.miss('webgl_texture')) {
            // In a new gl context, create new texture and set dirty true
            cache.put('webgl_texture', _gl.createTexture());
        }
        if (this.dynamic) {
            this.update(renderer);
        } else if (cache.isDirty()) {
            this.update(renderer);
            cache.fresh();
        }
        return cache.get('webgl_texture');
    },
    bind: function() {},
    unbind: function() {},
    /**
     * Mark texture is dirty and update in the next frame
     */ dirty: function() {
        if (this._cache) {
            this._cache.dirtyAll();
        }
    },
    update: function(renderer) {},
    // Update the common parameters of texture
    updateCommon: function(renderer) {
        var _gl = renderer.gl;
        _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, this.flipY);
        _gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, this.premultiplyAlpha);
        _gl.pixelStorei(_gl.UNPACK_ALIGNMENT, this.unpackAlignment);
        // Use of none-power of two texture
        // http://www.khronos.org/webgl/wiki/WebGL_and_OpenGL_Differences
        if (this.format === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].DEPTH_COMPONENT) {
            this.useMipmap = false;
        }
        var sRGBExt = renderer.getGLExtension('EXT_sRGB');
        // Fallback
        if (this.format === Texture.SRGB && !sRGBExt) {
            this.format = Texture.RGB;
        }
        if (this.format === Texture.SRGB_ALPHA && !sRGBExt) {
            this.format = Texture.RGBA;
        }
        this.NPOT = !this.isPowerOfTwo();
    },
    getAvailableWrapS: function() {
        if (this.NPOT) {
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].CLAMP_TO_EDGE;
        }
        return this.wrapS;
    },
    getAvailableWrapT: function() {
        if (this.NPOT) {
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].CLAMP_TO_EDGE;
        }
        return this.wrapT;
    },
    getAvailableMinFilter: function() {
        var minFilter = this.minFilter;
        if (this.NPOT || !this.useMipmap) {
            if (minFilter === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].NEAREST_MIPMAP_NEAREST || minFilter === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].NEAREST_MIPMAP_LINEAR) {
                return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].NEAREST;
            } else if (minFilter === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].LINEAR_MIPMAP_LINEAR || minFilter === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].LINEAR_MIPMAP_NEAREST) {
                return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].LINEAR;
            } else {
                return minFilter;
            }
        } else {
            return minFilter;
        }
    },
    getAvailableMagFilter: function() {
        return this.magFilter;
    },
    nextHighestPowerOfTwo: function(x) {
        --x;
        for(var i = 1; i < 32; i <<= 1){
            x = x | x >> i;
        }
        return x + 1;
    },
    /**
     * @param  {clay.Renderer} renderer
     */ dispose: function(renderer) {
        var cache = this._cache;
        cache.use(renderer.__uid__);
        var webglTexture = cache.get('webgl_texture');
        if (webglTexture) {
            renderer.gl.deleteTexture(webglTexture);
        }
        cache.deleteContext(renderer.__uid__);
    },
    /**
     * Test if image of texture is valid and loaded.
     * @return {boolean}
     */ isRenderable: function() {},
    /**
     * Test if texture size is power of two
     * @return {boolean}
     */ isPowerOfTwo: function() {}
});
Object.defineProperty(Texture.prototype, 'width', {
    get: function() {
        return this._width;
    },
    set: function(value) {
        this._width = value;
    }
});
Object.defineProperty(Texture.prototype, 'height', {
    get: function() {
        return this._height;
    },
    set: function(value) {
        this._height = value;
    }
});
/* DataType */ /**
 * @type {number}
 */ Texture.BYTE = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].BYTE;
/**
 * @type {number}
 */ Texture.UNSIGNED_BYTE = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].UNSIGNED_BYTE;
/**
 * @type {number}
 */ Texture.SHORT = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].SHORT;
/**
 * @type {number}
 */ Texture.UNSIGNED_SHORT = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].UNSIGNED_SHORT;
/**
 * @type {number}
 */ Texture.INT = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].INT;
/**
 * @type {number}
 */ Texture.UNSIGNED_INT = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].UNSIGNED_INT;
/**
 * @type {number}
 */ Texture.FLOAT = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].FLOAT;
/**
 * @type {number}
 */ Texture.HALF_FLOAT = 0x8D61;
/**
 * UNSIGNED_INT_24_8_WEBGL for WEBGL_depth_texture extension
 * @type {number}
 */ Texture.UNSIGNED_INT_24_8_WEBGL = 34042;
/* PixelFormat */ /**
 * @type {number}
 */ Texture.DEPTH_COMPONENT = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].DEPTH_COMPONENT;
/**
 * @type {number}
 */ Texture.DEPTH_STENCIL = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].DEPTH_STENCIL;
/**
 * @type {number}
 */ Texture.ALPHA = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].ALPHA;
/**
 * @type {number}
 */ Texture.RGB = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].RGB;
/**
 * @type {number}
 */ Texture.RGBA = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].RGBA;
/**
 * @type {number}
 */ Texture.LUMINANCE = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].LUMINANCE;
/**
 * @type {number}
 */ Texture.LUMINANCE_ALPHA = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].LUMINANCE_ALPHA;
/**
 * @see https://www.khronos.org/registry/webgl/extensions/EXT_sRGB/
 * @type {number}
 */ Texture.SRGB = 0x8C40;
/**
 * @see https://www.khronos.org/registry/webgl/extensions/EXT_sRGB/
 * @type {number}
 */ Texture.SRGB_ALPHA = 0x8C42;
/* Compressed Texture */ Texture.COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0;
Texture.COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83F1;
Texture.COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83F2;
Texture.COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83F3;
/* TextureMagFilter */ /**
 * @type {number}
 */ Texture.NEAREST = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].NEAREST;
/**
 * @type {number}
 */ Texture.LINEAR = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].LINEAR;
/* TextureMinFilter */ /**
 * @type {number}
 */ Texture.NEAREST_MIPMAP_NEAREST = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].NEAREST_MIPMAP_NEAREST;
/**
 * @type {number}
 */ Texture.LINEAR_MIPMAP_NEAREST = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].LINEAR_MIPMAP_NEAREST;
/**
 * @type {number}
 */ Texture.NEAREST_MIPMAP_LINEAR = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].NEAREST_MIPMAP_LINEAR;
/**
 * @type {number}
 */ Texture.LINEAR_MIPMAP_LINEAR = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].LINEAR_MIPMAP_LINEAR;
/* TextureWrapMode */ /**
 * @type {number}
 */ Texture.REPEAT = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].REPEAT;
/**
 * @type {number}
 */ Texture.CLAMP_TO_EDGE = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].CLAMP_TO_EDGE;
/**
 * @type {number}
 */ Texture.MIRRORED_REPEAT = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].MIRRORED_REPEAT;
const __TURBOPACK__default__export__ = Texture;
}}),
"[project]/node_modules/claygl/src/Mesh.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Renderable$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/Renderable.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/core/glenum.js [app-client] (ecmascript)");
;
;
/**
 * @constructor clay.Mesh
 * @extends clay.Renderable
 */ var Mesh = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Renderable$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].extend(/** @lends clay.Mesh# */ {
    /**
     * Used when it is a skinned mesh
     * @type {clay.Skeleton}
     */ skeleton: null,
    /**
     * Joints indices Meshes can share the one skeleton instance and each mesh can use one part of joints. Joints indices indicate the index of joint in the skeleton instance
     * @type {number[]}
     */ joints: null
}, function() {
    if (!this.joints) {
        this.joints = [];
    }
}, {
    /**
     * Offset matrix used for multiple skinned mesh clone sharing one skeleton
     * @type {clay.Matrix4}
     */ offsetMatrix: null,
    isInstancedMesh: function() {
        return false;
    },
    isSkinnedMesh: function() {
        return !!(this.skeleton && this.joints && this.joints.length > 0);
    },
    clone: function() {
        var mesh = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Renderable$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].prototype.clone.call(this);
        mesh.skeleton = this.skeleton;
        if (this.joints) {
            mesh.joints = this.joints.slice();
        }
        return mesh;
    }
});
// Enums
Mesh.POINTS = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].POINTS;
Mesh.LINES = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].LINES;
Mesh.LINE_LOOP = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].LINE_LOOP;
Mesh.LINE_STRIP = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].LINE_STRIP;
Mesh.TRIANGLES = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].TRIANGLES;
Mesh.TRIANGLE_STRIP = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].TRIANGLE_STRIP;
Mesh.TRIANGLE_FAN = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].TRIANGLE_FAN;
Mesh.BACK = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].BACK;
Mesh.FRONT = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].FRONT;
Mesh.FRONT_AND_BACK = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].FRONT_AND_BACK;
Mesh.CW = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].CW;
Mesh.CCW = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].CCW;
const __TURBOPACK__default__export__ = Mesh;
}}),
"[project]/node_modules/claygl/src/math/util.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var mathUtil = {};
mathUtil.isPowerOfTwo = function(value) {
    return (value & value - 1) === 0;
};
mathUtil.nextPowerOfTwo = function(value) {
    value--;
    value |= value >> 1;
    value |= value >> 2;
    value |= value >> 4;
    value |= value >> 8;
    value |= value >> 16;
    value++;
    return value;
};
mathUtil.nearestPowerOfTwo = function(value) {
    return Math.pow(2, Math.round(Math.log(value) / Math.LN2));
};
const __TURBOPACK__default__export__ = mathUtil;
}}),
"[project]/node_modules/claygl/src/Texture2D.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Texture$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/Texture.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/core/glenum.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$vendor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/core/vendor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$util$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/math/util.js [app-client] (ecmascript)");
;
;
;
;
var isPowerOfTwo = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$util$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].isPowerOfTwo;
function nearestPowerOfTwo(val) {
    return Math.pow(2, Math.round(Math.log(val) / Math.LN2));
}
function convertTextureToPowerOfTwo(texture, canvas) {
    // var canvas = document.createElement('canvas');
    var width = nearestPowerOfTwo(texture.width);
    var height = nearestPowerOfTwo(texture.height);
    canvas = canvas || document.createElement('canvas');
    canvas.width = width;
    canvas.height = height;
    var ctx = canvas.getContext('2d');
    ctx.drawImage(texture.image, 0, 0, width, height);
    return canvas;
}
/**
 * @constructor clay.Texture2D
 * @extends clay.Texture
 *
 * @example
 *     ...
 *     var mat = new clay.Material({
 *         shader: clay.shader.library.get('clay.phong', 'diffuseMap')
 *     });
 *     var diffuseMap = new clay.Texture2D();
 *     diffuseMap.load('assets/textures/diffuse.jpg');
 *     mat.set('diffuseMap', diffuseMap);
 *     ...
 *     diffuseMap.success(function () {
 *         // Wait for the diffuse texture loaded
 *         animation.on('frame', function (frameTime) {
 *             renderer.render(scene, camera);
 *         });
 *     });
 */ var Texture2D = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Texture$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].extend(function() {
    return /** @lends clay.Texture2D# */ {
        /**
         * @type {?HTMLImageElement|HTMLCanvasElemnet}
         */ // TODO mark dirty when assigned.
        image: null,
        /**
         * Pixels data. Will be ignored if image is set.
         * @type {?Uint8Array|Float32Array}
         */ pixels: null,
        /**
         * @type {Array.<Object>}
         * @example
         *     [{
         *         image: mipmap0,
         *         pixels: null
         *     }, {
         *         image: mipmap1,
         *         pixels: null
         *     }, ....]
         */ mipmaps: [],
        /**
         * If convert texture to power-of-two
         * @type {boolean}
         */ convertToPOT: false
    };
}, {
    textureType: 'texture2D',
    update: function(renderer) {
        var _gl = renderer.gl;
        _gl.bindTexture(_gl.TEXTURE_2D, this._cache.get('webgl_texture'));
        this.updateCommon(renderer);
        var glFormat = this.format;
        var glType = this.type;
        // Convert to pot is only available when using image/canvas/video element.
        var convertToPOT = !!(this.convertToPOT && !this.mipmaps.length && this.image && (this.wrapS === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Texture$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].REPEAT || this.wrapT === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Texture$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].REPEAT) && this.NPOT);
        _gl.texParameteri(_gl.TEXTURE_2D, _gl.TEXTURE_WRAP_S, convertToPOT ? this.wrapS : this.getAvailableWrapS());
        _gl.texParameteri(_gl.TEXTURE_2D, _gl.TEXTURE_WRAP_T, convertToPOT ? this.wrapT : this.getAvailableWrapT());
        _gl.texParameteri(_gl.TEXTURE_2D, _gl.TEXTURE_MAG_FILTER, convertToPOT ? this.magFilter : this.getAvailableMagFilter());
        _gl.texParameteri(_gl.TEXTURE_2D, _gl.TEXTURE_MIN_FILTER, convertToPOT ? this.minFilter : this.getAvailableMinFilter());
        var anisotropicExt = renderer.getGLExtension('EXT_texture_filter_anisotropic');
        if (anisotropicExt && this.anisotropic > 1) {
            _gl.texParameterf(_gl.TEXTURE_2D, anisotropicExt.TEXTURE_MAX_ANISOTROPY_EXT, this.anisotropic);
        }
        // Fallback to float type if browser don't have half float extension
        if (glType === 36193) {
            var halfFloatExt = renderer.getGLExtension('OES_texture_half_float');
            if (!halfFloatExt) {
                glType = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].FLOAT;
            }
        }
        if (this.mipmaps.length) {
            var width = this.width;
            var height = this.height;
            for(var i = 0; i < this.mipmaps.length; i++){
                var mipmap = this.mipmaps[i];
                this._updateTextureData(_gl, mipmap, i, width, height, glFormat, glType, false);
                width /= 2;
                height /= 2;
            }
        } else {
            this._updateTextureData(_gl, this, 0, this.width, this.height, glFormat, glType, convertToPOT);
            if (this.useMipmap && (!this.NPOT || convertToPOT)) {
                _gl.generateMipmap(_gl.TEXTURE_2D);
            }
        }
        _gl.bindTexture(_gl.TEXTURE_2D, null);
    },
    _updateTextureData: function(_gl, data, level, width, height, glFormat, glType, convertToPOT) {
        if (data.image) {
            var imgData = data.image;
            if (convertToPOT) {
                this._potCanvas = convertTextureToPowerOfTwo(this, this._potCanvas);
                imgData = this._potCanvas;
            }
            _gl.texImage2D(_gl.TEXTURE_2D, level, glFormat, glFormat, glType, imgData);
        } else {
            // Can be used as a blank texture when writing render to texture(RTT)
            if (glFormat <= __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Texture$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].COMPRESSED_RGBA_S3TC_DXT5_EXT && glFormat >= __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Texture$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].COMPRESSED_RGB_S3TC_DXT1_EXT) {
                _gl.compressedTexImage2D(_gl.TEXTURE_2D, level, glFormat, width, height, 0, data.pixels);
            } else {
                // Is a render target if pixels is null
                _gl.texImage2D(_gl.TEXTURE_2D, level, glFormat, width, height, 0, glFormat, glType, data.pixels);
            }
        }
    },
    /**
     * @param  {clay.Renderer} renderer
     * @memberOf clay.Texture2D.prototype
     */ generateMipmap: function(renderer) {
        var _gl = renderer.gl;
        if (this.useMipmap && !this.NPOT) {
            _gl.bindTexture(_gl.TEXTURE_2D, this._cache.get('webgl_texture'));
            _gl.generateMipmap(_gl.TEXTURE_2D);
        }
    },
    isPowerOfTwo: function() {
        return isPowerOfTwo(this.width) && isPowerOfTwo(this.height);
    },
    isRenderable: function() {
        if (this.image) {
            return this.image.width > 0 && this.image.height > 0;
        } else {
            return !!(this.width && this.height);
        }
    },
    bind: function(renderer) {
        renderer.gl.bindTexture(renderer.gl.TEXTURE_2D, this.getWebGLTexture(renderer));
    },
    unbind: function(renderer) {
        renderer.gl.bindTexture(renderer.gl.TEXTURE_2D, null);
    },
    load: function(src, crossOrigin) {
        var image = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$vendor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].createImage();
        if (crossOrigin) {
            image.crossOrigin = crossOrigin;
        }
        var self = this;
        image.onload = function() {
            self.dirty();
            self.trigger('success', self);
        };
        image.onerror = function() {
            self.trigger('error', self);
        };
        image.src = src;
        this.image = image;
        return this;
    }
});
Object.defineProperty(Texture2D.prototype, 'width', {
    get: function() {
        if (this.image) {
            return this.image.width;
        }
        return this._width;
    },
    set: function(value) {
        if (this.image) {
            console.warn('Texture from image can\'t set width');
        } else {
            if (this._width !== value) {
                this.dirty();
            }
            this._width = value;
        }
    }
});
Object.defineProperty(Texture2D.prototype, 'height', {
    get: function() {
        if (this.image) {
            return this.image.height;
        }
        return this._height;
    },
    set: function(value) {
        if (this.image) {
            console.warn('Texture from image can\'t set height');
        } else {
            if (this._height !== value) {
                this.dirty();
            }
            this._height = value;
        }
    }
});
const __TURBOPACK__default__export__ = Texture2D;
}}),
"[project]/node_modules/claygl/src/GeometryBase.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$Base$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/core/Base.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/core/glenum.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$Cache$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/core/Cache.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$vendor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/core/vendor.js [app-client] (ecmascript)");
;
;
;
;
function getArrayCtorByType(type) {
    return ({
        'byte': __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$vendor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].Int8Array,
        'ubyte': __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$vendor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].Uint8Array,
        'short': __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$vendor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].Int16Array,
        'ushort': __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$vendor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].Uint16Array
    })[type] || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$vendor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].Float32Array;
}
function makeAttrKey(attrName) {
    return 'attr_' + attrName;
}
/**
 * GeometryBase attribute
 * @alias clay.GeometryBase.Attribute
 * @constructor
 */ function Attribute(name, type, size, semantic) {
    /**
     * Attribute name
     * @type {string}
     */ this.name = name;
    /**
     * Attribute type
     * Possible values:
     *  + `'byte'`
     *  + `'ubyte'`
     *  + `'short'`
     *  + `'ushort'`
     *  + `'float'` Most commonly used.
     * @type {string}
     */ this.type = type;
    /**
     * Size of attribute component. 1 - 4.
     * @type {number}
     */ this.size = size;
    /**
     * Semantic of this attribute.
     * Possible values:
     *  + `'POSITION'`
     *  + `'NORMAL'`
     *  + `'BINORMAL'`
     *  + `'TANGENT'`
     *  + `'TEXCOORD'`
     *  + `'TEXCOORD_0'`
     *  + `'TEXCOORD_1'`
     *  + `'COLOR'`
     *  + `'JOINT'`
     *  + `'WEIGHT'`
     *
     * In shader, attribute with same semantic will be automatically mapped. For example:
     * ```glsl
     * attribute vec3 pos: POSITION
     * ```
     * will use the attribute value with semantic POSITION in geometry, no matter what name it used.
     * @type {string}
     */ this.semantic = semantic || '';
    /**
     * Value of the attribute.
     * @type {TypedArray}
     */ this.value = null;
    // Init getter setter
    switch(size){
        case 1:
            this.get = function(idx) {
                return this.value[idx];
            };
            this.set = function(idx, value) {
                this.value[idx] = value;
            };
            // Copy from source to target
            this.copy = function(target, source) {
                this.value[target] = this.value[target];
            };
            break;
        case 2:
            this.get = function(idx, out) {
                var arr = this.value;
                out[0] = arr[idx * 2];
                out[1] = arr[idx * 2 + 1];
                return out;
            };
            this.set = function(idx, val) {
                var arr = this.value;
                arr[idx * 2] = val[0];
                arr[idx * 2 + 1] = val[1];
            };
            this.copy = function(target, source) {
                var arr = this.value;
                source *= 2;
                target *= 2;
                arr[target] = arr[source];
                arr[target + 1] = arr[source + 1];
            };
            break;
        case 3:
            this.get = function(idx, out) {
                var idx3 = idx * 3;
                var arr = this.value;
                out[0] = arr[idx3];
                out[1] = arr[idx3 + 1];
                out[2] = arr[idx3 + 2];
                return out;
            };
            this.set = function(idx, val) {
                var idx3 = idx * 3;
                var arr = this.value;
                arr[idx3] = val[0];
                arr[idx3 + 1] = val[1];
                arr[idx3 + 2] = val[2];
            };
            this.copy = function(target, source) {
                var arr = this.value;
                source *= 3;
                target *= 3;
                arr[target] = arr[source];
                arr[target + 1] = arr[source + 1];
                arr[target + 2] = arr[source + 2];
            };
            break;
        case 4:
            this.get = function(idx, out) {
                var arr = this.value;
                var idx4 = idx * 4;
                out[0] = arr[idx4];
                out[1] = arr[idx4 + 1];
                out[2] = arr[idx4 + 2];
                out[3] = arr[idx4 + 3];
                return out;
            };
            this.set = function(idx, val) {
                var arr = this.value;
                var idx4 = idx * 4;
                arr[idx4] = val[0];
                arr[idx4 + 1] = val[1];
                arr[idx4 + 2] = val[2];
                arr[idx4 + 3] = val[3];
            };
            this.copy = function(target, source) {
                var arr = this.value;
                source *= 4;
                target *= 4;
                // copyWithin is extremely slow
                arr[target] = arr[source];
                arr[target + 1] = arr[source + 1];
                arr[target + 2] = arr[source + 2];
                arr[target + 3] = arr[source + 3];
            };
    }
}
/**
 * Set item value at give index. Second parameter val is number if size is 1
 * @function
 * @name clay.GeometryBase.Attribute#set
 * @param {number} idx
 * @param {number[]|number} val
 * @example
 * geometry.getAttribute('position').set(0, [1, 1, 1]);
 */ /**
 * Get item value at give index. Second parameter out is no need if size is 1
 * @function
 * @name clay.GeometryBase.Attribute#set
 * @param {number} idx
 * @param {number[]} [out]
 * @example
 * geometry.getAttribute('position').get(0, out);
 */ /**
 * Initialize attribute with given vertex count
 * @param {number} nVertex
 */ Attribute.prototype.init = function(nVertex) {
    if (!this.value || this.value.length !== nVertex * this.size) {
        var ArrayConstructor = getArrayCtorByType(this.type);
        this.value = new ArrayConstructor(nVertex * this.size);
    }
};
/**
 * Initialize attribute with given array. Which can be 1 dimensional or 2 dimensional
 * @param {Array} array
 * @example
 *  geometry.getAttribute('position').fromArray(
 *      [-1, 0, 0, 1, 0, 0, 0, 1, 0]
 *  );
 *  geometry.getAttribute('position').fromArray(
 *      [ [-1, 0, 0], [1, 0, 0], [0, 1, 0] ]
 *  );
 */ Attribute.prototype.fromArray = function(array) {
    var ArrayConstructor = getArrayCtorByType(this.type);
    var value;
    // Convert 2d array to flat
    if (array[0] && array[0].length) {
        var n = 0;
        var size = this.size;
        value = new ArrayConstructor(array.length * size);
        for(var i = 0; i < array.length; i++){
            for(var j = 0; j < size; j++){
                value[n++] = array[i][j];
            }
        }
    } else {
        value = new ArrayConstructor(array);
    }
    this.value = value;
};
Attribute.prototype.clone = function(copyValue) {
    var ret = new Attribute(this.name, this.type, this.size, this.semantic);
    // FIXME
    if (copyValue) {
        console.warn('todo');
    }
    return ret;
};
function AttributeBuffer(name, type, buffer, size, semantic) {
    this.name = name;
    this.type = type;
    this.buffer = buffer;
    this.size = size;
    this.semantic = semantic;
    // To be set in mesh
    // symbol in the shader
    this.symbol = '';
    // Needs remove flag
    this.needsRemove = false;
}
function IndicesBuffer(buffer) {
    this.buffer = buffer;
    this.count = 0;
}
/**
 * Base of all geometry. Use {@link clay.Geometry} for common 3D usage.
 * @constructor clay.GeometryBase
 * @extends clay.core.Base
 */ var GeometryBase = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$Base$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].extend(function() {
    return /** @lends clay.GeometryBase# */ {
        /**
         * Attributes of geometry.
         * @type {Object.<string, clay.GeometryBase.Attribute>}
         */ attributes: {},
        /**
         * Indices of geometry.
         * @type {Uint16Array|Uint32Array}
         */ indices: null,
        /**
         * Is vertices data dynamically updated.
         * Attributes value can't be changed after first render if dyanmic is false.
         * @type {boolean}
         */ dynamic: true,
        _enabledAttributes: null,
        // PENDING
        // Init it here to avoid deoptimization when it's assigned in application dynamically
        __used: 0
    };
}, function() {
    // Use cache
    this._cache = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$Cache$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
    this._attributeList = Object.keys(this.attributes);
    this.__vaoCache = {};
}, /** @lends clay.GeometryBase.prototype */ {
    /**
     * Main attribute will be used to count vertex number
     * @type {string}
     */ mainAttribute: '',
    /**
     * User defined picking algorithm instead of default
     * triangle ray intersection
     * x, y are NDC.
     * ```typescript
     * (x, y, renderer, camera, renderable, out) => boolean
     * ```
     * @type {?Function}
     */ pick: null,
    /**
     * User defined ray picking algorithm instead of default
     * triangle ray intersection
     * ```typescript
     * (ray: clay.Ray, renderable: clay.Renderable, out: Array) => boolean
     * ```
     * @type {?Function}
     */ pickByRay: null,
    /**
     * Mark attributes and indices in geometry needs to update.
     * Usually called after you change the data in attributes.
     */ dirty: function() {
        var enabledAttributes = this.getEnabledAttributes();
        for(var i = 0; i < enabledAttributes.length; i++){
            this.dirtyAttribute(enabledAttributes[i]);
        }
        this.dirtyIndices();
        this._enabledAttributes = null;
        this._cache.dirty('any');
    },
    /**
     * Mark the indices needs to update.
     */ dirtyIndices: function() {
        this._cache.dirtyAll('indices');
    },
    /**
     * Mark the attributes needs to update.
     * @param {string} [attrName]
     */ dirtyAttribute: function(attrName) {
        this._cache.dirtyAll(makeAttrKey(attrName));
        this._cache.dirtyAll('attributes');
    },
    /**
     * Get indices of triangle at given index.
     * @param {number} idx
     * @param {Array.<number>} out
     * @return {Array.<number>}
     */ getTriangleIndices: function(idx, out) {
        if (idx < this.triangleCount && idx >= 0) {
            if (!out) {
                out = [];
            }
            var indices = this.indices;
            out[0] = indices[idx * 3];
            out[1] = indices[idx * 3 + 1];
            out[2] = indices[idx * 3 + 2];
            return out;
        }
    },
    /**
     * Set indices of triangle at given index.
     * @param {number} idx
     * @param {Array.<number>} arr
     */ setTriangleIndices: function(idx, arr) {
        var indices = this.indices;
        indices[idx * 3] = arr[0];
        indices[idx * 3 + 1] = arr[1];
        indices[idx * 3 + 2] = arr[2];
    },
    isUseIndices: function() {
        return !!this.indices;
    },
    /**
     * Initialize indices from an array.
     * @param {Array} array
     */ initIndicesFromArray: function(array) {
        var value;
        var ArrayConstructor = this.vertexCount > 0xffff ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$vendor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].Uint32Array : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$vendor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].Uint16Array;
        // Convert 2d array to flat
        if (array[0] && array[0].length) {
            var n = 0;
            var size = 3;
            value = new ArrayConstructor(array.length * size);
            for(var i = 0; i < array.length; i++){
                for(var j = 0; j < size; j++){
                    value[n++] = array[i][j];
                }
            }
        } else {
            value = new ArrayConstructor(array);
        }
        this.indices = value;
    },
    /**
     * Create a new attribute
     * @param {string} name
     * @param {string} type
     * @param {number} size
     * @param {string} [semantic]
     */ createAttribute: function(name, type, size, semantic) {
        var attrib = new Attribute(name, type, size, semantic);
        if (this.attributes[name]) {
            this.removeAttribute(name);
        }
        this.attributes[name] = attrib;
        this._attributeList.push(name);
        return attrib;
    },
    /**
     * Remove attribute
     * @param {string} name
     */ removeAttribute: function(name) {
        var attributeList = this._attributeList;
        var idx = attributeList.indexOf(name);
        if (idx >= 0) {
            attributeList.splice(idx, 1);
            delete this.attributes[name];
            return true;
        }
        return false;
    },
    /**
     * Get attribute
     * @param {string} name
     * @return {clay.GeometryBase.Attribute}
     */ getAttribute: function(name) {
        return this.attributes[name];
    },
    /**
     * Get enabled attributes name list
     * Attribute which has the same vertex number with position is treated as a enabled attribute
     * @return {string[]}
     */ getEnabledAttributes: function() {
        var enabledAttributes = this._enabledAttributes;
        var attributeList = this._attributeList;
        // Cache
        if (enabledAttributes) {
            return enabledAttributes;
        }
        var result = [];
        var nVertex = this.vertexCount;
        for(var i = 0; i < attributeList.length; i++){
            var name = attributeList[i];
            var attrib = this.attributes[name];
            if (attrib.value) {
                if (attrib.value.length === nVertex * attrib.size) {
                    result.push(name);
                }
            }
        }
        this._enabledAttributes = result;
        return result;
    },
    getBufferChunks: function(renderer) {
        var cache = this._cache;
        cache.use(renderer.__uid__);
        var isAttributesDirty = cache.isDirty('attributes');
        var isIndicesDirty = cache.isDirty('indices');
        if (isAttributesDirty || isIndicesDirty) {
            this._updateBuffer(renderer.gl, isAttributesDirty, isIndicesDirty);
            var enabledAttributes = this.getEnabledAttributes();
            for(var i = 0; i < enabledAttributes.length; i++){
                cache.fresh(makeAttrKey(enabledAttributes[i]));
            }
            cache.fresh('attributes');
            cache.fresh('indices');
        }
        cache.fresh('any');
        return cache.get('chunks');
    },
    _updateBuffer: function(_gl, isAttributesDirty, isIndicesDirty) {
        var cache = this._cache;
        var chunks = cache.get('chunks');
        var firstUpdate = false;
        if (!chunks) {
            chunks = [];
            // Intialize
            chunks[0] = {
                attributeBuffers: [],
                indicesBuffer: null
            };
            cache.put('chunks', chunks);
            firstUpdate = true;
        }
        var chunk = chunks[0];
        var attributeBuffers = chunk.attributeBuffers;
        var indicesBuffer = chunk.indicesBuffer;
        if (isAttributesDirty || firstUpdate) {
            var attributeList = this.getEnabledAttributes();
            var attributeBufferMap = {};
            if (!firstUpdate) {
                for(var i = 0; i < attributeBuffers.length; i++){
                    attributeBufferMap[attributeBuffers[i].name] = attributeBuffers[i];
                }
            }
            // FIXME If some attributes removed
            for(var k = 0; k < attributeList.length; k++){
                var name = attributeList[k];
                var attribute = this.attributes[name];
                var bufferInfo;
                if (!firstUpdate) {
                    bufferInfo = attributeBufferMap[name];
                }
                var buffer;
                if (bufferInfo) {
                    buffer = bufferInfo.buffer;
                } else {
                    buffer = _gl.createBuffer();
                }
                if (cache.isDirty(makeAttrKey(name))) {
                    // Only update when they are dirty.
                    // TODO: Use BufferSubData?
                    _gl.bindBuffer(_gl.ARRAY_BUFFER, buffer);
                    _gl.bufferData(_gl.ARRAY_BUFFER, attribute.value, this.dynamic ? _gl.DYNAMIC_DRAW : _gl.STATIC_DRAW);
                }
                attributeBuffers[k] = new AttributeBuffer(name, attribute.type, buffer, attribute.size, attribute.semantic);
            }
            // Remove unused attributes buffers.
            // PENDING
            for(var i = k; i < attributeBuffers.length; i++){
                _gl.deleteBuffer(attributeBuffers[i].buffer);
            }
            attributeBuffers.length = k;
        }
        if (this.isUseIndices() && (isIndicesDirty || firstUpdate)) {
            if (!indicesBuffer) {
                indicesBuffer = new IndicesBuffer(_gl.createBuffer());
                chunk.indicesBuffer = indicesBuffer;
            }
            indicesBuffer.count = this.indices.length;
            _gl.bindBuffer(_gl.ELEMENT_ARRAY_BUFFER, indicesBuffer.buffer);
            _gl.bufferData(_gl.ELEMENT_ARRAY_BUFFER, this.indices, this.dynamic ? _gl.DYNAMIC_DRAW : _gl.STATIC_DRAW);
        }
    },
    /**
     * Dispose geometry data in GL context.
     * @param {clay.Renderer} renderer
     */ dispose: function(renderer) {
        var cache = this._cache;
        cache.use(renderer.__uid__);
        var chunks = cache.get('chunks');
        if (chunks) {
            for(var c = 0; c < chunks.length; c++){
                var chunk = chunks[c];
                for(var k = 0; k < chunk.attributeBuffers.length; k++){
                    var attribs = chunk.attributeBuffers[k];
                    renderer.gl.deleteBuffer(attribs.buffer);
                }
                if (chunk.indicesBuffer) {
                    renderer.gl.deleteBuffer(chunk.indicesBuffer.buffer);
                }
            }
        }
        if (this.__vaoCache) {
            var vaoExt = renderer.getGLExtension('OES_vertex_array_object');
            for(var id in this.__vaoCache){
                var vao = this.__vaoCache[id].vao;
                if (vao) {
                    vaoExt.deleteVertexArrayOES(vao);
                }
            }
        }
        this.__vaoCache = {};
        cache.deleteContext(renderer.__uid__);
    }
});
if (Object.defineProperty) {
    /**
     * @name clay.GeometryBase#vertexCount
     * @type {number}
     * @readOnly
     */ Object.defineProperty(GeometryBase.prototype, 'vertexCount', {
        enumerable: false,
        get: function() {
            var mainAttribute = this.attributes[this.mainAttribute];
            if (!mainAttribute) {
                mainAttribute = this.attributes[this._attributeList[0]];
            }
            if (!mainAttribute || !mainAttribute.value) {
                return 0;
            }
            return mainAttribute.value.length / mainAttribute.size;
        }
    });
    /**
     * @name clay.GeometryBase#triangleCount
     * @type {number}
     * @readOnly
     */ Object.defineProperty(GeometryBase.prototype, 'triangleCount', {
        enumerable: false,
        get: function() {
            var indices = this.indices;
            if (!indices) {
                return 0;
            } else {
                return indices.length / 3;
            }
        }
    });
}
GeometryBase.STATIC_DRAW = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].STATIC_DRAW;
GeometryBase.DYNAMIC_DRAW = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].DYNAMIC_DRAW;
GeometryBase.STREAM_DRAW = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].STREAM_DRAW;
GeometryBase.AttributeBuffer = AttributeBuffer;
GeometryBase.IndicesBuffer = IndicesBuffer;
GeometryBase.Attribute = Attribute;
const __TURBOPACK__default__export__ = GeometryBase;
}}),
"[project]/node_modules/claygl/src/Geometry.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$vendor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/core/vendor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/glmatrix/vec3.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/glmatrix/mat4.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$BoundingBox$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/math/BoundingBox.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$GeometryBase$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/GeometryBase.js [app-client] (ecmascript)");
;
;
;
;
;
var vec3Create = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].create;
var vec3Add = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].add;
var vec3Set = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].set;
var Attribute = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$GeometryBase$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].Attribute;
/**
 * Geometry in ClayGL contains vertex attributes of mesh. These vertex attributes will be finally provided to the {@link clay.Shader}.
 * Different {@link clay.Shader} needs different attributes. Here is a list of attributes used in the builtin shaders.
 *
 * + position: `clay.basic`, `clay.lambert`, `clay.standard`
 * + texcoord0: `clay.basic`, `clay.lambert`, `clay.standard`
 * + color: `clay.basic`, `clay.lambert`, `clay.standard`
 * + weight: `clay.basic`, `clay.lambert`, `clay.standard`
 * + joint: `clay.basic`, `clay.lambert`, `clay.standard`
 * + normal: `clay.lambert`, `clay.standard`
 * + tangent: `clay.standard`
 *
 * #### Create a procedural geometry
 *
 * ClayGL provides a couple of builtin procedural geometries. Inlcuding:
 *
 *  + {@link clay.geometry.Cube}
 *  + {@link clay.geometry.Sphere}
 *  + {@link clay.geometry.Plane}
 *  + {@link clay.geometry.Cylinder}
 *  + {@link clay.geometry.Cone}
 *  + {@link clay.geometry.ParametricSurface}
 *
 * It's simple to create a basic geometry with these classes.
 *
```js
var sphere = new clay.geometry.Sphere({
    radius: 2
});
```
 *
 * #### Create the geometry data by yourself
 *
 * Usually the vertex attributes data are created by the {@link clay.loader.GLTF} or procedural geometries like {@link clay.geometry.Sphere}.
 * Besides these, you can create the data manually. Here is a simple example to create a triangle.
```js
var TRIANGLE_POSITIONS = [
    [-0.5, -0.5, 0],
    [0.5, -0.5, 0],
    [0, 0.5, 0]
];
var geometry = new clay.StaticGeometryBase();
// Add triangle vertices to position attribute.
geometry.attributes.position.fromArray(TRIANGLE_POSITIONS);
```
 * Then you can use the utility methods like `generateVertexNormals`, `generateTangents` to create the remaining necessary attributes.
 *
 *
 * #### Use with custom shaders
 *
 * If you wan't to write custom shaders. Don't forget to add SEMANTICS to these attributes. For example
 *
 ```glsl
uniform mat4 worldViewProjection : WORLDVIEWPROJECTION;
uniform mat4 worldInverseTranspose : WORLDINVERSETRANSPOSE;
uniform mat4 world : WORLD;

attribute vec3 position : POSITION;
attribute vec2 texcoord : TEXCOORD_0;
attribute vec3 normal : NORMAL;
```
 * These `POSITION`, `TEXCOORD_0`, `NORMAL` are SEMANTICS which will map the attributes in shader to the attributes in the GeometryBase
 *
 * Available attributes SEMANTICS includes `POSITION`, `TEXCOORD_0`, `TEXCOORD_1` `NORMAL`, `TANGENT`, `COLOR`, `WEIGHT`, `JOINT`.
 *
 *
 * @constructor clay.Geometry
 * @extends clay.GeometryBase
 */ var Geometry = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$GeometryBase$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].extend(function() {
    return /** @lends clay.Geometry# */ {
        /**
         * Attributes of geometry. Including:
         *  + `position`
         *  + `texcoord0`
         *  + `texcoord1`
         *  + `normal`
         *  + `tangent`
         *  + `color`
         *  + `weight`
         *  + `joint`
         *  + `barycentric`
         *
         * @type {Object.<string, clay.Geometry.Attribute>}
         */ attributes: {
            position: new Attribute('position', 'float', 3, 'POSITION'),
            texcoord0: new Attribute('texcoord0', 'float', 2, 'TEXCOORD_0'),
            texcoord1: new Attribute('texcoord1', 'float', 2, 'TEXCOORD_1'),
            normal: new Attribute('normal', 'float', 3, 'NORMAL'),
            tangent: new Attribute('tangent', 'float', 4, 'TANGENT'),
            color: new Attribute('color', 'float', 4, 'COLOR'),
            // Skinning attributes
            // Each vertex can be bind to 4 bones, because the
            // sum of weights is 1, so the weights is stored in vec3 and the last
            // can be calculated by 1-w.x-w.y-w.z
            weight: new Attribute('weight', 'float', 3, 'WEIGHT'),
            joint: new Attribute('joint', 'float', 4, 'JOINT'),
            // For wireframe display
            // http://codeflow.org/entries/2012/aug/02/easy-wireframe-display-with-barycentric-coordinates/
            barycentric: new Attribute('barycentric', 'float', 3, null)
        },
        /**
         * Calculated bounding box of geometry.
         * @type {clay.BoundingBox}
         */ boundingBox: null
    };
}, /** @lends clay.Geometry.prototype */ {
    mainAttribute: 'position',
    /**
     * Update boundingBox of Geometry
     */ updateBoundingBox: function() {
        var bbox = this.boundingBox;
        if (!bbox) {
            bbox = this.boundingBox = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$BoundingBox$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
        }
        var posArr = this.attributes.position.value;
        if (posArr && posArr.length) {
            var min = bbox.min;
            var max = bbox.max;
            var minArr = min.array;
            var maxArr = max.array;
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].set(minArr, posArr[0], posArr[1], posArr[2]);
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].set(maxArr, posArr[0], posArr[1], posArr[2]);
            for(var i = 3; i < posArr.length;){
                var x = posArr[i++];
                var y = posArr[i++];
                var z = posArr[i++];
                if (x < minArr[0]) {
                    minArr[0] = x;
                }
                if (y < minArr[1]) {
                    minArr[1] = y;
                }
                if (z < minArr[2]) {
                    minArr[2] = z;
                }
                if (x > maxArr[0]) {
                    maxArr[0] = x;
                }
                if (y > maxArr[1]) {
                    maxArr[1] = y;
                }
                if (z > maxArr[2]) {
                    maxArr[2] = z;
                }
            }
            min._dirty = true;
            max._dirty = true;
        }
    },
    /**
     * Generate normals per vertex.
     */ generateVertexNormals: function() {
        if (!this.vertexCount) {
            return;
        }
        var indices = this.indices;
        var attributes = this.attributes;
        var positions = attributes.position.value;
        var normals = attributes.normal.value;
        if (!normals || normals.length !== positions.length) {
            normals = attributes.normal.value = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$vendor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].Float32Array(positions.length);
        } else {
            // Reset
            for(var i = 0; i < normals.length; i++){
                normals[i] = 0;
            }
        }
        var p1 = vec3Create();
        var p2 = vec3Create();
        var p3 = vec3Create();
        var v21 = vec3Create();
        var v32 = vec3Create();
        var n = vec3Create();
        var len = indices ? indices.length : this.vertexCount;
        var i1, i2, i3;
        for(var f = 0; f < len;){
            if (indices) {
                i1 = indices[f++];
                i2 = indices[f++];
                i3 = indices[f++];
            } else {
                i1 = f++;
                i2 = f++;
                i3 = f++;
            }
            vec3Set(p1, positions[i1 * 3], positions[i1 * 3 + 1], positions[i1 * 3 + 2]);
            vec3Set(p2, positions[i2 * 3], positions[i2 * 3 + 1], positions[i2 * 3 + 2]);
            vec3Set(p3, positions[i3 * 3], positions[i3 * 3 + 1], positions[i3 * 3 + 2]);
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].sub(v21, p1, p2);
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].sub(v32, p2, p3);
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].cross(n, v21, v32);
            // Already be weighted by the triangle area
            for(var i = 0; i < 3; i++){
                normals[i1 * 3 + i] = normals[i1 * 3 + i] + n[i];
                normals[i2 * 3 + i] = normals[i2 * 3 + i] + n[i];
                normals[i3 * 3 + i] = normals[i3 * 3 + i] + n[i];
            }
        }
        for(var i = 0; i < normals.length;){
            vec3Set(n, normals[i], normals[i + 1], normals[i + 2]);
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].normalize(n, n);
            normals[i++] = n[0];
            normals[i++] = n[1];
            normals[i++] = n[2];
        }
        this.dirty();
    },
    /**
     * Generate normals per face.
     */ generateFaceNormals: function() {
        if (!this.vertexCount) {
            return;
        }
        if (!this.isUniqueVertex()) {
            this.generateUniqueVertex();
        }
        var indices = this.indices;
        var attributes = this.attributes;
        var positions = attributes.position.value;
        var normals = attributes.normal.value;
        var p1 = vec3Create();
        var p2 = vec3Create();
        var p3 = vec3Create();
        var v21 = vec3Create();
        var v32 = vec3Create();
        var n = vec3Create();
        if (!normals) {
            normals = attributes.normal.value = new Float32Array(positions.length);
        }
        var len = indices ? indices.length : this.vertexCount;
        var i1, i2, i3;
        for(var f = 0; f < len;){
            if (indices) {
                i1 = indices[f++];
                i2 = indices[f++];
                i3 = indices[f++];
            } else {
                i1 = f++;
                i2 = f++;
                i3 = f++;
            }
            vec3Set(p1, positions[i1 * 3], positions[i1 * 3 + 1], positions[i1 * 3 + 2]);
            vec3Set(p2, positions[i2 * 3], positions[i2 * 3 + 1], positions[i2 * 3 + 2]);
            vec3Set(p3, positions[i3 * 3], positions[i3 * 3 + 1], positions[i3 * 3 + 2]);
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].sub(v21, p1, p2);
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].sub(v32, p2, p3);
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].cross(n, v21, v32);
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].normalize(n, n);
            for(var i = 0; i < 3; i++){
                normals[i1 * 3 + i] = n[i];
                normals[i2 * 3 + i] = n[i];
                normals[i3 * 3 + i] = n[i];
            }
        }
        this.dirty();
    },
    /**
     * Generate tangents attributes.
     */ generateTangents: function() {
        if (!this.vertexCount) {
            return;
        }
        var nVertex = this.vertexCount;
        var attributes = this.attributes;
        if (!attributes.tangent.value) {
            attributes.tangent.value = new Float32Array(nVertex * 4);
        }
        var texcoords = attributes.texcoord0.value;
        var positions = attributes.position.value;
        var tangents = attributes.tangent.value;
        var normals = attributes.normal.value;
        if (!texcoords) {
            console.warn('Geometry without texcoords can\'t generate tangents.');
            return;
        }
        var tan1 = [];
        var tan2 = [];
        for(var i = 0; i < nVertex; i++){
            tan1[i] = [
                0.0,
                0.0,
                0.0
            ];
            tan2[i] = [
                0.0,
                0.0,
                0.0
            ];
        }
        var sdir = [
            0.0,
            0.0,
            0.0
        ];
        var tdir = [
            0.0,
            0.0,
            0.0
        ];
        var indices = this.indices;
        var len = indices ? indices.length : this.vertexCount;
        var i1, i2, i3;
        for(var i = 0; i < len;){
            if (indices) {
                i1 = indices[i++];
                i2 = indices[i++];
                i3 = indices[i++];
            } else {
                i1 = i++;
                i2 = i++;
                i3 = i++;
            }
            var st1s = texcoords[i1 * 2], st2s = texcoords[i2 * 2], st3s = texcoords[i3 * 2], st1t = texcoords[i1 * 2 + 1], st2t = texcoords[i2 * 2 + 1], st3t = texcoords[i3 * 2 + 1], p1x = positions[i1 * 3], p2x = positions[i2 * 3], p3x = positions[i3 * 3], p1y = positions[i1 * 3 + 1], p2y = positions[i2 * 3 + 1], p3y = positions[i3 * 3 + 1], p1z = positions[i1 * 3 + 2], p2z = positions[i2 * 3 + 2], p3z = positions[i3 * 3 + 2];
            var x1 = p2x - p1x, x2 = p3x - p1x, y1 = p2y - p1y, y2 = p3y - p1y, z1 = p2z - p1z, z2 = p3z - p1z;
            var s1 = st2s - st1s, s2 = st3s - st1s, t1 = st2t - st1t, t2 = st3t - st1t;
            var r = 1.0 / (s1 * t2 - t1 * s2);
            sdir[0] = (t2 * x1 - t1 * x2) * r;
            sdir[1] = (t2 * y1 - t1 * y2) * r;
            sdir[2] = (t2 * z1 - t1 * z2) * r;
            tdir[0] = (s1 * x2 - s2 * x1) * r;
            tdir[1] = (s1 * y2 - s2 * y1) * r;
            tdir[2] = (s1 * z2 - s2 * z1) * r;
            vec3Add(tan1[i1], tan1[i1], sdir);
            vec3Add(tan1[i2], tan1[i2], sdir);
            vec3Add(tan1[i3], tan1[i3], sdir);
            vec3Add(tan2[i1], tan2[i1], tdir);
            vec3Add(tan2[i2], tan2[i2], tdir);
            vec3Add(tan2[i3], tan2[i3], tdir);
        }
        var tmp = vec3Create();
        var nCrossT = vec3Create();
        var n = vec3Create();
        for(var i = 0; i < nVertex; i++){
            n[0] = normals[i * 3];
            n[1] = normals[i * 3 + 1];
            n[2] = normals[i * 3 + 2];
            var t = tan1[i];
            // Gram-Schmidt orthogonalize
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].scale(tmp, n, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].dot(n, t));
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].sub(tmp, t, tmp);
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].normalize(tmp, tmp);
            // Calculate handedness.
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].cross(nCrossT, n, t);
            tangents[i * 4] = tmp[0];
            tangents[i * 4 + 1] = tmp[1];
            tangents[i * 4 + 2] = tmp[2];
            // PENDING can config ?
            tangents[i * 4 + 3] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].dot(nCrossT, tan2[i]) < 0.0 ? -1.0 : 1.0;
        }
        this.dirty();
    },
    /**
     * If vertices are not shared by different indices.
     */ isUniqueVertex: function() {
        if (this.isUseIndices()) {
            return this.vertexCount === this.indices.length;
        } else {
            return true;
        }
    },
    /**
     * Create a unique vertex for each index.
     */ generateUniqueVertex: function() {
        if (!this.vertexCount || !this.indices) {
            return;
        }
        if (this.indices.length > 0xffff) {
            this.indices = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$vendor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].Uint32Array(this.indices);
        }
        var attributes = this.attributes;
        var indices = this.indices;
        var attributeNameList = this.getEnabledAttributes();
        var oldAttrValues = {};
        for(var a = 0; a < attributeNameList.length; a++){
            var name = attributeNameList[a];
            oldAttrValues[name] = attributes[name].value;
            attributes[name].init(this.indices.length);
        }
        var cursor = 0;
        for(var i = 0; i < indices.length; i++){
            var ii = indices[i];
            for(var a = 0; a < attributeNameList.length; a++){
                var name = attributeNameList[a];
                var array = attributes[name].value;
                var size = attributes[name].size;
                for(var k = 0; k < size; k++){
                    array[cursor * size + k] = oldAttrValues[name][ii * size + k];
                }
            }
            indices[i] = cursor;
            cursor++;
        }
        this.dirty();
    },
    /**
     * Generate barycentric coordinates for wireframe draw.
     */ generateBarycentric: function() {
        if (!this.vertexCount) {
            return;
        }
        if (!this.isUniqueVertex()) {
            this.generateUniqueVertex();
        }
        var attributes = this.attributes;
        var array = attributes.barycentric.value;
        var indices = this.indices;
        // Already existed;
        if (array && array.length === indices.length * 3) {
            return;
        }
        array = attributes.barycentric.value = new Float32Array(indices.length * 3);
        for(var i = 0; i < (indices ? indices.length : this.vertexCount / 3);){
            for(var j = 0; j < 3; j++){
                var ii = indices ? indices[i++] : i * 3 + j;
                array[ii * 3 + j] = 1;
            }
        }
        this.dirty();
    },
    /**
     * Apply transform to geometry attributes.
     * @param {clay.Matrix4} matrix
     */ applyTransform: function(matrix) {
        var attributes = this.attributes;
        var positions = attributes.position.value;
        var normals = attributes.normal.value;
        var tangents = attributes.tangent.value;
        matrix = matrix.array;
        // Normal Matrix
        var inverseTransposeMatrix = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].create();
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].invert(inverseTransposeMatrix, matrix);
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].transpose(inverseTransposeMatrix, inverseTransposeMatrix);
        var vec3TransformMat4 = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].transformMat4;
        var vec3ForEach = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].forEach;
        vec3ForEach(positions, 3, 0, null, vec3TransformMat4, matrix);
        if (normals) {
            vec3ForEach(normals, 3, 0, null, vec3TransformMat4, inverseTransposeMatrix);
        }
        if (tangents) {
            vec3ForEach(tangents, 4, 0, null, vec3TransformMat4, inverseTransposeMatrix);
        }
        if (this.boundingBox) {
            this.updateBoundingBox();
        }
    },
    /**
     * Dispose geometry data in GL context.
     * @param {clay.Renderer} renderer
     */ dispose: function(renderer) {
        var cache = this._cache;
        cache.use(renderer.__uid__);
        var chunks = cache.get('chunks');
        if (chunks) {
            for(var c = 0; c < chunks.length; c++){
                var chunk = chunks[c];
                for(var k = 0; k < chunk.attributeBuffers.length; k++){
                    var attribs = chunk.attributeBuffers[k];
                    renderer.gl.deleteBuffer(attribs.buffer);
                }
                if (chunk.indicesBuffer) {
                    renderer.gl.deleteBuffer(chunk.indicesBuffer.buffer);
                }
            }
        }
        if (this.__vaoCache) {
            var vaoExt = renderer.getGLExtension('OES_vertex_array_object');
            for(var id in this.__vaoCache){
                var vao = this.__vaoCache[id].vao;
                if (vao) {
                    vaoExt.deleteVertexArrayOES(vao);
                }
            }
        }
        this.__vaoCache = {};
        cache.deleteContext(renderer.__uid__);
    }
});
Geometry.STATIC_DRAW = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$GeometryBase$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].STATIC_DRAW;
Geometry.DYNAMIC_DRAW = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$GeometryBase$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].DYNAMIC_DRAW;
Geometry.STREAM_DRAW = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$GeometryBase$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].STREAM_DRAW;
Geometry.AttributeBuffer = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$GeometryBase$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].AttributeBuffer;
Geometry.IndicesBuffer = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$GeometryBase$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].IndicesBuffer;
Geometry.Attribute = Attribute;
const __TURBOPACK__default__export__ = Geometry;
}}),
"[project]/node_modules/claygl/src/shader/source/header/calcAmbientSHLight.glsl.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
const __TURBOPACK__default__export__ = "vec3 calcAmbientSHLight(int idx, vec3 N) {\n int offset = 9 * idx;\n return ambientSHLightCoefficients[0]\n + ambientSHLightCoefficients[1] * N.x\n + ambientSHLightCoefficients[2] * N.y\n + ambientSHLightCoefficients[3] * N.z\n + ambientSHLightCoefficients[4] * N.x * N.z\n + ambientSHLightCoefficients[5] * N.z * N.y\n + ambientSHLightCoefficients[6] * N.y * N.x\n + ambientSHLightCoefficients[7] * (3.0 * N.z * N.z - 1.0)\n + ambientSHLightCoefficients[8] * (N.x * N.x - N.y * N.y);\n}";
}}),
"[project]/node_modules/claygl/src/shader/source/header/light.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$shader$2f$source$2f$header$2f$calcAmbientSHLight$2e$glsl$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/shader/source/header/calcAmbientSHLight.glsl.js [app-client] (ecmascript)");
;
var uniformVec3Prefix = 'uniform vec3 ';
var uniformFloatPrefix = 'uniform float ';
var exportHeaderPrefix = '@export clay.header.';
var exportEnd = '@end';
var unconfigurable = ':unconfigurable;';
const __TURBOPACK__default__export__ = [
    exportHeaderPrefix + 'directional_light',
    uniformVec3Prefix + 'directionalLightDirection[DIRECTIONAL_LIGHT_COUNT]' + unconfigurable,
    uniformVec3Prefix + 'directionalLightColor[DIRECTIONAL_LIGHT_COUNT]' + unconfigurable,
    exportEnd,
    exportHeaderPrefix + 'ambient_light',
    uniformVec3Prefix + 'ambientLightColor[AMBIENT_LIGHT_COUNT]' + unconfigurable,
    exportEnd,
    exportHeaderPrefix + 'ambient_sh_light',
    uniformVec3Prefix + 'ambientSHLightColor[AMBIENT_SH_LIGHT_COUNT]' + unconfigurable,
    uniformVec3Prefix + 'ambientSHLightCoefficients[AMBIENT_SH_LIGHT_COUNT * 9]' + unconfigurable,
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$shader$2f$source$2f$header$2f$calcAmbientSHLight$2e$glsl$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"],
    exportEnd,
    exportHeaderPrefix + 'ambient_cubemap_light',
    uniformVec3Prefix + 'ambientCubemapLightColor[AMBIENT_CUBEMAP_LIGHT_COUNT]' + unconfigurable,
    'uniform samplerCube ambientCubemapLightCubemap[AMBIENT_CUBEMAP_LIGHT_COUNT]' + unconfigurable,
    'uniform sampler2D ambientCubemapLightBRDFLookup[AMBIENT_CUBEMAP_LIGHT_COUNT]' + unconfigurable,
    exportEnd,
    exportHeaderPrefix + 'point_light',
    uniformVec3Prefix + 'pointLightPosition[POINT_LIGHT_COUNT]' + unconfigurable,
    uniformFloatPrefix + 'pointLightRange[POINT_LIGHT_COUNT]' + unconfigurable,
    uniformVec3Prefix + 'pointLightColor[POINT_LIGHT_COUNT]' + unconfigurable,
    exportEnd,
    exportHeaderPrefix + 'spot_light',
    uniformVec3Prefix + 'spotLightPosition[SPOT_LIGHT_COUNT]' + unconfigurable,
    uniformVec3Prefix + 'spotLightDirection[SPOT_LIGHT_COUNT]' + unconfigurable,
    uniformFloatPrefix + 'spotLightRange[SPOT_LIGHT_COUNT]' + unconfigurable,
    uniformFloatPrefix + 'spotLightUmbraAngleCosine[SPOT_LIGHT_COUNT]' + unconfigurable,
    uniformFloatPrefix + 'spotLightPenumbraAngleCosine[SPOT_LIGHT_COUNT]' + unconfigurable,
    uniformFloatPrefix + 'spotLightFalloffFactor[SPOT_LIGHT_COUNT]' + unconfigurable,
    uniformVec3Prefix + 'spotLightColor[SPOT_LIGHT_COUNT]' + unconfigurable,
    exportEnd
].join('\n');
}}),
"[project]/node_modules/claygl/src/Light.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/Node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Shader$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/Shader.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$shader$2f$source$2f$header$2f$light$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/shader/source/header/light.js [app-client] (ecmascript)");
;
;
;
__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Shader$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]['import'](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$shader$2f$source$2f$header$2f$light$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]);
/**
 * @constructor clay.Light
 * @extends clay.Node
 */ var Light = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].extend(function() {
    return /** @lends clay.Light# */ {
        /**
         * Light RGB color
         * @type {number[]}
         */ color: [
            1,
            1,
            1
        ],
        /**
         * Light intensity
         * @type {number}
         */ intensity: 1.0,
        // Config for shadow map
        /**
         * If light cast shadow
         * @type {boolean}
         */ castShadow: true,
        /**
         * Shadow map size
         * @type {number}
         */ shadowResolution: 512,
        /**
         * Light group, shader with same `lightGroup` will be affected
         *
         * Only useful in forward rendering
         * @type {number}
         */ group: 0
    };
}, /** @lends clay.Light.prototype. */ {
    /**
     * Light type
     * @type {string}
     * @memberOf clay.Light#
     */ type: '',
    /**
     * @return {clay.Light}
     * @memberOf clay.Light.prototype
     */ clone: function() {
        var light = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].prototype.clone.call(this);
        light.color = Array.prototype.slice.call(this.color);
        light.intensity = this.intensity;
        light.castShadow = this.castShadow;
        light.shadowResolution = this.shadowResolution;
        return light;
    }
});
const __TURBOPACK__default__export__ = Light;
}}),
"[project]/node_modules/claygl/src/math/Plane.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/math/Vector3.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/glmatrix/mat4.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/glmatrix/vec3.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/glmatrix/vec4.js [app-client] (ecmascript)");
;
;
;
;
/**
 * @constructor
 * @alias clay.Plane
 * @param {clay.Vector3} [normal]
 * @param {number} [distance]
 */ var Plane = function(normal, distance) {
    /**
     * Normal of the plane
     * @type {clay.Vector3}
     */ this.normal = normal || new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](0, 1, 0);
    /**
     * Constant of the plane equation, used as distance to the origin
     * @type {number}
     */ this.distance = distance || 0;
};
Plane.prototype = {
    constructor: Plane,
    /**
     * Distance from a given point to the plane
     * @param  {clay.Vector3} point
     * @return {number}
     */ distanceToPoint: function(point) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].dot(point.array, this.normal.array) - this.distance;
    },
    /**
     * Calculate the projection point on the plane
     * @param  {clay.Vector3} point
     * @param  {clay.Vector3} out
     * @return {clay.Vector3}
     */ projectPoint: function(point, out) {
        if (!out) {
            out = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
        }
        var d = this.distanceToPoint(point);
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].scaleAndAdd(out.array, point.array, this.normal.array, -d);
        out._dirty = true;
        return out;
    },
    /**
     * Normalize the plane's normal and calculate the distance
     */ normalize: function() {
        var invLen = 1 / __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].len(this.normal.array);
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].scale(this.normal.array, invLen);
        this.distance *= invLen;
    },
    /**
     * If the plane intersect a frustum
     * @param  {clay.Frustum} Frustum
     * @return {boolean}
     */ intersectFrustum: function(frustum) {
        // Check if all coords of frustum is on plane all under plane
        var coords = frustum.vertices;
        var normal = this.normal.array;
        var onPlane = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].dot(coords[0].array, normal) > this.distance;
        for(var i = 1; i < 8; i++){
            if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].dot(coords[i].array, normal) > this.distance != onPlane) {
                return true;
            }
        }
    },
    /**
     * Calculate the intersection point between plane and a given line
     * @function
     * @param {clay.Vector3} start start point of line
     * @param {clay.Vector3} end end point of line
     * @param {clay.Vector3} [out]
     * @return {clay.Vector3}
     */ intersectLine: function() {
        var rd = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].create();
        return function(start, end, out) {
            var d0 = this.distanceToPoint(start);
            var d1 = this.distanceToPoint(end);
            if (d0 > 0 && d1 > 0 || d0 < 0 && d1 < 0) {
                return null;
            }
            // Ray intersection
            var pn = this.normal.array;
            var d = this.distance;
            var ro = start.array;
            // direction
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].sub(rd, end.array, start.array);
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].normalize(rd, rd);
            var divider = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].dot(pn, rd);
            // ray is parallel to the plane
            if (divider === 0) {
                return null;
            }
            if (!out) {
                out = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
            }
            var t = (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].dot(pn, ro) - d) / divider;
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].scaleAndAdd(out.array, ro, rd, -t);
            out._dirty = true;
            return out;
        };
    }(),
    /**
     * Apply an affine transform matrix to plane
     * @function
     * @return {clay.Matrix4}
     */ applyTransform: function() {
        var inverseTranspose = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].create();
        var normalv4 = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].create();
        var pointv4 = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].create();
        pointv4[3] = 1;
        return function(m4) {
            m4 = m4.array;
            // Transform point on plane
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].scale(pointv4, this.normal.array, this.distance);
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].transformMat4(pointv4, pointv4, m4);
            this.distance = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].dot(pointv4, this.normal.array);
            // Transform plane normal
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].invert(inverseTranspose, m4);
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].transpose(inverseTranspose, inverseTranspose);
            normalv4[3] = 0;
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].copy(normalv4, this.normal.array);
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].transformMat4(normalv4, normalv4, inverseTranspose);
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].copy(this.normal.array, normalv4);
        };
    }(),
    /**
     * Copy from another plane
     * @param  {clay.Vector3} plane
     */ copy: function(plane) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].copy(this.normal.array, plane.normal.array);
        this.normal._dirty = true;
        this.distance = plane.distance;
    },
    /**
     * Clone a new plane
     * @return {clay.Plane}
     */ clone: function() {
        var plane = new Plane();
        plane.copy(this);
        return plane;
    }
};
const __TURBOPACK__default__export__ = Plane;
}}),
"[project]/node_modules/claygl/src/math/Frustum.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$BoundingBox$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/math/BoundingBox.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Plane$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/math/Plane.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/glmatrix/vec3.js [app-client] (ecmascript)");
;
;
;
var vec3Set = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].set;
var vec3Copy = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].copy;
var vec3TranformMat4 = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].transformMat4;
var mathMin = Math.min;
var mathMax = Math.max;
/**
 * @constructor
 * @alias clay.Frustum
 */ var Frustum = function() {
    /**
     * Eight planes to enclose the frustum
     * @type {clay.Plane[]}
     */ this.planes = [];
    for(var i = 0; i < 6; i++){
        this.planes.push(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Plane$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]());
    }
    /**
     * Bounding box of frustum
     * @type {clay.BoundingBox}
     */ this.boundingBox = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$BoundingBox$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
    /**
     * Eight vertices of frustum
     * @type {Float32Array[]}
     */ this.vertices = [];
    for(var i = 0; i < 8; i++){
        this.vertices[i] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].fromValues(0, 0, 0);
    }
};
Frustum.prototype = {
    // http://web.archive.org/web/20120531231005/http://crazyjoke.free.fr/doc/3D/plane%20extraction.pdf
    /**
     * Set frustum from a projection matrix
     * @param {clay.Matrix4} projectionMatrix
     */ setFromProjection: function(projectionMatrix) {
        var planes = this.planes;
        var m = projectionMatrix.array;
        var m0 = m[0], m1 = m[1], m2 = m[2], m3 = m[3];
        var m4 = m[4], m5 = m[5], m6 = m[6], m7 = m[7];
        var m8 = m[8], m9 = m[9], m10 = m[10], m11 = m[11];
        var m12 = m[12], m13 = m[13], m14 = m[14], m15 = m[15];
        // Update planes
        vec3Set(planes[0].normal.array, m3 - m0, m7 - m4, m11 - m8);
        planes[0].distance = -(m15 - m12);
        planes[0].normalize();
        vec3Set(planes[1].normal.array, m3 + m0, m7 + m4, m11 + m8);
        planes[1].distance = -(m15 + m12);
        planes[1].normalize();
        vec3Set(planes[2].normal.array, m3 + m1, m7 + m5, m11 + m9);
        planes[2].distance = -(m15 + m13);
        planes[2].normalize();
        vec3Set(planes[3].normal.array, m3 - m1, m7 - m5, m11 - m9);
        planes[3].distance = -(m15 - m13);
        planes[3].normalize();
        vec3Set(planes[4].normal.array, m3 - m2, m7 - m6, m11 - m10);
        planes[4].distance = -(m15 - m14);
        planes[4].normalize();
        vec3Set(planes[5].normal.array, m3 + m2, m7 + m6, m11 + m10);
        planes[5].distance = -(m15 + m14);
        planes[5].normalize();
        // Perspective projection
        var boundingBox = this.boundingBox;
        var vertices = this.vertices;
        if (m15 === 0) {
            var aspect = m5 / m0;
            var zNear = -m14 / (m10 - 1);
            var zFar = -m14 / (m10 + 1);
            var farY = -zFar / m5;
            var nearY = -zNear / m5;
            // Update bounding box
            boundingBox.min.set(-farY * aspect, -farY, zFar);
            boundingBox.max.set(farY * aspect, farY, zNear);
            // update vertices
            //--- min z
            // min x
            vec3Set(vertices[0], -farY * aspect, -farY, zFar);
            vec3Set(vertices[1], -farY * aspect, farY, zFar);
            // max x
            vec3Set(vertices[2], farY * aspect, -farY, zFar);
            vec3Set(vertices[3], farY * aspect, farY, zFar);
            //-- max z
            vec3Set(vertices[4], -nearY * aspect, -nearY, zNear);
            vec3Set(vertices[5], -nearY * aspect, nearY, zNear);
            vec3Set(vertices[6], nearY * aspect, -nearY, zNear);
            vec3Set(vertices[7], nearY * aspect, nearY, zNear);
        } else {
            var left = (-1 - m12) / m0;
            var right = (1 - m12) / m0;
            var top = (1 - m13) / m5;
            var bottom = (-1 - m13) / m5;
            var near = (-1 - m14) / m10;
            var far = (1 - m14) / m10;
            boundingBox.min.set(Math.min(left, right), Math.min(bottom, top), Math.min(far, near));
            boundingBox.max.set(Math.max(right, left), Math.max(top, bottom), Math.max(near, far));
            var min = boundingBox.min.array;
            var max = boundingBox.max.array;
            //--- min z
            // min x
            vec3Set(vertices[0], min[0], min[1], min[2]);
            vec3Set(vertices[1], min[0], max[1], min[2]);
            // max x
            vec3Set(vertices[2], max[0], min[1], min[2]);
            vec3Set(vertices[3], max[0], max[1], min[2]);
            //-- max z
            vec3Set(vertices[4], min[0], min[1], max[2]);
            vec3Set(vertices[5], min[0], max[1], max[2]);
            vec3Set(vertices[6], max[0], min[1], max[2]);
            vec3Set(vertices[7], max[0], max[1], max[2]);
        }
    },
    /**
     * Apply a affine transform matrix and set to the given bounding box
     * @function
     * @param {clay.BoundingBox}
     * @param {clay.Matrix4}
     * @return {clay.BoundingBox}
     */ getTransformedBoundingBox: function() {
        var tmpVec3 = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].create();
        return function(bbox, matrix) {
            var vertices = this.vertices;
            var m4 = matrix.array;
            var min = bbox.min;
            var max = bbox.max;
            var minArr = min.array;
            var maxArr = max.array;
            var v = vertices[0];
            vec3TranformMat4(tmpVec3, v, m4);
            vec3Copy(minArr, tmpVec3);
            vec3Copy(maxArr, tmpVec3);
            for(var i = 1; i < 8; i++){
                v = vertices[i];
                vec3TranformMat4(tmpVec3, v, m4);
                minArr[0] = mathMin(tmpVec3[0], minArr[0]);
                minArr[1] = mathMin(tmpVec3[1], minArr[1]);
                minArr[2] = mathMin(tmpVec3[2], minArr[2]);
                maxArr[0] = mathMax(tmpVec3[0], maxArr[0]);
                maxArr[1] = mathMax(tmpVec3[1], maxArr[1]);
                maxArr[2] = mathMax(tmpVec3[2], maxArr[2]);
            }
            min._dirty = true;
            max._dirty = true;
            return bbox;
        };
    }()
};
const __TURBOPACK__default__export__ = Frustum;
}}),
"[project]/node_modules/claygl/src/Camera.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/Node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Matrix4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/math/Matrix4.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Frustum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/math/Frustum.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Ray$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/math/Ray.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/glmatrix/vec4.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/glmatrix/vec3.js [app-client] (ecmascript)");
;
;
;
;
;
;
/**
 * @constructor clay.Camera
 * @extends clay.Node
 */ var Camera = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].extend(function() {
    return /** @lends clay.Camera# */ {
        /**
         * Camera projection matrix
         * @type {clay.Matrix4}
         */ projectionMatrix: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Matrix4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](),
        /**
         * Inverse of camera projection matrix
         * @type {clay.Matrix4}
         */ invProjectionMatrix: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Matrix4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](),
        /**
         * View matrix, equal to inverse of camera's world matrix
         * @type {clay.Matrix4}
         */ viewMatrix: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Matrix4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](),
        /**
         * Camera frustum in view space
         * @type {clay.Frustum}
         */ frustum: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Frustum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]()
    };
}, function() {
    this.update(true);
}, /** @lends clay.Camera.prototype */ {
    update: function(force) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].prototype.update.call(this, force);
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Matrix4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].invert(this.viewMatrix, this.worldTransform);
        this.updateProjectionMatrix();
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Matrix4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].invert(this.invProjectionMatrix, this.projectionMatrix);
        this.frustum.setFromProjection(this.projectionMatrix);
    },
    /**
     * Set camera view matrix
     */ setViewMatrix: function(viewMatrix) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Matrix4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].copy(this.viewMatrix, viewMatrix);
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Matrix4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].invert(this.worldTransform, viewMatrix);
        this.decomposeWorldTransform();
    },
    /**
     * Decompose camera projection matrix
     */ decomposeProjectionMatrix: function() {},
    /**
     * Set camera projection matrix
     * @param {clay.Matrix4} projectionMatrix
     */ setProjectionMatrix: function(projectionMatrix) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Matrix4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].copy(this.projectionMatrix, projectionMatrix);
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Matrix4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].invert(this.invProjectionMatrix, projectionMatrix);
        this.decomposeProjectionMatrix();
    },
    /**
     * Update projection matrix, called after update
     */ updateProjectionMatrix: function() {},
    /**
     * Cast a picking ray from camera near plane to far plane
     * @function
     * @param {clay.Vector2} ndc
     * @param {clay.Ray} [out]
     * @return {clay.Ray}
     */ castRay: function() {
        var v4 = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].create();
        return function(ndc, out) {
            var ray = out !== undefined ? out : new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Ray$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
            var x = ndc.array[0];
            var y = ndc.array[1];
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].set(v4, x, y, -1, 1);
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].transformMat4(v4, v4, this.invProjectionMatrix.array);
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].transformMat4(v4, v4, this.worldTransform.array);
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].scale(ray.origin.array, v4, 1 / v4[3]);
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].set(v4, x, y, 1, 1);
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].transformMat4(v4, v4, this.invProjectionMatrix.array);
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].transformMat4(v4, v4, this.worldTransform.array);
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].scale(v4, v4, 1 / v4[3]);
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].sub(ray.direction.array, v4, ray.origin.array);
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].normalize(ray.direction.array, ray.direction.array);
            ray.direction._dirty = true;
            ray.origin._dirty = true;
            return ray;
        };
    }()
});
const __TURBOPACK__default__export__ = Camera;
}}),
"[project]/node_modules/claygl/src/Scene.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/Node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Light$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/Light.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Camera$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/Camera.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$BoundingBox$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/math/BoundingBox.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$util$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/core/util.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/glmatrix/mat4.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$LRU$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/core/LRU.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Matrix4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/math/Matrix4.js [app-client] (ecmascript)");
;
;
;
;
;
;
;
;
var IDENTITY = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].create();
var WORLDVIEW = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].create();
var programKeyCache = {};
function getProgramKey(lightNumbers) {
    var defineStr = [];
    var lightTypes = Object.keys(lightNumbers);
    lightTypes.sort();
    for(var i = 0; i < lightTypes.length; i++){
        var lightType = lightTypes[i];
        defineStr.push(lightType + ' ' + lightNumbers[lightType]);
    }
    var key = defineStr.join('\n');
    if (programKeyCache[key]) {
        return programKeyCache[key];
    }
    var id = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$util$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].genGUID();
    programKeyCache[key] = id;
    return id;
}
function RenderList() {
    this.opaque = [];
    this.transparent = [];
    this._opaqueCount = 0;
    this._transparentCount = 0;
}
RenderList.prototype.startCount = function() {
    this._opaqueCount = 0;
    this._transparentCount = 0;
};
RenderList.prototype.add = function(object, isTransparent) {
    if (isTransparent) {
        this.transparent[this._transparentCount++] = object;
    } else {
        this.opaque[this._opaqueCount++] = object;
    }
};
RenderList.prototype.endCount = function() {
    this.transparent.length = this._transparentCount;
    this.opaque.length = this._opaqueCount;
};
/**
 * @typedef {Object} clay.Scene.RenderList
 * @property {Array.<clay.Renderable>} opaque
 * @property {Array.<clay.Renderable>} transparent
 */ /**
 * @constructor clay.Scene
 * @extends clay.Node
 */ var Scene = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].extend(function() {
    return /** @lends clay.Scene# */ {
        /**
         * Global material of scene
         * @type {clay.Material}
         */ material: null,
        lights: [],
        /**
         * Scene bounding box in view space.
         * Used when camera needs to adujst the near and far plane automatically
         * so that the view frustum contains the visible objects as tightly as possible.
         * Notice:
         *  It is updated after rendering (in the step of frustum culling passingly). So may be not so accurate, but saves a lot of calculation
         *
         * @type {clay.BoundingBox}
         */ viewBoundingBoxLastFrame: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$BoundingBox$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](),
        // Uniforms for shadow map.
        shadowUniforms: {},
        _cameraList: [],
        // Properties to save the light information in the scene
        // Will be set in the render function
        _lightUniforms: {},
        _previousLightNumber: {},
        _lightNumber: {
        },
        _lightProgramKeys: {},
        _nodeRepository: {},
        _renderLists: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$LRU$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](20)
    };
}, function() {
    this._scene = this;
}, /** @lends clay.Scene.prototype. */ {
    // Add node to scene
    addToScene: function(node) {
        if (node instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Camera$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]) {
            if (this._cameraList.length > 0) {
                console.warn('Found multiple camera in one scene. Use the fist one.');
            }
            this._cameraList.push(node);
        } else if (node instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Light$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]) {
            this.lights.push(node);
        }
        if (node.name) {
            this._nodeRepository[node.name] = node;
        }
    },
    // Remove node from scene
    removeFromScene: function(node) {
        var idx;
        if (node instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Camera$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]) {
            idx = this._cameraList.indexOf(node);
            if (idx >= 0) {
                this._cameraList.splice(idx, 1);
            }
        } else if (node instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Light$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]) {
            idx = this.lights.indexOf(node);
            if (idx >= 0) {
                this.lights.splice(idx, 1);
            }
        }
        if (node.name) {
            delete this._nodeRepository[node.name];
        }
    },
    /**
     * Get node by name
     * @param  {string} name
     * @return {Node}
     * @DEPRECATED
     */ getNode: function(name) {
        return this._nodeRepository[name];
    },
    /**
     * Set main camera of the scene.
     * @param {claygl.Camera} camera
     */ setMainCamera: function(camera) {
        var idx = this._cameraList.indexOf(camera);
        if (idx >= 0) {
            this._cameraList.splice(idx, 1);
        }
        this._cameraList.unshift(camera);
    },
    /**
     * Get main camera of the scene.
     */ getMainCamera: function() {
        return this._cameraList[0];
    },
    getLights: function() {
        return this.lights;
    },
    updateLights: function() {
        var lights = this.lights;
        this._previousLightNumber = this._lightNumber;
        var lightNumber = {};
        for(var i = 0; i < lights.length; i++){
            var light = lights[i];
            if (light.invisible) {
                continue;
            }
            var group = light.group;
            if (!lightNumber[group]) {
                lightNumber[group] = {};
            }
            // User can use any type of light
            lightNumber[group][light.type] = lightNumber[group][light.type] || 0;
            lightNumber[group][light.type]++;
        }
        this._lightNumber = lightNumber;
        for(var groupId in lightNumber){
            this._lightProgramKeys[groupId] = getProgramKey(lightNumber[groupId]);
        }
        this._updateLightUniforms();
    },
    /**
     * Clone a node and it's children, including mesh, camera, light, etc.
     * Unlike using `Node#clone`. It will clone skeleton and remap the joints. Material will also be cloned.
     *
     * @param {clay.Node} node
     * @return {clay.Node}
     */ cloneNode: function(node) {
        var newNode = node.clone();
        var clonedNodesMap = {};
        function buildNodesMap(sNode, tNode) {
            clonedNodesMap[sNode.__uid__] = tNode;
            for(var i = 0; i < sNode._children.length; i++){
                var sChild = sNode._children[i];
                var tChild = tNode._children[i];
                buildNodesMap(sChild, tChild);
            }
        }
        buildNodesMap(node, newNode);
        newNode.traverse(function(newChild) {
            if (newChild.skeleton) {
                newChild.skeleton = newChild.skeleton.clone(clonedNodesMap);
            }
            if (newChild.material) {
                newChild.material = newChild.material.clone();
            }
        });
        return newNode;
    },
    /**
     * Traverse the scene and add the renderable object to the render list.
     * It needs camera for the frustum culling.
     *
     * @param {clay.Camera} camera
     * @param {boolean} updateSceneBoundingBox
     * @return {clay.Scene.RenderList}
     */ updateRenderList: function(camera, updateSceneBoundingBox) {
        var id = camera.__uid__;
        var renderList = this._renderLists.get(id);
        if (!renderList) {
            renderList = new RenderList();
            this._renderLists.put(id, renderList);
        }
        renderList.startCount();
        if (updateSceneBoundingBox) {
            this.viewBoundingBoxLastFrame.min.set(Infinity, Infinity, Infinity);
            this.viewBoundingBoxLastFrame.max.set(-Infinity, -Infinity, -Infinity);
        }
        var sceneMaterialTransparent = this.material && this.material.transparent || false;
        this._doUpdateRenderList(this, camera, sceneMaterialTransparent, renderList, updateSceneBoundingBox);
        renderList.endCount();
        return renderList;
    },
    /**
     * Get render list. Used after {@link clay.Scene#updateRenderList}
     * @param {clay.Camera} camera
     * @return {clay.Scene.RenderList}
     */ getRenderList: function(camera) {
        return this._renderLists.get(camera.__uid__);
    },
    _doUpdateRenderList: function(parent, camera, sceneMaterialTransparent, renderList, updateSceneBoundingBox) {
        if (parent.invisible) {
            return;
        }
        // TODO Optimize
        for(var i = 0; i < parent._children.length; i++){
            var child = parent._children[i];
            if (child.isRenderable()) {
                // Frustum culling
                var worldM = child.isSkinnedMesh() ? IDENTITY : child.worldTransform.array;
                var geometry = child.geometry;
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].multiplyAffine(WORLDVIEW, camera.viewMatrix.array, worldM);
                if (updateSceneBoundingBox && !geometry.boundingBox || !this.isFrustumCulled(child, camera, WORLDVIEW)) {
                    renderList.add(child, child.material.transparent || sceneMaterialTransparent);
                }
            }
            if (child._children.length > 0) {
                this._doUpdateRenderList(child, camera, sceneMaterialTransparent, renderList, updateSceneBoundingBox);
            }
        }
    },
    /**
     * If an scene object is culled by camera frustum
     *
     * Object can be a renderable or a light
     *
     * @param {clay.Node} object
     * @param {clay.Camera} camera
     * @param {Array.<number>} worldViewMat represented with array
     * @param {Array.<number>} projectionMat represented with array
     */ isFrustumCulled: function() {
        // Frustum culling
        // http://www.cse.chalmers.se/~uffe/vfc_bbox.pdf
        var cullingBoundingBox = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$BoundingBox$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
        var cullingMatrix = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Matrix4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
        return function(object, camera, worldViewMat) {
            // Bounding box can be a property of object(like light) or renderable.geometry
            // PENDING
            var geoBBox = object.boundingBox;
            if (!geoBBox) {
                if (object.skeleton && object.skeleton.boundingBox) {
                    geoBBox = object.skeleton.boundingBox;
                } else {
                    geoBBox = object.geometry.boundingBox;
                }
            }
            if (!geoBBox) {
                return false;
            }
            cullingMatrix.array = worldViewMat;
            cullingBoundingBox.transformFrom(geoBBox, cullingMatrix);
            // Passingly update the scene bounding box
            // FIXME exclude very large mesh like ground plane or terrain ?
            // FIXME Only rendererable which cast shadow ?
            // FIXME boundingBox becomes much larger after transformd.
            if (object.castShadow) {
                this.viewBoundingBoxLastFrame.union(cullingBoundingBox);
            }
            // Ignore frustum culling if object is skinned mesh.
            if (object.frustumCulling) {
                if (!cullingBoundingBox.intersectBoundingBox(camera.frustum.boundingBox)) {
                    return true;
                }
                cullingMatrix.array = camera.projectionMatrix.array;
                if (cullingBoundingBox.max.array[2] > 0 && cullingBoundingBox.min.array[2] < 0) {
                    // Clip in the near plane
                    cullingBoundingBox.max.array[2] = -1e-20;
                }
                cullingBoundingBox.applyProjection(cullingMatrix);
                var min = cullingBoundingBox.min.array;
                var max = cullingBoundingBox.max.array;
                if (max[0] < -1 || min[0] > 1 || max[1] < -1 || min[1] > 1 || max[2] < -1 || min[2] > 1) {
                    return true;
                }
            }
            return false;
        };
    }(),
    _updateLightUniforms: function() {
        var lights = this.lights;
        // Put the light cast shadow before the light not cast shadow
        lights.sort(lightSortFunc);
        var lightUniforms = this._lightUniforms;
        for(var group in lightUniforms){
            for(var symbol in lightUniforms[group]){
                lightUniforms[group][symbol].value.length = 0;
            }
        }
        for(var i = 0; i < lights.length; i++){
            var light = lights[i];
            if (light.invisible) {
                continue;
            }
            var group = light.group;
            for(var symbol in light.uniformTemplates){
                var uniformTpl = light.uniformTemplates[symbol];
                var value = uniformTpl.value(light);
                if (value == null) {
                    continue;
                }
                if (!lightUniforms[group]) {
                    lightUniforms[group] = {};
                }
                if (!lightUniforms[group][symbol]) {
                    lightUniforms[group][symbol] = {
                        type: '',
                        value: []
                    };
                }
                var lu = lightUniforms[group][symbol];
                lu.type = uniformTpl.type + 'v';
                switch(uniformTpl.type){
                    case '1i':
                    case '1f':
                    case 't':
                        lu.value.push(value);
                        break;
                    case '2f':
                    case '3f':
                    case '4f':
                        for(var j = 0; j < value.length; j++){
                            lu.value.push(value[j]);
                        }
                        break;
                    default:
                        console.error('Unkown light uniform type ' + uniformTpl.type);
                }
            }
        }
    },
    getLightGroups: function() {
        var lightGroups = [];
        for(var groupId in this._lightNumber){
            lightGroups.push(groupId);
        }
        return lightGroups;
    },
    getNumberChangedLightGroups: function() {
        var lightGroups = [];
        for(var groupId in this._lightNumber){
            if (this.isLightNumberChanged(groupId)) {
                lightGroups.push(groupId);
            }
        }
        return lightGroups;
    },
    // Determine if light group is different with since last frame
    // Used to determine whether to update shader and scene's uniforms in Renderer.render
    isLightNumberChanged: function(lightGroup) {
        var prevLightNumber = this._previousLightNumber;
        var currentLightNumber = this._lightNumber;
        // PENDING Performance
        for(var type in currentLightNumber[lightGroup]){
            if (!prevLightNumber[lightGroup]) {
                return true;
            }
            if (currentLightNumber[lightGroup][type] !== prevLightNumber[lightGroup][type]) {
                return true;
            }
        }
        for(var type in prevLightNumber[lightGroup]){
            if (!currentLightNumber[lightGroup]) {
                return true;
            }
            if (currentLightNumber[lightGroup][type] !== prevLightNumber[lightGroup][type]) {
                return true;
            }
        }
        return false;
    },
    getLightsNumbers: function(lightGroup) {
        return this._lightNumber[lightGroup];
    },
    getProgramKey: function(lightGroup) {
        return this._lightProgramKeys[lightGroup];
    },
    setLightUniforms: function() {
        function setUniforms(uniforms, program, renderer) {
            for(var symbol in uniforms){
                var lu = uniforms[symbol];
                if (lu.type === 'tv') {
                    if (!program.hasUniform(symbol)) {
                        continue;
                    }
                    var texSlots = [];
                    for(var i = 0; i < lu.value.length; i++){
                        var texture = lu.value[i];
                        var slot = program.takeCurrentTextureSlot(renderer, texture);
                        texSlots.push(slot);
                    }
                    program.setUniform(renderer.gl, '1iv', symbol, texSlots);
                } else {
                    program.setUniform(renderer.gl, lu.type, symbol, lu.value);
                }
            }
        }
        return function(program, lightGroup, renderer) {
            setUniforms(this._lightUniforms[lightGroup], program, renderer);
            // Set shadows
            setUniforms(this.shadowUniforms, program, renderer);
        };
    }(),
    /**
     * Dispose self, clear all the scene objects
     * But resources of gl like texuture, shader will not be disposed.
     * Mostly you should use disposeScene method in Renderer to do dispose.
     */ dispose: function() {
        this.material = null;
        this._opaqueList = [];
        this._transparentList = [];
        this.lights = [];
        this._lightUniforms = {};
        this._lightNumber = {};
        this._nodeRepository = {};
    }
});
function lightSortFunc(a, b) {
    if (b.castShadow && !a.castShadow) {
        return true;
    }
}
const __TURBOPACK__default__export__ = Scene;
}}),
"[project]/node_modules/claygl/src/TextureCube.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Texture$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/Texture.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/core/glenum.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$util$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/core/util.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$util$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/math/util.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$vendor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/core/vendor.js [app-client] (ecmascript)");
;
;
;
;
;
var isPowerOfTwo = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$util$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].isPowerOfTwo;
var targetList = [
    'px',
    'nx',
    'py',
    'ny',
    'pz',
    'nz'
];
/**
 * @constructor clay.TextureCube
 * @extends clay.Texture
 *
 * @example
 *     ...
 *     var mat = new clay.Material({
 *         shader: clay.shader.library.get('clay.phong', 'environmentMap')
 *     });
 *     var envMap = new clay.TextureCube();
 *     envMap.load({
 *         'px': 'assets/textures/sky/px.jpg',
 *         'nx': 'assets/textures/sky/nx.jpg'
 *         'py': 'assets/textures/sky/py.jpg'
 *         'ny': 'assets/textures/sky/ny.jpg'
 *         'pz': 'assets/textures/sky/pz.jpg'
 *         'nz': 'assets/textures/sky/nz.jpg'
 *     });
 *     mat.set('environmentMap', envMap);
 *     ...
 *     envMap.success(function () {
 *         // Wait for the sky texture loaded
 *         animation.on('frame', function (frameTime) {
 *             renderer.render(scene, camera);
 *         });
 *     });
 */ var TextureCube = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Texture$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].extend(function() {
    return /** @lends clay.TextureCube# */ {
        /**
         * @type {boolean}
         * @default false
         */ // PENDING cubemap should not flipY in default.
        // flipY: false,
        /**
         * @type {Object}
         * @property {?HTMLImageElement|HTMLCanvasElemnet} px
         * @property {?HTMLImageElement|HTMLCanvasElemnet} nx
         * @property {?HTMLImageElement|HTMLCanvasElemnet} py
         * @property {?HTMLImageElement|HTMLCanvasElemnet} ny
         * @property {?HTMLImageElement|HTMLCanvasElemnet} pz
         * @property {?HTMLImageElement|HTMLCanvasElemnet} nz
         */ image: {
            px: null,
            nx: null,
            py: null,
            ny: null,
            pz: null,
            nz: null
        },
        /**
         * Pixels data of each side. Will be ignored if images are set.
         * @type {Object}
         * @property {?Uint8Array} px
         * @property {?Uint8Array} nx
         * @property {?Uint8Array} py
         * @property {?Uint8Array} ny
         * @property {?Uint8Array} pz
         * @property {?Uint8Array} nz
         */ pixels: {
            px: null,
            nx: null,
            py: null,
            ny: null,
            pz: null,
            nz: null
        },
        /**
         * @type {Array.<Object>}
         */ mipmaps: []
    };
}, {
    textureType: 'textureCube',
    update: function(renderer) {
        var _gl = renderer.gl;
        _gl.bindTexture(_gl.TEXTURE_CUBE_MAP, this._cache.get('webgl_texture'));
        this.updateCommon(renderer);
        var glFormat = this.format;
        var glType = this.type;
        _gl.texParameteri(_gl.TEXTURE_CUBE_MAP, _gl.TEXTURE_WRAP_S, this.getAvailableWrapS());
        _gl.texParameteri(_gl.TEXTURE_CUBE_MAP, _gl.TEXTURE_WRAP_T, this.getAvailableWrapT());
        _gl.texParameteri(_gl.TEXTURE_CUBE_MAP, _gl.TEXTURE_MAG_FILTER, this.getAvailableMagFilter());
        _gl.texParameteri(_gl.TEXTURE_CUBE_MAP, _gl.TEXTURE_MIN_FILTER, this.getAvailableMinFilter());
        var anisotropicExt = renderer.getGLExtension('EXT_texture_filter_anisotropic');
        if (anisotropicExt && this.anisotropic > 1) {
            _gl.texParameterf(_gl.TEXTURE_CUBE_MAP, anisotropicExt.TEXTURE_MAX_ANISOTROPY_EXT, this.anisotropic);
        }
        // Fallback to float type if browser don't have half float extension
        if (glType === 36193) {
            var halfFloatExt = renderer.getGLExtension('OES_texture_half_float');
            if (!halfFloatExt) {
                glType = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].FLOAT;
            }
        }
        if (this.mipmaps.length) {
            var width = this.width;
            var height = this.height;
            for(var i = 0; i < this.mipmaps.length; i++){
                var mipmap = this.mipmaps[i];
                this._updateTextureData(_gl, mipmap, i, width, height, glFormat, glType);
                width /= 2;
                height /= 2;
            }
        } else {
            this._updateTextureData(_gl, this, 0, this.width, this.height, glFormat, glType);
            if (!this.NPOT && this.useMipmap) {
                _gl.generateMipmap(_gl.TEXTURE_CUBE_MAP);
            }
        }
        _gl.bindTexture(_gl.TEXTURE_CUBE_MAP, null);
    },
    _updateTextureData: function(_gl, data, level, width, height, glFormat, glType) {
        for(var i = 0; i < 6; i++){
            var target = targetList[i];
            var img = data.image && data.image[target];
            if (img) {
                _gl.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, level, glFormat, glFormat, glType, img);
            } else {
                _gl.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, level, glFormat, width, height, 0, glFormat, glType, data.pixels && data.pixels[target]);
            }
        }
    },
    /**
     * @param  {clay.Renderer} renderer
     * @memberOf clay.TextureCube.prototype
     */ generateMipmap: function(renderer) {
        var _gl = renderer.gl;
        if (this.useMipmap && !this.NPOT) {
            _gl.bindTexture(_gl.TEXTURE_CUBE_MAP, this._cache.get('webgl_texture'));
            _gl.generateMipmap(_gl.TEXTURE_CUBE_MAP);
        }
    },
    bind: function(renderer) {
        renderer.gl.bindTexture(renderer.gl.TEXTURE_CUBE_MAP, this.getWebGLTexture(renderer));
    },
    unbind: function(renderer) {
        renderer.gl.bindTexture(renderer.gl.TEXTURE_CUBE_MAP, null);
    },
    // Overwrite the isPowerOfTwo method
    isPowerOfTwo: function() {
        if (this.image.px) {
            return isPowerOfTwo(this.image.px.width) && isPowerOfTwo(this.image.px.height);
        } else {
            return isPowerOfTwo(this.width) && isPowerOfTwo(this.height);
        }
    },
    isRenderable: function() {
        if (this.image.px) {
            return isImageRenderable(this.image.px) && isImageRenderable(this.image.nx) && isImageRenderable(this.image.py) && isImageRenderable(this.image.ny) && isImageRenderable(this.image.pz) && isImageRenderable(this.image.nz);
        } else {
            return !!(this.width && this.height);
        }
    },
    load: function(imageList, crossOrigin) {
        var loading = 0;
        var self = this;
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$util$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].each(imageList, function(src, target) {
            var image = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$vendor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].createImage();
            if (crossOrigin) {
                image.crossOrigin = crossOrigin;
            }
            image.onload = function() {
                loading--;
                if (loading === 0) {
                    self.dirty();
                    self.trigger('success', self);
                }
            };
            image.onerror = function() {
                loading--;
            };
            loading++;
            image.src = src;
            self.image[target] = image;
        });
        return this;
    }
});
Object.defineProperty(TextureCube.prototype, 'width', {
    get: function() {
        if (this.image && this.image.px) {
            return this.image.px.width;
        }
        return this._width;
    },
    set: function(value) {
        if (this.image && this.image.px) {
            console.warn('Texture from image can\'t set width');
        } else {
            if (this._width !== value) {
                this.dirty();
            }
            this._width = value;
        }
    }
});
Object.defineProperty(TextureCube.prototype, 'height', {
    get: function() {
        if (this.image && this.image.px) {
            return this.image.px.height;
        }
        return this._height;
    },
    set: function(value) {
        if (this.image && this.image.px) {
            console.warn('Texture from image can\'t set height');
        } else {
            if (this._height !== value) {
                this.dirty();
            }
            this._height = value;
        }
    }
});
function isImageRenderable(image) {
    return image.width > 0 && image.height > 0;
}
const __TURBOPACK__default__export__ = TextureCube;
}}),
"[project]/node_modules/claygl/src/camera/Perspective.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Camera$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/Camera.js [app-client] (ecmascript)");
;
/**
 * @constructor clay.camera.Perspective
 * @extends clay.Camera
 */ var Perspective = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Camera$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].extend(/** @lends clay.camera.Perspective# */ {
    /**
     * Vertical field of view in degrees
     * @type {number}
     */ fov: 50,
    /**
     * Aspect ratio, typically viewport width / height
     * @type {number}
     */ aspect: 1,
    /**
     * Near bound of the frustum
     * @type {number}
     */ near: 0.1,
    /**
     * Far bound of the frustum
     * @type {number}
     */ far: 2000
}, /** @lends clay.camera.Perspective.prototype */ {
    updateProjectionMatrix: function() {
        var rad = this.fov / 180 * Math.PI;
        this.projectionMatrix.perspective(rad, this.aspect, this.near, this.far);
    },
    decomposeProjectionMatrix: function() {
        var m = this.projectionMatrix.array;
        var rad = Math.atan(1 / m[5]) * 2;
        this.fov = rad / Math.PI * 180;
        this.aspect = m[5] / m[0];
        this.near = m[14] / (m[10] - 1);
        this.far = m[14] / (m[10] + 1);
    },
    /**
     * @return {clay.camera.Perspective}
     */ clone: function() {
        var camera = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Camera$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].prototype.clone.call(this);
        camera.fov = this.fov;
        camera.aspect = this.aspect;
        camera.near = this.near;
        camera.far = this.far;
        return camera;
    }
});
const __TURBOPACK__default__export__ = Perspective;
}}),
"[project]/node_modules/claygl/src/FrameBuffer.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$Base$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/core/Base.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Texture$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/Texture.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/core/glenum.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$Cache$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/core/Cache.js [app-client] (ecmascript)");
;
;
;
;
;
var KEY_FRAMEBUFFER = 'framebuffer';
var KEY_RENDERBUFFER = 'renderbuffer';
var KEY_RENDERBUFFER_WIDTH = KEY_RENDERBUFFER + '_width';
var KEY_RENDERBUFFER_HEIGHT = KEY_RENDERBUFFER + '_height';
var KEY_RENDERBUFFER_ATTACHED = KEY_RENDERBUFFER + '_attached';
var KEY_DEPTHTEXTURE_ATTACHED = 'depthtexture_attached';
var GL_FRAMEBUFFER = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].FRAMEBUFFER;
var GL_RENDERBUFFER = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].RENDERBUFFER;
var GL_DEPTH_ATTACHMENT = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].DEPTH_ATTACHMENT;
var GL_COLOR_ATTACHMENT0 = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].COLOR_ATTACHMENT0;
/**
 * @constructor clay.FrameBuffer
 * @extends clay.core.Base
 */ var FrameBuffer = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$Base$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].extend(/** @lends clay.FrameBuffer# */ {
    /**
     * If use depth buffer
     * @type {boolean}
     */ depthBuffer: true,
    /**
     * @type {Object}
     */ viewport: null,
    _width: 0,
    _height: 0,
    _textures: null,
    _boundRenderer: null
}, function() {
    // Use cache
    this._cache = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$Cache$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
    this._textures = {};
}, /**@lends clay.FrameBuffer.prototype. */ {
    /**
     * Get attached texture width
     * {number}
     */ // FIXME Can't use before #bind
    getTextureWidth: function() {
        return this._width;
    },
    /**
     * Get attached texture height
     * {number}
     */ getTextureHeight: function() {
        return this._height;
    },
    /**
     * Bind the framebuffer to given renderer before rendering
     * @param  {clay.Renderer} renderer
     */ bind: function(renderer) {
        if (renderer.__currentFrameBuffer) {
            // Already bound
            if (renderer.__currentFrameBuffer === this) {
                return;
            }
            console.warn('Renderer already bound with another framebuffer. Unbind it first');
        }
        renderer.__currentFrameBuffer = this;
        var _gl = renderer.gl;
        _gl.bindFramebuffer(GL_FRAMEBUFFER, this._getFrameBufferGL(renderer));
        this._boundRenderer = renderer;
        var cache = this._cache;
        cache.put('viewport', renderer.viewport);
        var hasTextureAttached = false;
        var width;
        var height;
        for(var attachment in this._textures){
            hasTextureAttached = true;
            var obj = this._textures[attachment];
            if (obj) {
                // TODO Do width, height checking, make sure size are same
                width = obj.texture.width;
                height = obj.texture.height;
                // Attach textures
                this._doAttach(renderer, obj.texture, attachment, obj.target);
            }
        }
        this._width = width;
        this._height = height;
        if (!hasTextureAttached && this.depthBuffer) {
            console.error('Must attach texture before bind, or renderbuffer may have incorrect width and height.');
        }
        if (this.viewport) {
            renderer.setViewport(this.viewport);
        } else {
            renderer.setViewport(0, 0, width, height, 1);
        }
        var attachedTextures = cache.get('attached_textures');
        if (attachedTextures) {
            for(var attachment in attachedTextures){
                if (!this._textures[attachment]) {
                    var target = attachedTextures[attachment];
                    this._doDetach(_gl, attachment, target);
                }
            }
        }
        if (!cache.get(KEY_DEPTHTEXTURE_ATTACHED) && this.depthBuffer) {
            // Create a new render buffer
            if (cache.miss(KEY_RENDERBUFFER)) {
                cache.put(KEY_RENDERBUFFER, _gl.createRenderbuffer());
            }
            var renderbuffer = cache.get(KEY_RENDERBUFFER);
            if (width !== cache.get(KEY_RENDERBUFFER_WIDTH) || height !== cache.get(KEY_RENDERBUFFER_HEIGHT)) {
                _gl.bindRenderbuffer(GL_RENDERBUFFER, renderbuffer);
                _gl.renderbufferStorage(GL_RENDERBUFFER, _gl.DEPTH_COMPONENT16, width, height);
                cache.put(KEY_RENDERBUFFER_WIDTH, width);
                cache.put(KEY_RENDERBUFFER_HEIGHT, height);
                _gl.bindRenderbuffer(GL_RENDERBUFFER, null);
            }
            if (!cache.get(KEY_RENDERBUFFER_ATTACHED)) {
                _gl.framebufferRenderbuffer(GL_FRAMEBUFFER, GL_DEPTH_ATTACHMENT, GL_RENDERBUFFER, renderbuffer);
                cache.put(KEY_RENDERBUFFER_ATTACHED, true);
            }
        }
    },
    /**
     * Unbind the frame buffer after rendering
     * @param  {clay.Renderer} renderer
     */ unbind: function(renderer) {
        // Remove status record on renderer
        renderer.__currentFrameBuffer = null;
        var _gl = renderer.gl;
        _gl.bindFramebuffer(GL_FRAMEBUFFER, null);
        this._boundRenderer = null;
        this._cache.use(renderer.__uid__);
        var viewport = this._cache.get('viewport');
        // Reset viewport;
        if (viewport) {
            renderer.setViewport(viewport);
        }
        this.updateMipmap(renderer);
    },
    // Because the data of texture is changed over time,
    // Here update the mipmaps of texture each time after rendered;
    updateMipmap: function(renderer) {
        var _gl = renderer.gl;
        for(var attachment in this._textures){
            var obj = this._textures[attachment];
            if (obj) {
                var texture = obj.texture;
                // FIXME some texture format can't generate mipmap
                if (!texture.NPOT && texture.useMipmap && texture.minFilter === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Texture$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].LINEAR_MIPMAP_LINEAR) {
                    var target = texture.textureType === 'textureCube' ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].TEXTURE_CUBE_MAP : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].TEXTURE_2D;
                    _gl.bindTexture(target, texture.getWebGLTexture(renderer));
                    _gl.generateMipmap(target);
                    _gl.bindTexture(target, null);
                }
            }
        }
    },
    // 0x8CD5, 36053, FRAMEBUFFER_COMPLETE
    // 0x8CD6, 36054, FRAMEBUFFER_INCOMPLETE_ATTACHMENT
    // 0x8CD7, 36055, FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT
    // 0x8CD9, 36057, FRAMEBUFFER_INCOMPLETE_DIMENSIONS
    // 0x8CDD, 36061, FRAMEBUFFER_UNSUPPORTED
    checkStatus: function(_gl) {
        return _gl.checkFramebufferStatus(GL_FRAMEBUFFER);
    },
    _getFrameBufferGL: function(renderer) {
        var cache = this._cache;
        cache.use(renderer.__uid__);
        if (cache.miss(KEY_FRAMEBUFFER)) {
            cache.put(KEY_FRAMEBUFFER, renderer.gl.createFramebuffer());
        }
        return cache.get(KEY_FRAMEBUFFER);
    },
    /**
     * Attach a texture(RTT) to the framebuffer
     * @param  {clay.Texture} texture
     * @param  {number} [attachment=gl.COLOR_ATTACHMENT0]
     * @param  {number} [target=gl.TEXTURE_2D]
     */ attach: function(texture, attachment, target) {
        if (!texture.width) {
            throw new Error('The texture attached to color buffer is not a valid.');
        }
        // TODO width and height check
        // If the depth_texture extension is enabled, developers
        // Can attach a depth texture to the depth buffer
        // http://blog.tojicode.com/2012/07/using-webgldepthtexture.html
        attachment = attachment || GL_COLOR_ATTACHMENT0;
        target = target || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].TEXTURE_2D;
        var boundRenderer = this._boundRenderer;
        var _gl = boundRenderer && boundRenderer.gl;
        var attachedTextures;
        if (_gl) {
            var cache = this._cache;
            cache.use(boundRenderer.__uid__);
            attachedTextures = cache.get('attached_textures');
        }
        // Check if texture attached
        var previous = this._textures[attachment];
        if (previous && previous.target === target && previous.texture === texture && attachedTextures && attachedTextures[attachment] != null) {
            return;
        }
        var canAttach = true;
        if (boundRenderer) {
            canAttach = this._doAttach(boundRenderer, texture, attachment, target);
            // Set viewport again incase attached to different size textures.
            if (!this.viewport) {
                boundRenderer.setViewport(0, 0, texture.width, texture.height, 1);
            }
        }
        if (canAttach) {
            this._textures[attachment] = this._textures[attachment] || {};
            this._textures[attachment].texture = texture;
            this._textures[attachment].target = target;
        }
    },
    _doAttach: function(renderer, texture, attachment, target) {
        var _gl = renderer.gl;
        // Make sure texture is always updated
        // Because texture width or height may be changed and in this we can't be notified
        // FIXME awkward;
        var webglTexture = texture.getWebGLTexture(renderer);
        // Assume cache has been used.
        var attachedTextures = this._cache.get('attached_textures');
        if (attachedTextures && attachedTextures[attachment]) {
            var obj = attachedTextures[attachment];
            // Check if texture and target not changed
            if (obj.texture === texture && obj.target === target) {
                return;
            }
        }
        attachment = +attachment;
        var canAttach = true;
        if (attachment === GL_DEPTH_ATTACHMENT || attachment === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].DEPTH_STENCIL_ATTACHMENT) {
            var extension = renderer.getGLExtension('WEBGL_depth_texture');
            if (!extension) {
                console.error('Depth texture is not supported by the browser');
                canAttach = false;
            }
            if (texture.format !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].DEPTH_COMPONENT && texture.format !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].DEPTH_STENCIL) {
                console.error('The texture attached to depth buffer is not a valid.');
                canAttach = false;
            }
            // Dispose render buffer created previous
            if (canAttach) {
                var renderbuffer = this._cache.get(KEY_RENDERBUFFER);
                if (renderbuffer) {
                    _gl.framebufferRenderbuffer(GL_FRAMEBUFFER, GL_DEPTH_ATTACHMENT, GL_RENDERBUFFER, null);
                    _gl.deleteRenderbuffer(renderbuffer);
                    this._cache.put(KEY_RENDERBUFFER, false);
                }
                this._cache.put(KEY_RENDERBUFFER_ATTACHED, false);
                this._cache.put(KEY_DEPTHTEXTURE_ATTACHED, true);
            }
        }
        // Mipmap level can only be 0
        _gl.framebufferTexture2D(GL_FRAMEBUFFER, attachment, target, webglTexture, 0);
        if (!attachedTextures) {
            attachedTextures = {};
            this._cache.put('attached_textures', attachedTextures);
        }
        attachedTextures[attachment] = attachedTextures[attachment] || {};
        attachedTextures[attachment].texture = texture;
        attachedTextures[attachment].target = target;
        return canAttach;
    },
    _doDetach: function(_gl, attachment, target) {
        // Detach a texture from framebuffer
        // https://github.com/KhronosGroup/WebGL/blob/master/conformance-suites/1.0.0/conformance/framebuffer-test.html#L145
        _gl.framebufferTexture2D(GL_FRAMEBUFFER, attachment, target, null, 0);
        // Assume cache has been used.
        var attachedTextures = this._cache.get('attached_textures');
        if (attachedTextures && attachedTextures[attachment]) {
            attachedTextures[attachment] = null;
        }
        if (attachment === GL_DEPTH_ATTACHMENT || attachment === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].DEPTH_STENCIL_ATTACHMENT) {
            this._cache.put(KEY_DEPTHTEXTURE_ATTACHED, false);
        }
    },
    /**
     * Detach a texture
     * @param  {number} [attachment=gl.COLOR_ATTACHMENT0]
     * @param  {number} [target=gl.TEXTURE_2D]
     */ detach: function(attachment, target) {
        // TODO depth extension check ?
        this._textures[attachment] = null;
        if (this._boundRenderer) {
            var cache = this._cache;
            cache.use(this._boundRenderer.__uid__);
            this._doDetach(this._boundRenderer.gl, attachment, target);
        }
    },
    /**
     * Dispose
     * @param  {WebGLRenderingContext} _gl
     */ dispose: function(renderer) {
        var _gl = renderer.gl;
        var cache = this._cache;
        cache.use(renderer.__uid__);
        var renderBuffer = cache.get(KEY_RENDERBUFFER);
        if (renderBuffer) {
            _gl.deleteRenderbuffer(renderBuffer);
        }
        var frameBuffer = cache.get(KEY_FRAMEBUFFER);
        if (frameBuffer) {
            _gl.deleteFramebuffer(frameBuffer);
        }
        cache.deleteContext(renderer.__uid__);
        // Clear cache for reusing
        this._textures = {};
    }
});
FrameBuffer.DEPTH_ATTACHMENT = GL_DEPTH_ATTACHMENT;
FrameBuffer.COLOR_ATTACHMENT0 = GL_COLOR_ATTACHMENT0;
FrameBuffer.STENCIL_ATTACHMENT = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].STENCIL_ATTACHMENT;
FrameBuffer.DEPTH_STENCIL_ATTACHMENT = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].DEPTH_STENCIL_ATTACHMENT;
const __TURBOPACK__default__export__ = FrameBuffer;
}}),
"[project]/node_modules/claygl/src/prePass/EnvironmentMap.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$Base$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/core/Base.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/math/Vector3.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$camera$2f$Perspective$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/camera/Perspective.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$FrameBuffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/FrameBuffer.js [app-client] (ecmascript)");
;
;
;
;
var targets = [
    'px',
    'nx',
    'py',
    'ny',
    'pz',
    'nz'
];
/**
 * Pass rendering scene to a environment cube map
 *
 * @constructor clay.prePass.EnvironmentMap
 * @extends clay.core.Base
 * @example
 *     // Example of car reflection
 *     var envMap = new clay.TextureCube({
 *         width: 256,
 *         height: 256
 *     });
 *     var envPass = new clay.prePass.EnvironmentMap({
 *         position: car.position,
 *         texture: envMap
 *     });
 *     var carBody = car.getChildByName('body');
 *     carBody.material.enableTexture('environmentMap');
 *     carBody.material.set('environmentMap', envMap);
 *     ...
 *     animation.on('frame', function(frameTime) {
 *         envPass.render(renderer, scene);
 *         renderer.render(scene, camera);
 *     });
 */ var EnvironmentMapPass = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$Base$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].extend(function() {
    var ret = /** @lends clay.prePass.EnvironmentMap# */ {
        /**
         * Camera position
         * @type {clay.Vector3}
         * @memberOf clay.prePass.EnvironmentMap#
         */ position: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](),
        /**
         * Camera far plane
         * @type {number}
         * @memberOf clay.prePass.EnvironmentMap#
         */ far: 1000,
        /**
         * Camera near plane
         * @type {number}
         * @memberOf clay.prePass.EnvironmentMap#
         */ near: 0.1,
        /**
         * Environment cube map
         * @type {clay.TextureCube}
         * @memberOf clay.prePass.EnvironmentMap#
         */ texture: null,
        /**
         * Used if you wan't have shadow in environment map
         * @type {clay.prePass.ShadowMap}
         */ shadowMapPass: null
    };
    var cameras = ret._cameras = {
        px: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$camera$2f$Perspective$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]({
            fov: 90
        }),
        nx: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$camera$2f$Perspective$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]({
            fov: 90
        }),
        py: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$camera$2f$Perspective$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]({
            fov: 90
        }),
        ny: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$camera$2f$Perspective$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]({
            fov: 90
        }),
        pz: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$camera$2f$Perspective$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]({
            fov: 90
        }),
        nz: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$camera$2f$Perspective$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]({
            fov: 90
        })
    };
    cameras.px.lookAt(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].POSITIVE_X, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].NEGATIVE_Y);
    cameras.nx.lookAt(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].NEGATIVE_X, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].NEGATIVE_Y);
    cameras.py.lookAt(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].POSITIVE_Y, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].POSITIVE_Z);
    cameras.ny.lookAt(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].NEGATIVE_Y, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].NEGATIVE_Z);
    cameras.pz.lookAt(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].POSITIVE_Z, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].NEGATIVE_Y);
    cameras.nz.lookAt(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].NEGATIVE_Z, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].NEGATIVE_Y);
    // FIXME In windows, use one framebuffer only renders one side of cubemap
    ret._frameBuffer = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$FrameBuffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
    return ret;
}, /** @lends clay.prePass.EnvironmentMap# */ {
    /**
     * @param  {string} target
     * @return  {clay.Camera}
     */ getCamera: function(target) {
        return this._cameras[target];
    },
    /**
     * @param  {clay.Renderer} renderer
     * @param  {clay.Scene} scene
     * @param  {boolean} [notUpdateScene=false]
     */ render: function(renderer, scene, notUpdateScene) {
        var _gl = renderer.gl;
        if (!notUpdateScene) {
            scene.update();
        }
        // Tweak fov
        // http://the-witness.net/news/2012/02/seamless-cube-map-filtering/
        var n = this.texture.width;
        var fov = 2 * Math.atan(n / (n - 0.5)) / Math.PI * 180;
        for(var i = 0; i < 6; i++){
            var target = targets[i];
            var camera = this._cameras[target];
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].copy(camera.position, this.position);
            camera.far = this.far;
            camera.near = this.near;
            camera.fov = fov;
            if (this.shadowMapPass) {
                camera.update();
                // update boundingBoxLastFrame
                var bbox = scene.getBoundingBox();
                bbox.applyTransform(camera.viewMatrix);
                scene.viewBoundingBoxLastFrame.copy(bbox);
                this.shadowMapPass.render(renderer, scene, camera, true);
            }
            this._frameBuffer.attach(this.texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i);
            this._frameBuffer.bind(renderer);
            renderer.render(scene, camera, true);
            this._frameBuffer.unbind(renderer);
        }
    },
    /**
     * @param {clay.Renderer} renderer
     */ dispose: function(renderer) {
        this._frameBuffer.dispose(renderer);
    }
});
const __TURBOPACK__default__export__ = EnvironmentMapPass;
}}),
"[project]/node_modules/claygl/src/geometry/Plane.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Geometry$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/Geometry.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$BoundingBox$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/math/BoundingBox.js [app-client] (ecmascript)");
;
;
/**
 * @constructor clay.geometry.Plane
 * @extends clay.Geometry
 * @param {Object} [opt]
 * @param {number} [opt.widthSegments]
 * @param {number} [opt.heightSegments]
 */ var Plane = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Geometry$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].extend(/** @lends clay.geometry.Plane# */ {
    dynamic: false,
    /**
     * @type {number}
     */ widthSegments: 1,
    /**
     * @type {number}
     */ heightSegments: 1
}, function() {
    this.build();
}, /** @lends clay.geometry.Plane.prototype */ {
    /**
     * Build plane geometry
     */ build: function() {
        var heightSegments = this.heightSegments;
        var widthSegments = this.widthSegments;
        var attributes = this.attributes;
        var positions = [];
        var texcoords = [];
        var normals = [];
        var faces = [];
        for(var y = 0; y <= heightSegments; y++){
            var t = y / heightSegments;
            for(var x = 0; x <= widthSegments; x++){
                var s = x / widthSegments;
                positions.push([
                    2 * s - 1,
                    2 * t - 1,
                    0
                ]);
                if ("TURBOPACK compile-time truthy", 1) {
                    texcoords.push([
                        s,
                        t
                    ]);
                }
                if ("TURBOPACK compile-time truthy", 1) {
                    normals.push([
                        0,
                        0,
                        1
                    ]);
                }
                if (x < widthSegments && y < heightSegments) {
                    var i = x + y * (widthSegments + 1);
                    faces.push([
                        i,
                        i + 1,
                        i + widthSegments + 1
                    ]);
                    faces.push([
                        i + widthSegments + 1,
                        i + 1,
                        i + widthSegments + 2
                    ]);
                }
            }
        }
        attributes.position.fromArray(positions);
        attributes.texcoord0.fromArray(texcoords);
        attributes.normal.fromArray(normals);
        this.initIndicesFromArray(faces);
        this.boundingBox = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$BoundingBox$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
        this.boundingBox.min.set(-1, -1, 0);
        this.boundingBox.max.set(1, 1, 0);
    }
});
const __TURBOPACK__default__export__ = Plane;
}}),
"[project]/node_modules/claygl/src/geometry/Cube.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Geometry$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/Geometry.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$geometry$2f$Plane$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/geometry/Plane.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Matrix4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/math/Matrix4.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/math/Vector3.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$BoundingBox$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/math/BoundingBox.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$vendor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/core/vendor.js [app-client] (ecmascript)");
;
;
;
;
;
;
var planeMatrix = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Matrix4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
/**
 * @constructor clay.geometry.Cube
 * @extends clay.Geometry
 * @param {Object} [opt]
 * @param {number} [opt.widthSegments]
 * @param {number} [opt.heightSegments]
 * @param {number} [opt.depthSegments]
 * @param {boolean} [opt.inside]
 */ var Cube = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Geometry$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].extend(/**@lends clay.geometry.Cube# */ {
    dynamic: false,
    /**
     * @type {number}
     */ widthSegments: 1,
    /**
     * @type {number}
     */ heightSegments: 1,
    /**
     * @type {number}
     */ depthSegments: 1,
    /**
     * @type {boolean}
     */ inside: false
}, function() {
    this.build();
}, /** @lends clay.geometry.Cube.prototype */ {
    /**
     * Build cube geometry
     */ build: function() {
        var planes = {
            'px': createPlane('px', this.depthSegments, this.heightSegments),
            'nx': createPlane('nx', this.depthSegments, this.heightSegments),
            'py': createPlane('py', this.widthSegments, this.depthSegments),
            'ny': createPlane('ny', this.widthSegments, this.depthSegments),
            'pz': createPlane('pz', this.widthSegments, this.heightSegments),
            'nz': createPlane('nz', this.widthSegments, this.heightSegments)
        };
        var attrList = [
            'position',
            'texcoord0',
            'normal'
        ];
        var vertexNumber = 0;
        var faceNumber = 0;
        for(var pos in planes){
            vertexNumber += planes[pos].vertexCount;
            faceNumber += planes[pos].indices.length;
        }
        for(var k = 0; k < attrList.length; k++){
            this.attributes[attrList[k]].init(vertexNumber);
        }
        this.indices = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$vendor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].Uint16Array(faceNumber);
        var faceOffset = 0;
        var vertexOffset = 0;
        for(var pos in planes){
            var plane = planes[pos];
            for(var k = 0; k < attrList.length; k++){
                var attrName = attrList[k];
                var attrArray = plane.attributes[attrName].value;
                var attrSize = plane.attributes[attrName].size;
                var isNormal = attrName === 'normal';
                for(var i = 0; i < attrArray.length; i++){
                    var value = attrArray[i];
                    if (this.inside && isNormal) {
                        value = -value;
                    }
                    this.attributes[attrName].value[i + attrSize * vertexOffset] = value;
                }
            }
            var len = plane.indices.length;
            for(var i = 0; i < plane.indices.length; i++){
                this.indices[i + faceOffset] = vertexOffset + plane.indices[this.inside ? len - i - 1 : i];
            }
            faceOffset += plane.indices.length;
            vertexOffset += plane.vertexCount;
        }
        this.boundingBox = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$BoundingBox$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
        this.boundingBox.max.set(1, 1, 1);
        this.boundingBox.min.set(-1, -1, -1);
    }
});
function createPlane(pos, widthSegments, heightSegments) {
    planeMatrix.identity();
    var plane = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$geometry$2f$Plane$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]({
        widthSegments: widthSegments,
        heightSegments: heightSegments
    });
    switch(pos){
        case 'px':
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Matrix4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].translate(planeMatrix, planeMatrix, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].POSITIVE_X);
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Matrix4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].rotateY(planeMatrix, planeMatrix, Math.PI / 2);
            break;
        case 'nx':
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Matrix4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].translate(planeMatrix, planeMatrix, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].NEGATIVE_X);
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Matrix4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].rotateY(planeMatrix, planeMatrix, -Math.PI / 2);
            break;
        case 'py':
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Matrix4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].translate(planeMatrix, planeMatrix, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].POSITIVE_Y);
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Matrix4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].rotateX(planeMatrix, planeMatrix, -Math.PI / 2);
            break;
        case 'ny':
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Matrix4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].translate(planeMatrix, planeMatrix, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].NEGATIVE_Y);
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Matrix4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].rotateX(planeMatrix, planeMatrix, Math.PI / 2);
            break;
        case 'pz':
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Matrix4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].translate(planeMatrix, planeMatrix, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].POSITIVE_Z);
            break;
        case 'nz':
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Matrix4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].translate(planeMatrix, planeMatrix, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].NEGATIVE_Z);
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Matrix4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].rotateY(planeMatrix, planeMatrix, Math.PI);
            break;
    }
    plane.applyTransform(planeMatrix);
    return plane;
}
const __TURBOPACK__default__export__ = Cube;
}}),
"[project]/node_modules/claygl/src/shader/source/skybox.glsl.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
const __TURBOPACK__default__export__ = "@export clay.skybox.vertex\n#define SHADER_NAME skybox\nuniform mat4 world : WORLD;\nuniform mat4 worldViewProjection : WORLDVIEWPROJECTION;\nattribute vec3 position : POSITION;\nvarying vec3 v_WorldPosition;\nvoid main()\n{\n v_WorldPosition = (world * vec4(position, 1.0)).xyz;\n gl_Position = worldViewProjection * vec4(position, 1.0);\n}\n@end\n@export clay.skybox.fragment\n#define PI 3.1415926\nuniform mat4 viewInverse : VIEWINVERSE;\n#ifdef EQUIRECTANGULAR\nuniform sampler2D environmentMap;\n#else\nuniform samplerCube environmentMap;\n#endif\nuniform float lod: 0.0;\nvarying vec3 v_WorldPosition;\n@import clay.util.rgbm\n@import clay.util.srgb\n@import clay.util.ACES\nvoid main()\n{\n vec3 eyePos = viewInverse[3].xyz;\n vec3 V = normalize(v_WorldPosition - eyePos);\n#ifdef EQUIRECTANGULAR\n float phi = acos(V.y);\n float theta = atan(-V.x, V.z) + PI * 0.5;\n vec2 uv = vec2(theta / 2.0 / PI, phi / PI);\n vec4 texel = decodeHDR(texture2D(environmentMap, fract(uv)));\n#else\n #if defined(LOD) || defined(SUPPORT_TEXTURE_LOD)\n vec4 texel = decodeHDR(textureCubeLodEXT(environmentMap, V, lod));\n #else\n vec4 texel = decodeHDR(textureCube(environmentMap, V));\n #endif\n#endif\n#ifdef SRGB_DECODE\n texel = sRGBToLinear(texel);\n#endif\n#ifdef TONEMAPPING\n texel.rgb = ACESToneMapping(texel.rgb);\n#endif\n#ifdef SRGB_ENCODE\n texel = linearTosRGB(texel);\n#endif\n gl_FragColor = encodeHDR(vec4(texel.rgb, 1.0));\n}\n@end";
}}),
"[project]/node_modules/claygl/src/plugin/Skybox.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// TODO Should not derived from mesh?
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Mesh$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/Mesh.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$geometry$2f$Cube$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/geometry/Cube.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Shader$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/Shader.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Material$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/Material.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Texture$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/Texture.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$camera$2f$Perspective$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/camera/Perspective.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Matrix4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/math/Matrix4.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$shader$2f$source$2f$skybox$2e$glsl$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/shader/source/skybox.glsl.js [app-client] (ecmascript)");
;
;
;
;
;
;
;
;
__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Shader$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].import(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$shader$2f$source$2f$skybox$2e$glsl$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]);
/**
 * @constructor clay.plugin.Skybox
 *
 * @example
 *     var skyTex = new clay.TextureCube();
 *     skyTex.load({
 *         'px': 'assets/textures/sky/px.jpg',
 *         'nx': 'assets/textures/sky/nx.jpg'
 *         'py': 'assets/textures/sky/py.jpg'
 *         'ny': 'assets/textures/sky/ny.jpg'
 *         'pz': 'assets/textures/sky/pz.jpg'
 *         'nz': 'assets/textures/sky/nz.jpg'
 *     });
 *     var skybox = new clay.plugin.Skybox({
 *         scene: scene
 *     });
 *     skybox.material.set('environmentMap', skyTex);
 */ var Skybox = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Mesh$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].extend(function() {
    var skyboxShader = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Shader$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]({
        vertex: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Shader$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].source('clay.skybox.vertex'),
        fragment: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Shader$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].source('clay.skybox.fragment')
    });
    var material = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Material$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]({
        shader: skyboxShader,
        depthMask: false
    });
    return {
        /**
         * @type {clay.Scene}
         * @memberOf clay.plugin.Skybox.prototype
         */ scene: null,
        geometry: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$geometry$2f$Cube$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](),
        material: material,
        environmentMap: null,
        culling: false,
        _dummyCamera: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$camera$2f$Perspective$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]()
    };
}, function() {
    var scene = this.scene;
    if (scene) {
        this.attachScene(scene);
    }
    if (this.environmentMap) {
        this.setEnvironmentMap(this.environmentMap);
    }
}, /** @lends clay.plugin.Skybox# */ {
    /**
     * Attach the skybox to the scene
     * @param  {clay.Scene} scene
     */ attachScene: function(scene) {
        if (this.scene) {
            this.detachScene();
        }
        scene.skybox = this;
        this.scene = scene;
        scene.on('beforerender', this._beforeRenderScene, this);
    },
    /**
     * Detach from scene
     */ detachScene: function() {
        if (this.scene) {
            this.scene.off('beforerender', this._beforeRenderScene);
            this.scene.skybox = null;
        }
        this.scene = null;
    },
    /**
     * Dispose skybox
     * @param  {clay.Renderer} renderer
     */ dispose: function(renderer) {
        this.detachScene();
        this.geometry.dispose(renderer);
    },
    /**
     * Set environment map
     * @param {clay.TextureCube} envMap
     */ setEnvironmentMap: function(envMap) {
        if (envMap.textureType === 'texture2D') {
            this.material.define('EQUIRECTANGULAR');
            // LINEAR filter can remove the artifacts in pole
            envMap.minFilter = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Texture$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].LINEAR;
        } else {
            this.material.undefine('EQUIRECTANGULAR');
        }
        this.material.set('environmentMap', envMap);
    },
    /**
     * Get environment map
     * @return {clay.TextureCube}
     */ getEnvironmentMap: function() {
        return this.material.get('environmentMap');
    },
    _beforeRenderScene: function(renderer, scene, camera) {
        this.renderSkybox(renderer, camera);
    },
    renderSkybox: function(renderer, camera) {
        var dummyCamera = this._dummyCamera;
        dummyCamera.aspect = renderer.getViewportAspect();
        dummyCamera.fov = camera.fov || 50;
        dummyCamera.updateProjectionMatrix();
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Matrix4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].invert(dummyCamera.invProjectionMatrix, dummyCamera.projectionMatrix);
        dummyCamera.worldTransform.copy(camera.worldTransform);
        dummyCamera.viewMatrix.copy(camera.viewMatrix);
        this.position.copy(camera.getWorldPosition());
        this.update();
        // Don't remember to disable blend
        renderer.gl.disable(renderer.gl.BLEND);
        if (this.material.get('lod') > 0) {
            this.material.define('fragment', 'LOD');
        } else {
            this.material.undefine('fragment', 'LOD');
        }
        renderer.renderPass([
            this
        ], dummyCamera);
    }
});
const __TURBOPACK__default__export__ = Skybox;
}}),
"[project]/node_modules/claygl/src/plugin/Skydome.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$plugin$2f$Skybox$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/plugin/Skybox.js [app-client] (ecmascript)");
;
const __TURBOPACK__default__export__ = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$plugin$2f$Skybox$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"];
}}),
"[project]/node_modules/claygl/src/util/dds.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Texture$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/Texture.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Texture2D$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/Texture2D.js [app-client] (ecmascript)");
;
;
;
// http://msdn.microsoft.com/en-us/library/windows/desktop/bb943991(v=vs.85).aspx
// https://github.com/toji/webgl-texture-utils/blob/master/texture-util/dds.js
var DDS_MAGIC = 0x20534444;
var DDSD_CAPS = 0x1;
var DDSD_HEIGHT = 0x2;
var DDSD_WIDTH = 0x4;
var DDSD_PITCH = 0x8;
var DDSD_PIXELFORMAT = 0x1000;
var DDSD_MIPMAPCOUNT = 0x20000;
var DDSD_LINEARSIZE = 0x80000;
var DDSD_DEPTH = 0x800000;
var DDSCAPS_COMPLEX = 0x8;
var DDSCAPS_MIPMAP = 0x400000;
var DDSCAPS_TEXTURE = 0x1000;
var DDSCAPS2_CUBEMAP = 0x200;
var DDSCAPS2_CUBEMAP_POSITIVEX = 0x400;
var DDSCAPS2_CUBEMAP_NEGATIVEX = 0x800;
var DDSCAPS2_CUBEMAP_POSITIVEY = 0x1000;
var DDSCAPS2_CUBEMAP_NEGATIVEY = 0x2000;
var DDSCAPS2_CUBEMAP_POSITIVEZ = 0x4000;
var DDSCAPS2_CUBEMAP_NEGATIVEZ = 0x8000;
var DDSCAPS2_VOLUME = 0x200000;
var DDPF_ALPHAPIXELS = 0x1;
var DDPF_ALPHA = 0x2;
var DDPF_FOURCC = 0x4;
var DDPF_RGB = 0x40;
var DDPF_YUV = 0x200;
var DDPF_LUMINANCE = 0x20000;
function fourCCToInt32(value) {
    return value.charCodeAt(0) + (value.charCodeAt(1) << 8) + (value.charCodeAt(2) << 16) + (value.charCodeAt(3) << 24);
}
function int32ToFourCC(value) {
    return String.fromCharCode(value & 0xff, value >> 8 & 0xff, value >> 16 & 0xff, value >> 24 & 0xff);
}
var headerLengthInt = 31; // The header length in 32 bit ints
var FOURCC_DXT1 = fourCCToInt32('DXT1');
var FOURCC_DXT3 = fourCCToInt32('DXT3');
var FOURCC_DXT5 = fourCCToInt32('DXT5');
// Offsets into the header array
var off_magic = 0;
var off_size = 1;
var off_flags = 2;
var off_height = 3;
var off_width = 4;
var off_mipmapCount = 7;
var off_pfFlags = 20;
var off_pfFourCC = 21;
var off_caps = 27;
var off_caps2 = 28;
var off_caps3 = 29;
var off_caps4 = 30;
var ret = {
    parse: function(arrayBuffer, out) {
        var header = new Int32Array(arrayBuffer, 0, headerLengthInt);
        if (header[off_magic] !== DDS_MAGIC) {
            return null;
        }
        if (!header(off_pfFlags) & DDPF_FOURCC) {
            return null;
        }
        var fourCC = header(off_pfFourCC);
        var width = header[off_width];
        var height = header[off_height];
        var isCubeMap = header[off_caps2] & DDSCAPS2_CUBEMAP;
        var hasMipmap = header[off_flags] & DDSD_MIPMAPCOUNT;
        var blockBytes, internalFormat;
        switch(fourCC){
            case FOURCC_DXT1:
                blockBytes = 8;
                internalFormat = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Texture$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].COMPRESSED_RGB_S3TC_DXT1_EXT;
                break;
            case FOURCC_DXT3:
                blockBytes = 16;
                internalFormat = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Texture$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].COMPRESSED_RGBA_S3TC_DXT3_EXT;
                break;
            case FOURCC_DXT5:
                blockBytes = 16;
                internalFormat = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Texture$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].COMPRESSED_RGBA_S3TC_DXT5_EXT;
                break;
            default:
                return null;
        }
        var dataOffset = header[off_size] + 4;
        // TODO: Suppose all face are existed
        var faceNumber = isCubeMap ? 6 : 1;
        var mipmapCount = 1;
        if (hasMipmap) {
            mipmapCount = Math.max(1, header[off_mipmapCount]);
        }
        var textures = [];
        for(var f = 0; f < faceNumber; f++){
            var _width = width;
            var _height = height;
            textures[f] = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Texture2D$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]({
                width: _width,
                height: _height,
                format: internalFormat
            });
            var mipmaps = [];
            for(var i = 0; i < mipmapCount; i++){
                var dataLength = Math.max(4, _width) / 4 * Math.max(4, _height) / 4 * blockBytes;
                var byteArray = new Uint8Array(arrayBuffer, dataOffset, dataLength);
                dataOffset += dataLength;
                _width *= 0.5;
                _height *= 0.5;
                mipmaps[i] = byteArray;
            }
            textures[f].pixels = mipmaps[0];
            if (hasMipmap) {
                textures[f].mipmaps = mipmaps;
            }
        }
        // TODO
        // return isCubeMap ? textures : textures[0];
        if (out) {
            out.width = textures[0].width;
            out.height = textures[0].height;
            out.format = textures[0].format;
            out.pixels = textures[0].pixels;
            out.mipmaps = textures[0].mipmaps;
        } else {
            return textures[0];
        }
    }
};
const __TURBOPACK__default__export__ = ret;
}}),
"[project]/node_modules/claygl/src/util/hdr.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Texture$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/Texture.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Texture2D$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/Texture2D.js [app-client] (ecmascript)");
;
;
var toChar = String.fromCharCode;
var MINELEN = 8;
var MAXELEN = 0x7fff;
function rgbe2float(rgbe, buffer, offset, exposure) {
    if (rgbe[3] > 0) {
        var f = Math.pow(2.0, rgbe[3] - 128 - 8 + exposure);
        buffer[offset + 0] = rgbe[0] * f;
        buffer[offset + 1] = rgbe[1] * f;
        buffer[offset + 2] = rgbe[2] * f;
    } else {
        buffer[offset + 0] = 0;
        buffer[offset + 1] = 0;
        buffer[offset + 2] = 0;
    }
    buffer[offset + 3] = 1.0;
    return buffer;
}
function uint82string(array, offset, size) {
    var str = '';
    for(var i = offset; i < size; i++){
        str += toChar(array[i]);
    }
    return str;
}
function copyrgbe(s, t) {
    t[0] = s[0];
    t[1] = s[1];
    t[2] = s[2];
    t[3] = s[3];
}
// TODO : check
function oldReadColors(scan, buffer, offset, xmax) {
    var rshift = 0, x = 0, len = xmax;
    while(len > 0){
        scan[x][0] = buffer[offset++];
        scan[x][1] = buffer[offset++];
        scan[x][2] = buffer[offset++];
        scan[x][3] = buffer[offset++];
        if (scan[x][0] === 1 && scan[x][1] === 1 && scan[x][2] === 1) {
            // exp is count of repeated pixels
            for(var i = scan[x][3] << rshift >>> 0; i > 0; i--){
                copyrgbe(scan[x - 1], scan[x]);
                x++;
                len--;
            }
            rshift += 8;
        } else {
            x++;
            len--;
            rshift = 0;
        }
    }
    return offset;
}
function readColors(scan, buffer, offset, xmax) {
    if (xmax < MINELEN | xmax > MAXELEN) {
        return oldReadColors(scan, buffer, offset, xmax);
    }
    var i = buffer[offset++];
    if (i != 2) {
        return oldReadColors(scan, buffer, offset - 1, xmax);
    }
    scan[0][1] = buffer[offset++];
    scan[0][2] = buffer[offset++];
    i = buffer[offset++];
    if ((scan[0][2] << 8 >>> 0 | i) >>> 0 !== xmax) {
        return null;
    }
    for(var i = 0; i < 4; i++){
        for(var x = 0; x < xmax;){
            var code = buffer[offset++];
            if (code > 128) {
                code = (code & 127) >>> 0;
                var val = buffer[offset++];
                while(code--){
                    scan[x++][i] = val;
                }
            } else {
                while(code--){
                    scan[x++][i] = buffer[offset++];
                }
            }
        }
    }
    return offset;
}
var ret = {
    // http://www.graphics.cornell.edu/~bjw/rgbe.html
    // Blender source
    // http://radsite.lbl.gov/radiance/refer/Notes/picture_format.html
    parseRGBE: function(arrayBuffer, texture, exposure) {
        if (exposure == null) {
            exposure = 0;
        }
        var data = new Uint8Array(arrayBuffer);
        var size = data.length;
        if (uint82string(data, 0, 2) !== '#?') {
            return;
        }
        // find empty line, next line is resolution info
        for(var i = 2; i < size; i++){
            if (toChar(data[i]) === '\n' && toChar(data[i + 1]) === '\n') {
                break;
            }
        }
        if (i >= size) {
            return;
        }
        // find resolution info line
        i += 2;
        var str = '';
        for(; i < size; i++){
            var _char = toChar(data[i]);
            if (_char === '\n') {
                break;
            }
            str += _char;
        }
        // -Y M +X N
        var tmp = str.split(' ');
        var height = parseInt(tmp[1]);
        var width = parseInt(tmp[3]);
        if (!width || !height) {
            return;
        }
        // read and decode actual data
        var offset = i + 1;
        var scanline = [];
        // memzero
        for(var x = 0; x < width; x++){
            scanline[x] = [];
            for(var j = 0; j < 4; j++){
                scanline[x][j] = 0;
            }
        }
        var pixels = new Float32Array(width * height * 4);
        var offset2 = 0;
        for(var y = 0; y < height; y++){
            var offset = readColors(scanline, data, offset, width);
            if (!offset) {
                return null;
            }
            for(var x = 0; x < width; x++){
                rgbe2float(scanline[x], pixels, offset2, exposure);
                offset2 += 4;
            }
        }
        if (!texture) {
            texture = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Texture2D$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
        }
        texture.width = width;
        texture.height = height;
        texture.pixels = pixels;
        // HALF_FLOAT can't use Float32Array
        texture.type = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Texture$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].FLOAT;
        return texture;
    },
    parseRGBEFromPNG: function(png) {}
};
const __TURBOPACK__default__export__ = ret;
}}),
"[project]/node_modules/claygl/src/util/texture.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Texture2D$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/Texture2D.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$TextureCube$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/TextureCube.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$vendor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/core/vendor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$prePass$2f$EnvironmentMap$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/prePass/EnvironmentMap.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$plugin$2f$Skydome$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/plugin/Skydome.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Scene$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/Scene.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$util$2f$dds$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/util/dds.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$util$2f$hdr$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/util/hdr.js [app-client] (ecmascript)");
;
;
;
;
;
;
;
;
/**
 * @alias clay.util.texture
 */ var textureUtil = {
    /**
     * @param  {string|object} path
     * @param  {object} [option]
     * @param  {Function} [onsuccess]
     * @param  {Function} [onerror]
     * @return {clay.Texture}
     */ loadTexture: function(path, option, onsuccess, onerror) {
        var texture;
        if (typeof option === 'function') {
            onsuccess = option;
            onerror = onsuccess;
            option = {};
        } else {
            option = option || {};
        }
        if (typeof path === 'string') {
            if (path.match(/.hdr$/) || option.fileType === 'hdr') {
                texture = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Texture2D$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]({
                    width: 0,
                    height: 0,
                    sRGB: false
                });
                textureUtil._fetchTexture(path, function(data) {
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$util$2f$hdr$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].parseRGBE(data, texture, option.exposure);
                    texture.dirty();
                    onsuccess && onsuccess(texture);
                }, onerror);
                return texture;
            } else if (path.match(/.dds$/) || option.fileType === 'dds') {
                texture = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Texture2D$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]({
                    width: 0,
                    height: 0
                });
                textureUtil._fetchTexture(path, function(data) {
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$util$2f$dds$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].parse(data, texture);
                    texture.dirty();
                    onsuccess && onsuccess(texture);
                }, onerror);
            } else {
                texture = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Texture2D$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
                texture.load(path);
                texture.success(onsuccess);
                texture.error(onerror);
            }
        } else if (typeof path === 'object' && typeof path.px !== 'undefined') {
            texture = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$TextureCube$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
            texture.load(path);
            texture.success(onsuccess);
            texture.error(onerror);
        }
        return texture;
    },
    /**
     * Load a panorama texture and render it to a cube map
     * @param  {clay.Renderer} renderer
     * @param  {string} path
     * @param  {clay.TextureCube} cubeMap
     * @param  {object} [option]
     * @param  {boolean} [option.encodeRGBM]
     * @param  {number} [option.exposure]
     * @param  {Function} [onsuccess]
     * @param  {Function} [onerror]
     */ loadPanorama: function(renderer, path, cubeMap, option, onsuccess, onerror) {
        var self = this;
        if (typeof option === 'function') {
            onsuccess = option;
            onerror = onsuccess;
            option = {};
        } else {
            option = option || {};
        }
        textureUtil.loadTexture(path, option, function(texture) {
            // PENDING
            texture.flipY = option.flipY || false;
            self.panoramaToCubeMap(renderer, texture, cubeMap, option);
            texture.dispose(renderer);
            onsuccess && onsuccess(cubeMap);
        }, onerror);
    },
    /**
     * Render a panorama texture to a cube map
     * @param  {clay.Renderer} renderer
     * @param  {clay.Texture2D} panoramaMap
     * @param  {clay.TextureCube} cubeMap
     * @param  {Object} option
     * @param  {boolean} [option.encodeRGBM]
     */ panoramaToCubeMap: function(renderer, panoramaMap, cubeMap, option) {
        var environmentMapPass = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$prePass$2f$EnvironmentMap$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
        var skydome = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$plugin$2f$Skydome$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]({
            scene: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Scene$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]()
        });
        skydome.setEnvironmentMap(panoramaMap);
        option = option || {};
        if (option.encodeRGBM) {
            skydome.material.define('fragment', 'RGBM_ENCODE');
        }
        // Share sRGB
        cubeMap.sRGB = panoramaMap.sRGB;
        environmentMapPass.texture = cubeMap;
        environmentMapPass.render(renderer, skydome.scene);
        environmentMapPass.texture = null;
        environmentMapPass.dispose(renderer);
        return cubeMap;
    },
    /**
     * Convert height map to normal map
     * @param {HTMLImageElement|HTMLCanvasElement} image
     * @param {boolean} [checkBump=false]
     * @return {HTMLCanvasElement}
     */ heightToNormal: function(image, checkBump) {
        var canvas = document.createElement('canvas');
        var width = canvas.width = image.width;
        var height = canvas.height = image.height;
        var ctx = canvas.getContext('2d');
        ctx.drawImage(image, 0, 0, width, height);
        checkBump = checkBump || false;
        var srcData = ctx.getImageData(0, 0, width, height);
        var dstData = ctx.createImageData(width, height);
        for(var i = 0; i < srcData.data.length; i += 4){
            if (checkBump) {
                var r = srcData.data[i];
                var g = srcData.data[i + 1];
                var b = srcData.data[i + 2];
                var diff = Math.abs(r - g) + Math.abs(g - b);
                if (diff > 20) {
                    console.warn('Given image is not a height map');
                    return image;
                }
            }
            // Modified from http://mrdoob.com/lab/javascript/height2normal/
            var x1, y1, x2, y2;
            if (i % (width * 4) === 0) {
                // left edge
                x1 = srcData.data[i];
                x2 = srcData.data[i + 4];
            } else if (i % (width * 4) === (width - 1) * 4) {
                // right edge
                x1 = srcData.data[i - 4];
                x2 = srcData.data[i];
            } else {
                x1 = srcData.data[i - 4];
                x2 = srcData.data[i + 4];
            }
            if (i < width * 4) {
                // top edge
                y1 = srcData.data[i];
                y2 = srcData.data[i + width * 4];
            } else if (i > width * (height - 1) * 4) {
                // bottom edge
                y1 = srcData.data[i - width * 4];
                y2 = srcData.data[i];
            } else {
                y1 = srcData.data[i - width * 4];
                y2 = srcData.data[i + width * 4];
            }
            dstData.data[i] = x1 - x2 + 127;
            dstData.data[i + 1] = y1 - y2 + 127;
            dstData.data[i + 2] = 255;
            dstData.data[i + 3] = 255;
        }
        ctx.putImageData(dstData, 0, 0);
        return canvas;
    },
    /**
     * Convert height map to normal map
     * @param {HTMLImageElement|HTMLCanvasElement} image
     * @param {boolean} [checkBump=false]
     * @param {number} [threshold=20]
     * @return {HTMLCanvasElement}
     */ isHeightImage: function(img, downScaleSize, threshold) {
        if (!img || !img.width || !img.height) {
            return false;
        }
        var canvas = document.createElement('canvas');
        var ctx = canvas.getContext('2d');
        var size = downScaleSize || 32;
        threshold = threshold || 20;
        canvas.width = canvas.height = size;
        ctx.drawImage(img, 0, 0, size, size);
        var srcData = ctx.getImageData(0, 0, size, size);
        for(var i = 0; i < srcData.data.length; i += 4){
            var r = srcData.data[i];
            var g = srcData.data[i + 1];
            var b = srcData.data[i + 2];
            var diff = Math.abs(r - g) + Math.abs(g - b);
            if (diff > threshold) {
                return false;
            }
        }
        return true;
    },
    _fetchTexture: function(path, onsuccess, onerror) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$vendor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].request.get({
            url: path,
            responseType: 'arraybuffer',
            onload: onsuccess,
            onerror: onerror
        });
    },
    /**
     * Create a chessboard texture
     * @param  {number} [size]
     * @param  {number} [unitSize]
     * @param  {string} [color1]
     * @param  {string} [color2]
     * @return {clay.Texture2D}
     */ createChessboard: function(size, unitSize, color1, color2) {
        size = size || 512;
        unitSize = unitSize || 64;
        color1 = color1 || 'black';
        color2 = color2 || 'white';
        var repeat = Math.ceil(size / unitSize);
        var canvas = document.createElement('canvas');
        canvas.width = size;
        canvas.height = size;
        var ctx = canvas.getContext('2d');
        ctx.fillStyle = color2;
        ctx.fillRect(0, 0, size, size);
        ctx.fillStyle = color1;
        for(var i = 0; i < repeat; i++){
            for(var j = 0; j < repeat; j++){
                var isFill = j % 2 ? i % 2 : i % 2 - 1;
                if (isFill) {
                    ctx.fillRect(i * unitSize, j * unitSize, unitSize, unitSize);
                }
            }
        }
        var texture = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Texture2D$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]({
            image: canvas,
            anisotropic: 8
        });
        return texture;
    },
    /**
     * Create a blank pure color 1x1 texture
     * @param  {string} color
     * @return {clay.Texture2D}
     */ createBlank: function(color) {
        var canvas = document.createElement('canvas');
        canvas.width = 1;
        canvas.height = 1;
        var ctx = canvas.getContext('2d');
        ctx.fillStyle = color;
        ctx.fillRect(0, 0, 1, 1);
        var texture = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Texture2D$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]({
            image: canvas
        });
        return texture;
    }
};
const __TURBOPACK__default__export__ = textureUtil;
}}),
"[project]/node_modules/claygl/src/camera/Orthographic.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Camera$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/Camera.js [app-client] (ecmascript)");
;
/**
 * @constructor clay.camera.Orthographic
 * @extends clay.Camera
 */ var Orthographic = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Camera$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].extend(/** @lends clay.camera.Orthographic# */ {
    /**
     * @type {number}
     */ left: -1,
    /**
     * @type {number}
     */ right: 1,
    /**
     * @type {number}
     */ near: -1,
    /**
     * @type {number}
     */ far: 1,
    /**
     * @type {number}
     */ top: 1,
    /**
     * @type {number}
     */ bottom: -1
}, /** @lends clay.camera.Orthographic.prototype */ {
    updateProjectionMatrix: function() {
        this.projectionMatrix.ortho(this.left, this.right, this.bottom, this.top, this.near, this.far);
    },
    decomposeProjectionMatrix: function() {
        var m = this.projectionMatrix.array;
        this.left = (-1 - m[12]) / m[0];
        this.right = (1 - m[12]) / m[0];
        this.top = (1 - m[13]) / m[5];
        this.bottom = (-1 - m[13]) / m[5];
        this.near = -(-1 - m[14]) / m[10];
        this.far = -(1 - m[14]) / m[10];
    },
    /**
     * @return {clay.camera.Orthographic}
     */ clone: function() {
        var camera = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Camera$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].prototype.clone.call(this);
        camera.left = this.left;
        camera.right = this.right;
        camera.near = this.near;
        camera.far = this.far;
        camera.top = this.top;
        camera.bottom = this.bottom;
        return camera;
    }
});
const __TURBOPACK__default__export__ = Orthographic;
}}),
"[project]/node_modules/claygl/src/shader/source/compositor/vertex.glsl.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
const __TURBOPACK__default__export__ = "\n@export clay.compositor.vertex\nuniform mat4 worldViewProjection : WORLDVIEWPROJECTION;\nattribute vec3 position : POSITION;\nattribute vec2 texcoord : TEXCOORD_0;\nvarying vec2 v_Texcoord;\nvoid main()\n{\n v_Texcoord = texcoord;\n gl_Position = worldViewProjection * vec4(position, 1.0);\n}\n@end";
}}),
"[project]/node_modules/claygl/src/compositor/Pass.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$Base$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/core/Base.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$camera$2f$Orthographic$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/camera/Orthographic.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$geometry$2f$Plane$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/geometry/Plane.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Shader$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/Shader.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Material$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/Material.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Mesh$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/Mesh.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/core/glenum.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$shader$2f$source$2f$compositor$2f$vertex$2e$glsl$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/shader/source/compositor/vertex.glsl.js [app-client] (ecmascript)");
;
;
;
;
;
;
;
;
__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Shader$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]['import'](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$shader$2f$source$2f$compositor$2f$vertex$2e$glsl$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]);
var planeGeo = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$geometry$2f$Plane$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
var mesh = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Mesh$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]({
    geometry: planeGeo,
    frustumCulling: false
});
var camera = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$camera$2f$Orthographic$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
/**
 * @constructor clay.compositor.Pass
 * @extends clay.core.Base
 */ var Pass = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$Base$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].extend(function() {
    return /** @lends clay.compositor.Pass# */ {
        /**
         * Fragment shader string
         * @type {string}
         */ // PENDING shader or fragment ?
        fragment: '',
        /**
         * @type {Object}
         */ outputs: null,
        /**
         * @type {clay.Material}
         */ material: null,
        /**
         * @type {Boolean}
         */ blendWithPrevious: false,
        /**
         * @type {Boolean}
         */ clearColor: false,
        /**
         * @type {Boolean}
         */ clearDepth: true
    };
}, function() {
    var shader = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Shader$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Shader$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].source('clay.compositor.vertex'), this.fragment);
    var material = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Material$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]({
        shader: shader
    });
    material.enableTexturesAll();
    this.material = material;
}, /** @lends clay.compositor.Pass.prototype */ {
    /**
     * @param {string} name
     * @param {} value
     */ setUniform: function(name, value) {
        this.material.setUniform(name, value);
    },
    /**
     * @param  {string} name
     * @return {}
     */ getUniform: function(name) {
        var uniform = this.material.uniforms[name];
        if (uniform) {
            return uniform.value;
        }
    },
    /**
     * @param  {clay.Texture} texture
     * @param  {number} attachment
     */ attachOutput: function(texture, attachment) {
        if (!this.outputs) {
            this.outputs = {};
        }
        attachment = attachment || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].COLOR_ATTACHMENT0;
        this.outputs[attachment] = texture;
    },
    /**
     * @param  {clay.Texture} texture
     */ detachOutput: function(texture) {
        for(var attachment in this.outputs){
            if (this.outputs[attachment] === texture) {
                this.outputs[attachment] = null;
            }
        }
    },
    bind: function(renderer, frameBuffer) {
        if (this.outputs) {
            for(var attachment in this.outputs){
                var texture = this.outputs[attachment];
                if (texture) {
                    frameBuffer.attach(texture, attachment);
                }
            }
        }
        if (frameBuffer) {
            frameBuffer.bind(renderer);
        }
    },
    unbind: function(renderer, frameBuffer) {
        frameBuffer.unbind(renderer);
    },
    /**
     * @param  {clay.Renderer} renderer
     * @param  {clay.FrameBuffer} [frameBuffer]
     */ render: function(renderer, frameBuffer) {
        var _gl = renderer.gl;
        if (frameBuffer) {
            this.bind(renderer, frameBuffer);
            // MRT Support in chrome
            // https://www.khronos.org/registry/webgl/sdk/tests/conformance/extensions/ext-draw-buffers.html
            var ext = renderer.getGLExtension('EXT_draw_buffers');
            if (ext && this.outputs) {
                var bufs = [];
                for(var attachment in this.outputs){
                    attachment = +attachment;
                    if (attachment >= _gl.COLOR_ATTACHMENT0 && attachment <= _gl.COLOR_ATTACHMENT0 + 8) {
                        bufs.push(attachment);
                    }
                }
                ext.drawBuffersEXT(bufs);
            }
        }
        this.trigger('beforerender', this, renderer);
        // FIXME Don't clear in each pass in default, let the color overwrite the buffer
        // FIXME pixels may be discard
        var clearBit = this.clearDepth ? _gl.DEPTH_BUFFER_BIT : 0;
        _gl.depthMask(true);
        if (this.clearColor) {
            clearBit = clearBit | _gl.COLOR_BUFFER_BIT;
            _gl.colorMask(true, true, true, true);
            var cc = this.clearColor;
            if (Array.isArray(cc)) {
                _gl.clearColor(cc[0], cc[1], cc[2], cc[3]);
            }
        }
        _gl.clear(clearBit);
        if (this.blendWithPrevious) {
            // Blend with previous rendered scene in the final output
            // FIXME Configure blend.
            // FIXME It will cause screen blink？
            _gl.enable(_gl.BLEND);
            this.material.transparent = true;
        } else {
            _gl.disable(_gl.BLEND);
            this.material.transparent = false;
        }
        this.renderQuad(renderer);
        this.trigger('afterrender', this, renderer);
        if (frameBuffer) {
            this.unbind(renderer, frameBuffer);
        }
    },
    /**
     * Simply do quad rendering
     */ renderQuad: function(renderer) {
        mesh.material = this.material;
        renderer.renderPass([
            mesh
        ], camera);
    },
    /**
     * @param  {clay.Renderer} renderer
     */ dispose: function(renderer) {}
});
const __TURBOPACK__default__export__ = Pass;
}}),
"[project]/node_modules/claygl/src/util/shader/integrateBRDF.glsl.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
const __TURBOPACK__default__export__ = "#define SAMPLE_NUMBER 1024\n#define PI 3.14159265358979\nuniform sampler2D normalDistribution;\nuniform vec2 viewportSize : [512, 256];\nconst vec3 N = vec3(0.0, 0.0, 1.0);\nconst float fSampleNumber = float(SAMPLE_NUMBER);\nvec3 importanceSampleNormal(float i, float roughness, vec3 N) {\n vec3 H = texture2D(normalDistribution, vec2(roughness, i)).rgb;\n vec3 upVector = abs(N.y) > 0.999 ? vec3(1.0, 0.0, 0.0) : vec3(0.0, 1.0, 0.0);\n vec3 tangentX = normalize(cross(N, upVector));\n vec3 tangentZ = cross(N, tangentX);\n return normalize(tangentX * H.x + N * H.y + tangentZ * H.z);\n}\nfloat G_Smith(float roughness, float NoV, float NoL) {\n float k = roughness * roughness / 2.0;\n float G1V = NoV / (NoV * (1.0 - k) + k);\n float G1L = NoL / (NoL * (1.0 - k) + k);\n return G1L * G1V;\n}\nvoid main() {\n vec2 uv = gl_FragCoord.xy / viewportSize;\n float NoV = uv.x;\n float roughness = uv.y;\n vec3 V;\n V.x = sqrt(1.0 - NoV * NoV);\n V.y = 0.0;\n V.z = NoV;\n float A = 0.0;\n float B = 0.0;\n for (int i = 0; i < SAMPLE_NUMBER; i++) {\n vec3 H = importanceSampleNormal(float(i) / fSampleNumber, roughness, N);\n vec3 L = reflect(-V, H);\n float NoL = clamp(L.z, 0.0, 1.0);\n float NoH = clamp(H.z, 0.0, 1.0);\n float VoH = clamp(dot(V, H), 0.0, 1.0);\n if (NoL > 0.0) {\n float G = G_Smith(roughness, NoV, NoL);\n float G_Vis = G * VoH / (NoH * NoV);\n float Fc = pow(1.0 - VoH, 5.0);\n A += (1.0 - Fc) * G_Vis;\n B += Fc * G_Vis;\n }\n }\n gl_FragColor = vec4(vec2(A, B) / fSampleNumber, 0.0, 1.0);\n}\n";
}}),
"[project]/node_modules/claygl/src/util/shader/prefilter.glsl.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
const __TURBOPACK__default__export__ = "#define SHADER_NAME prefilter\n#define SAMPLE_NUMBER 1024\n#define PI 3.14159265358979\nuniform mat4 viewInverse : VIEWINVERSE;\nuniform samplerCube environmentMap;\nuniform sampler2D normalDistribution;\nuniform float roughness : 0.5;\nvarying vec2 v_Texcoord;\nvarying vec3 v_WorldPosition;\n@import clay.util.rgbm\nvec3 importanceSampleNormal(float i, float roughness, vec3 N) {\n vec3 H = texture2D(normalDistribution, vec2(roughness, i)).rgb;\n vec3 upVector = abs(N.y) > 0.999 ? vec3(1.0, 0.0, 0.0) : vec3(0.0, 1.0, 0.0);\n vec3 tangentX = normalize(cross(N, upVector));\n vec3 tangentZ = cross(N, tangentX);\n return normalize(tangentX * H.x + N * H.y + tangentZ * H.z);\n}\nvoid main() {\n vec3 eyePos = viewInverse[3].xyz;\n vec3 V = normalize(v_WorldPosition - eyePos);\n vec3 N = V;\n vec3 prefilteredColor = vec3(0.0);\n float totalWeight = 0.0;\n float fMaxSampleNumber = float(SAMPLE_NUMBER);\n for (int i = 0; i < SAMPLE_NUMBER; i++) {\n vec3 H = importanceSampleNormal(float(i) / fMaxSampleNumber, roughness, N);\n vec3 L = reflect(-V, H);\n float NoL = clamp(dot(N, L), 0.0, 1.0);\n if (NoL > 0.0) {\n prefilteredColor += decodeHDR(textureCube(environmentMap, L)).rgb * NoL;\n totalWeight += NoL;\n }\n }\n gl_FragColor = encodeHDR(vec4(prefilteredColor / totalWeight, 1.0));\n}\n";
}}),
"[project]/node_modules/claygl/src/util/cubemap.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Cubemap prefilter utility
// http://www.unrealengine.com/files/downloads/2013SiggraphPresentationsNotes.pdf
// http://http.developer.nvidia.com/GPUGems3/gpugems3_ch20.html
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Texture2D$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/Texture2D.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$TextureCube$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/TextureCube.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Texture$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/Texture.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$FrameBuffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/FrameBuffer.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$compositor$2f$Pass$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/compositor/Pass.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Material$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/Material.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Shader$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/Shader.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$plugin$2f$Skybox$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/plugin/Skybox.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Scene$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/Scene.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$prePass$2f$EnvironmentMap$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/prePass/EnvironmentMap.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$vendor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/core/vendor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$util$2f$texture$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/util/texture.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$util$2f$shader$2f$integrateBRDF$2e$glsl$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/util/shader/integrateBRDF.glsl.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$util$2f$shader$2f$prefilter$2e$glsl$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/util/shader/prefilter.glsl.js [app-client] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
;
;
;
var cubemapUtil = {};
var targets = [
    'px',
    'nx',
    'py',
    'ny',
    'pz',
    'nz'
];
// TODO Downsample
/**
 * @name clay.util.cubemap.prefilterEnvironmentMap
 * @param  {clay.Renderer} renderer
 * @param  {clay.Texture} envMap
 * @param  {Object} [textureOpts]
 * @param  {number} [textureOpts.width=64]
 * @param  {number} [textureOpts.height=64]
 * @param  {number} [textureOpts.type]
 * @param  {boolean} [textureOpts.encodeRGBM=false]
 * @param  {boolean} [textureOpts.decodeRGBM=false]
 * @param  {clay.Texture2D} [normalDistribution]
 * @param  {clay.Texture2D} [brdfLookup]
 */ cubemapUtil.prefilterEnvironmentMap = function(renderer, envMap, textureOpts, normalDistribution, brdfLookup) {
    // Not create other renderer, it is easy having issue of cross reference of resources like framebuffer
    // PENDING preserveDrawingBuffer?
    if (!brdfLookup || !normalDistribution) {
        normalDistribution = cubemapUtil.generateNormalDistribution();
        brdfLookup = cubemapUtil.integrateBRDF(renderer, normalDistribution);
    }
    textureOpts = textureOpts || {};
    var width = textureOpts.width || 64;
    var height = textureOpts.height || 64;
    var textureType = textureOpts.type || envMap.type;
    // Use same type with given envMap
    var prefilteredCubeMap = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$TextureCube$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]({
        width: width,
        height: height,
        type: textureType,
        flipY: false,
        mipmaps: []
    });
    if (!prefilteredCubeMap.isPowerOfTwo()) {
        console.warn('Width and height must be power of two to enable mipmap.');
    }
    var size = Math.min(width, height);
    var mipmapNum = Math.log(size) / Math.log(2) + 1;
    var prefilterMaterial = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Material$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]({
        shader: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Shader$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]({
            vertex: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Shader$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].source('clay.skybox.vertex'),
            fragment: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$util$2f$shader$2f$prefilter$2e$glsl$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]
        })
    });
    prefilterMaterial.set('normalDistribution', normalDistribution);
    textureOpts.encodeRGBM && prefilterMaterial.define('fragment', 'RGBM_ENCODE');
    textureOpts.decodeRGBM && prefilterMaterial.define('fragment', 'RGBM_DECODE');
    var dummyScene = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Scene$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
    var skyEnv;
    if (envMap.textureType === 'texture2D') {
        // Convert panorama to cubemap
        var envCubemap = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$TextureCube$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]({
            width: width,
            height: height,
            // FIXME FLOAT type will cause GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT error on iOS
            type: textureType === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Texture$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].FLOAT ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Texture$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].HALF_FLOAT : textureType
        });
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$util$2f$texture$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].panoramaToCubeMap(renderer, envMap, envCubemap, {
            // PENDING encodeRGBM so it can be decoded as RGBM
            encodeRGBM: textureOpts.decodeRGBM
        });
        envMap = envCubemap;
    }
    skyEnv = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$plugin$2f$Skybox$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]({
        scene: dummyScene,
        material: prefilterMaterial
    });
    skyEnv.material.set('environmentMap', envMap);
    var envMapPass = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$prePass$2f$EnvironmentMap$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]({
        texture: prefilteredCubeMap
    });
    // Force to be UNSIGNED_BYTE
    if (textureOpts.encodeRGBM) {
        textureType = prefilteredCubeMap.type = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Texture$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].UNSIGNED_BYTE;
    }
    var renderTargetTmp = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Texture2D$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]({
        width: width,
        height: height,
        type: textureType
    });
    var frameBuffer = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$FrameBuffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]({
        depthBuffer: false
    });
    var ArrayCtor = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$vendor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"][textureType === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Texture$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].UNSIGNED_BYTE ? 'Uint8Array' : 'Float32Array'];
    for(var i = 0; i < mipmapNum; i++){
        // console.time('prefilter');
        prefilteredCubeMap.mipmaps[i] = {
            pixels: {}
        };
        skyEnv.material.set('roughness', i / (mipmapNum - 1));
        // Tweak fov
        // http://the-witness.net/news/2012/02/seamless-cube-map-filtering/
        var n = renderTargetTmp.width;
        var fov = 2 * Math.atan(n / (n - 0.5)) / Math.PI * 180;
        for(var j = 0; j < targets.length; j++){
            var pixels = new ArrayCtor(renderTargetTmp.width * renderTargetTmp.height * 4);
            frameBuffer.attach(renderTargetTmp);
            frameBuffer.bind(renderer);
            var camera = envMapPass.getCamera(targets[j]);
            camera.fov = fov;
            renderer.render(dummyScene, camera);
            renderer.gl.readPixels(0, 0, renderTargetTmp.width, renderTargetTmp.height, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Texture$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].RGBA, textureType, pixels);
            // var canvas = document.createElement('canvas');
            // var ctx = canvas.getContext('2d');
            // canvas.width = renderTargetTmp.width;
            // canvas.height = renderTargetTmp.height;
            // var imageData = ctx.createImageData(renderTargetTmp.width, renderTargetTmp.height);
            // for (var k = 0; k < pixels.length; k++) {
            //     imageData.data[k] = pixels[k];
            // }
            // ctx.putImageData(imageData, 0, 0);
            // document.body.appendChild(canvas);
            frameBuffer.unbind(renderer);
            prefilteredCubeMap.mipmaps[i].pixels[targets[j]] = pixels;
        }
        renderTargetTmp.width /= 2;
        renderTargetTmp.height /= 2;
        renderTargetTmp.dirty();
    // console.timeEnd('prefilter');
    }
    frameBuffer.dispose(renderer);
    renderTargetTmp.dispose(renderer);
    skyEnv.dispose(renderer);
    // Remove gpu resource allucated in renderer
    normalDistribution.dispose(renderer);
    // renderer.dispose();
    return {
        environmentMap: prefilteredCubeMap,
        brdfLookup: brdfLookup,
        normalDistribution: normalDistribution,
        maxMipmapLevel: mipmapNum
    };
};
cubemapUtil.integrateBRDF = function(renderer, normalDistribution) {
    normalDistribution = normalDistribution || cubemapUtil.generateNormalDistribution();
    var framebuffer = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$FrameBuffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]({
        depthBuffer: false
    });
    var pass = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$compositor$2f$Pass$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]({
        fragment: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$util$2f$shader$2f$integrateBRDF$2e$glsl$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]
    });
    var texture = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Texture2D$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]({
        width: 512,
        height: 256,
        type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Texture$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].HALF_FLOAT,
        wrapS: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Texture$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].CLAMP_TO_EDGE,
        wrapT: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Texture$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].CLAMP_TO_EDGE,
        minFilter: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Texture$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].NEAREST,
        magFilter: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Texture$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].NEAREST,
        useMipmap: false
    });
    pass.setUniform('normalDistribution', normalDistribution);
    pass.setUniform('viewportSize', [
        512,
        256
    ]);
    pass.attachOutput(texture);
    pass.render(renderer, framebuffer);
    // FIXME Only chrome and firefox can readPixels with float type.
    // framebuffer.bind(renderer);
    // var pixels = new Float32Array(512 * 256 * 4);
    // renderer.gl.readPixels(
    //     0, 0, texture.width, texture.height,
    //     Texture.RGBA, Texture.FLOAT, pixels
    // );
    // texture.pixels = pixels;
    // texture.flipY = false;
    // texture.dirty();
    // framebuffer.unbind(renderer);
    framebuffer.dispose(renderer);
    return texture;
};
cubemapUtil.generateNormalDistribution = function(roughnessLevels, sampleSize) {
    // http://holger.dammertz.org/stuff/notes_HammersleyOnHemisphere.html
    // GLSL not support bit operation, use lookup instead
    // V -> i / N, U -> roughness
    var roughnessLevels = roughnessLevels || 256;
    var sampleSize = sampleSize || 1024;
    var normalDistribution = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Texture2D$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]({
        width: roughnessLevels,
        height: sampleSize,
        type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Texture$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].FLOAT,
        minFilter: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Texture$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].NEAREST,
        magFilter: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Texture$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].NEAREST,
        wrapS: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Texture$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].CLAMP_TO_EDGE,
        wrapT: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Texture$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].CLAMP_TO_EDGE,
        useMipmap: false
    });
    var pixels = new Float32Array(sampleSize * roughnessLevels * 4);
    var tmp = [];
    // function sortFunc(a, b) {
    //     return Math.abs(b) - Math.abs(a);
    // }
    for(var j = 0; j < roughnessLevels; j++){
        var roughness = j / roughnessLevels;
        var a = roughness * roughness;
        for(var i = 0; i < sampleSize; i++){
            // http://holger.dammertz.org/stuff/notes_HammersleyOnHemisphere.html
            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators
            // http://stackoverflow.com/questions/1908492/unsigned-integer-in-javascript
            // http://stackoverflow.com/questions/1822350/what-is-the-javascript-operator-and-how-do-you-use-it
            var y = (i << 16 | i >>> 16) >>> 0;
            y = ((y & 1431655765) << 1 | (y & 2863311530) >>> 1) >>> 0;
            y = ((y & 858993459) << 2 | (y & 3435973836) >>> 2) >>> 0;
            y = ((y & 252645135) << 4 | (y & 4042322160) >>> 4) >>> 0;
            y = (((y & 16711935) << 8 | (y & 4278255360) >>> 8) >>> 0) / 4294967296;
            // CDF
            var cosTheta = Math.sqrt((1 - y) / (1 + (a * a - 1.0) * y));
            tmp[i] = cosTheta;
        }
        for(var i = 0; i < sampleSize; i++){
            var offset = (i * roughnessLevels + j) * 4;
            var cosTheta = tmp[i];
            var sinTheta = Math.sqrt(1.0 - cosTheta * cosTheta);
            var x = i / sampleSize;
            var phi = 2.0 * Math.PI * x;
            pixels[offset] = sinTheta * Math.cos(phi);
            pixels[offset + 1] = cosTheta;
            pixels[offset + 2] = sinTheta * Math.sin(phi);
            pixels[offset + 3] = 1.0;
        }
    }
    normalDistribution.pixels = pixels;
    return normalDistribution;
};
const __TURBOPACK__default__export__ = cubemapUtil;
}}),
"[project]/node_modules/claygl/src/light/AmbientCubemap.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// https://docs.unrealengine.com/latest/INT/Engine/Rendering/LightingAndShadows/AmbientCubemap/
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Light$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/Light.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$util$2f$cubemap$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/util/cubemap.js [app-client] (ecmascript)");
;
;
/**
 * Ambient cubemap light provides specular parts of Image Based Lighting.
 * Which is a basic requirement for Physically Based Rendering
 * @constructor clay.light.AmbientCubemap
 * @extends clay.Light
 */ var AmbientCubemapLight = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Light$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].extend({
    /**
     * @type {clay.TextureCube}
     * @memberOf clay.light.AmbientCubemap#
     */ cubemap: null,
    // TODO
    // range: 100,
    castShadow: false,
    _normalDistribution: null,
    _brdfLookup: null
}, /** @lends clay.light.AmbientCubemap# */ {
    type: 'AMBIENT_CUBEMAP_LIGHT',
    /**
     * Do prefitering the cubemap
     * @param {clay.Renderer} renderer
     * @param {number} [size=32]
     */ prefilter: function(renderer, size) {
        if (!renderer.getGLExtension('EXT_shader_texture_lod')) {
            console.warn('Device not support textureCubeLodEXT');
            return;
        }
        if (!this._brdfLookup) {
            this._normalDistribution = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$util$2f$cubemap$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].generateNormalDistribution();
            this._brdfLookup = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$util$2f$cubemap$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].integrateBRDF(renderer, this._normalDistribution);
        }
        var cubemap = this.cubemap;
        if (cubemap.__prefiltered) {
            return;
        }
        var result = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$util$2f$cubemap$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].prefilterEnvironmentMap(renderer, cubemap, {
            encodeRGBM: true,
            width: size,
            height: size
        }, this._normalDistribution, this._brdfLookup);
        this.cubemap = result.environmentMap;
        this.cubemap.__prefiltered = true;
        cubemap.dispose(renderer);
    },
    getBRDFLookup: function() {
        return this._brdfLookup;
    },
    uniformTemplates: {
        ambientCubemapLightColor: {
            type: '3f',
            value: function(instance) {
                var color = instance.color;
                var intensity = instance.intensity;
                return [
                    color[0] * intensity,
                    color[1] * intensity,
                    color[2] * intensity
                ];
            }
        },
        ambientCubemapLightCubemap: {
            type: 't',
            value: function(instance) {
                return instance.cubemap;
            }
        },
        ambientCubemapLightBRDFLookup: {
            type: 't',
            value: function(instance) {
                return instance._brdfLookup;
            }
        }
    }
});
const __TURBOPACK__default__export__ = AmbientCubemapLight;
}}),
"[project]/node_modules/claygl/src/light/AmbientSH.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Light$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/Light.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$vendor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/core/vendor.js [app-client] (ecmascript)");
;
;
/**
 * Spherical Harmonic Ambient Light
 * @constructor clay.light.AmbientSH
 * @extends clay.Light
 */ var AmbientSHLight = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Light$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].extend({
    castShadow: false,
    /**
     * Spherical Harmonic Coefficients
     * @type {Array.<number>}
     * @memberOf clay.light.AmbientSH#
     */ coefficients: []
}, function() {
    this._coefficientsTmpArr = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$vendor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].Float32Array(9 * 3);
}, {
    type: 'AMBIENT_SH_LIGHT',
    uniformTemplates: {
        ambientSHLightColor: {
            type: '3f',
            value: function(instance) {
                var color = instance.color;
                var intensity = instance.intensity;
                return [
                    color[0] * intensity,
                    color[1] * intensity,
                    color[2] * intensity
                ];
            }
        },
        ambientSHLightCoefficients: {
            type: '3f',
            value: function(instance) {
                var coefficientsTmpArr = instance._coefficientsTmpArr;
                for(var i = 0; i < instance.coefficients.length; i++){
                    coefficientsTmpArr[i] = instance.coefficients[i];
                }
                return coefficientsTmpArr;
            }
        }
    }
});
const __TURBOPACK__default__export__ = AmbientSHLight;
}}),
"[project]/node_modules/claygl/src/util/shader/projectEnvMap.glsl.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
const __TURBOPACK__default__export__ = "uniform samplerCube environmentMap;\nvarying vec2 v_Texcoord;\n#define TEXTURE_SIZE 16\nmat3 front = mat3(\n 1.0, 0.0, 0.0,\n 0.0, 1.0, 0.0,\n 0.0, 0.0, 1.0\n);\nmat3 back = mat3(\n -1.0, 0.0, 0.0,\n 0.0, 1.0, 0.0,\n 0.0, 0.0, -1.0\n);\nmat3 left = mat3(\n 0.0, 0.0, -1.0,\n 0.0, 1.0, 0.0,\n 1.0, 0.0, 0.0\n);\nmat3 right = mat3(\n 0.0, 0.0, 1.0,\n 0.0, 1.0, 0.0,\n -1.0, 0.0, 0.0\n);\nmat3 up = mat3(\n 1.0, 0.0, 0.0,\n 0.0, 0.0, 1.0,\n 0.0, -1.0, 0.0\n);\nmat3 down = mat3(\n 1.0, 0.0, 0.0,\n 0.0, 0.0, -1.0,\n 0.0, 1.0, 0.0\n);\nfloat harmonics(vec3 normal){\n int index = int(gl_FragCoord.x);\n float x = normal.x;\n float y = normal.y;\n float z = normal.z;\n if(index==0){\n return 1.0;\n }\n else if(index==1){\n return x;\n }\n else if(index==2){\n return y;\n }\n else if(index==3){\n return z;\n }\n else if(index==4){\n return x*z;\n }\n else if(index==5){\n return y*z;\n }\n else if(index==6){\n return x*y;\n }\n else if(index==7){\n return 3.0*z*z - 1.0;\n }\n else{\n return x*x - y*y;\n }\n}\nvec3 sampleSide(mat3 rot)\n{\n vec3 result = vec3(0.0);\n float divider = 0.0;\n for (int i = 0; i < TEXTURE_SIZE * TEXTURE_SIZE; i++) {\n float x = mod(float(i), float(TEXTURE_SIZE));\n float y = float(i / TEXTURE_SIZE);\n vec2 sidecoord = ((vec2(x, y) + vec2(0.5, 0.5)) / vec2(TEXTURE_SIZE)) * 2.0 - 1.0;\n vec3 normal = normalize(vec3(sidecoord, -1.0));\n vec3 fetchNormal = rot * normal;\n vec3 texel = textureCube(environmentMap, fetchNormal).rgb;\n result += harmonics(fetchNormal) * texel * -normal.z;\n divider += -normal.z;\n }\n return result / divider;\n}\nvoid main()\n{\n vec3 result = (\n sampleSide(front) +\n sampleSide(back) +\n sampleSide(left) +\n sampleSide(right) +\n sampleSide(up) +\n sampleSide(down)\n ) / 6.0;\n gl_FragColor = vec4(result, 1.0);\n}";
}}),
"[project]/node_modules/claygl/src/util/sh.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Spherical Harmonic Helpers
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Texture$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/Texture.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$FrameBuffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/FrameBuffer.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Texture2D$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/Texture2D.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$compositor$2f$Pass$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/compositor/Pass.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$vendor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/core/vendor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$plugin$2f$Skybox$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/plugin/Skybox.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$plugin$2f$Skydome$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/plugin/Skydome.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$prePass$2f$EnvironmentMap$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/prePass/EnvironmentMap.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Scene$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/Scene.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/glmatrix/vec3.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$util$2f$shader$2f$projectEnvMap$2e$glsl$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/util/shader/projectEnvMap.glsl.js [app-client] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
var sh = {};
;
var targets = [
    'px',
    'nx',
    'py',
    'ny',
    'pz',
    'nz'
];
// Project on gpu, but needs browser to support readPixels as Float32Array.
function projectEnvironmentMapGPU(renderer, envMap) {
    var shTexture = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Texture2D$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]({
        width: 9,
        height: 1,
        type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Texture$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].FLOAT
    });
    var pass = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$compositor$2f$Pass$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]({
        fragment: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$util$2f$shader$2f$projectEnvMap$2e$glsl$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]
    });
    pass.material.define('fragment', 'TEXTURE_SIZE', envMap.width);
    pass.setUniform('environmentMap', envMap);
    var framebuffer = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$FrameBuffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
    framebuffer.attach(shTexture);
    pass.render(renderer, framebuffer);
    framebuffer.bind(renderer);
    // TODO Only chrome and firefox support Float32Array
    var pixels = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$vendor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].Float32Array(9 * 4);
    renderer.gl.readPixels(0, 0, 9, 1, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Texture$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].RGBA, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Texture$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].FLOAT, pixels);
    var coeff = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$vendor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].Float32Array(9 * 3);
    for(var i = 0; i < 9; i++){
        coeff[i * 3] = pixels[i * 4];
        coeff[i * 3 + 1] = pixels[i * 4 + 1];
        coeff[i * 3 + 2] = pixels[i * 4 + 2];
    }
    framebuffer.unbind(renderer);
    framebuffer.dispose(renderer);
    pass.dispose(renderer);
    return coeff;
}
function harmonics(normal, index) {
    var x = normal[0];
    var y = normal[1];
    var z = normal[2];
    if (index === 0) {
        return 1.0;
    } else if (index === 1) {
        return x;
    } else if (index === 2) {
        return y;
    } else if (index === 3) {
        return z;
    } else if (index === 4) {
        return x * z;
    } else if (index === 5) {
        return y * z;
    } else if (index === 6) {
        return x * y;
    } else if (index === 7) {
        return 3.0 * z * z - 1.0;
    } else {
        return x * x - y * y;
    }
}
var normalTransform = {
    px: [
        2,
        1,
        0,
        -1,
        -1,
        1
    ],
    nx: [
        2,
        1,
        0,
        1,
        -1,
        -1
    ],
    py: [
        0,
        2,
        1,
        1,
        -1,
        -1
    ],
    ny: [
        0,
        2,
        1,
        1,
        1,
        1
    ],
    pz: [
        0,
        1,
        2,
        -1,
        -1,
        -1
    ],
    nz: [
        0,
        1,
        2,
        1,
        -1,
        1
    ]
};
// Project on cpu.
function projectEnvironmentMapCPU(renderer, cubePixels, width, height) {
    var coeff = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$vendor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].Float32Array(9 * 3);
    var normal = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].create();
    var texel = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].create();
    var fetchNormal = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].create();
    for(var m = 0; m < 9; m++){
        var result = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].create();
        for(var k = 0; k < targets.length; k++){
            var pixels = cubePixels[targets[k]];
            var sideResult = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].create();
            var divider = 0;
            var i = 0;
            var transform = normalTransform[targets[k]];
            for(var y = 0; y < height; y++){
                for(var x = 0; x < width; x++){
                    normal[0] = x / (width - 1.0) * 2.0 - 1.0;
                    // TODO Flip y?
                    normal[1] = y / (height - 1.0) * 2.0 - 1.0;
                    normal[2] = -1.0;
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].normalize(normal, normal);
                    fetchNormal[0] = normal[transform[0]] * transform[3];
                    fetchNormal[1] = normal[transform[1]] * transform[4];
                    fetchNormal[2] = normal[transform[2]] * transform[5];
                    texel[0] = pixels[i++] / 255;
                    texel[1] = pixels[i++] / 255;
                    texel[2] = pixels[i++] / 255;
                    // RGBM Decode
                    var scale = pixels[i++] / 255 * 8.12;
                    texel[0] *= scale;
                    texel[1] *= scale;
                    texel[2] *= scale;
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].scaleAndAdd(sideResult, sideResult, texel, harmonics(fetchNormal, m) * -normal[2]);
                    // -normal.z equals cos(theta) of Lambertian
                    divider += -normal[2];
                }
            }
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].scaleAndAdd(result, result, sideResult, 1 / divider);
        }
        coeff[m * 3] = result[0] / 6.0;
        coeff[m * 3 + 1] = result[1] / 6.0;
        coeff[m * 3 + 2] = result[2] / 6.0;
    }
    return coeff;
}
/**
 * @param  {clay.Renderer} renderer
 * @param  {clay.Texture} envMap
 * @param  {Object} [textureOpts]
 * @param  {Object} [textureOpts.lod]
 * @param  {boolean} [textureOpts.decodeRGBM]
 */ sh.projectEnvironmentMap = function(renderer, envMap, opts) {
    // TODO sRGB
    opts = opts || {};
    opts.lod = opts.lod || 0;
    var skybox;
    var dummyScene = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Scene$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
    var size = 64;
    if (envMap.textureType === 'texture2D') {
        skybox = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$plugin$2f$Skydome$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]({
            scene: dummyScene,
            environmentMap: envMap
        });
    } else {
        size = envMap.image && envMap.image.px ? envMap.image.px.width : envMap.width;
        skybox = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$plugin$2f$Skybox$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]({
            scene: dummyScene,
            environmentMap: envMap
        });
    }
    // Convert to rgbm
    var width = Math.ceil(size / Math.pow(2, opts.lod));
    var height = Math.ceil(size / Math.pow(2, opts.lod));
    var rgbmTexture = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Texture2D$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]({
        width: width,
        height: height
    });
    var framebuffer = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$FrameBuffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
    skybox.material.define('fragment', 'RGBM_ENCODE');
    if (opts.decodeRGBM) {
        skybox.material.define('fragment', 'RGBM_DECODE');
    }
    skybox.material.set('lod', opts.lod);
    var envMapPass = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$prePass$2f$EnvironmentMap$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]({
        texture: rgbmTexture
    });
    var cubePixels = {};
    for(var i = 0; i < targets.length; i++){
        cubePixels[targets[i]] = new Uint8Array(width * height * 4);
        var camera = envMapPass.getCamera(targets[i]);
        camera.fov = 90;
        framebuffer.attach(rgbmTexture);
        framebuffer.bind(renderer);
        renderer.render(dummyScene, camera);
        renderer.gl.readPixels(0, 0, width, height, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Texture$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].RGBA, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Texture$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].UNSIGNED_BYTE, cubePixels[targets[i]]);
        framebuffer.unbind(renderer);
    }
    skybox.dispose(renderer);
    framebuffer.dispose(renderer);
    rgbmTexture.dispose(renderer);
    return projectEnvironmentMapCPU(renderer, cubePixels, width, height);
};
const __TURBOPACK__default__export__ = sh;
}}),
"[project]/node_modules/claygl/src/geometry/Sphere.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Geometry$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/Geometry.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$BoundingBox$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/math/BoundingBox.js [app-client] (ecmascript)");
;
;
/**
 * @constructor clay.geometry.Sphere
 * @extends clay.Geometry
 * @param {Object} [opt]
 * @param {number} [widthSegments]
 * @param {number} [heightSegments]
 * @param {number} [phiStart]
 * @param {number} [phiLength]
 * @param {number} [thetaStart]
 * @param {number} [thetaLength]
 * @param {number} [radius]
 */ var Sphere = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Geometry$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].extend(/** @lends clay.geometry.Sphere# */ {
    dynamic: false,
    /**
     * @type {number}
     */ widthSegments: 40,
    /**
     * @type {number}
     */ heightSegments: 20,
    /**
     * @type {number}
     */ phiStart: 0,
    /**
     * @type {number}
     */ phiLength: Math.PI * 2,
    /**
     * @type {number}
     */ thetaStart: 0,
    /**
     * @type {number}
     */ thetaLength: Math.PI,
    /**
     * @type {number}
     */ radius: 1
}, function() {
    this.build();
}, /** @lends clay.geometry.Sphere.prototype */ {
    /**
     * Build sphere geometry
     */ build: function() {
        var heightSegments = this.heightSegments;
        var widthSegments = this.widthSegments;
        var positionAttr = this.attributes.position;
        var texcoordAttr = this.attributes.texcoord0;
        var normalAttr = this.attributes.normal;
        var vertexCount = (widthSegments + 1) * (heightSegments + 1);
        positionAttr.init(vertexCount);
        texcoordAttr.init(vertexCount);
        normalAttr.init(vertexCount);
        var IndicesCtor = vertexCount > 0xffff ? Uint32Array : Uint16Array;
        var indices = this.indices = new IndicesCtor(widthSegments * heightSegments * 6);
        var x, y, z, u, v, i, j;
        var radius = this.radius;
        var phiStart = this.phiStart;
        var phiLength = this.phiLength;
        var thetaStart = this.thetaStart;
        var thetaLength = this.thetaLength;
        var radius = this.radius;
        var pos = [];
        var uv = [];
        var offset = 0;
        var divider = 1 / radius;
        for(j = 0; j <= heightSegments; j++){
            for(i = 0; i <= widthSegments; i++){
                u = i / widthSegments;
                v = j / heightSegments;
                // X axis is inverted so texture can be mapped from left to right
                x = -radius * Math.cos(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);
                y = radius * Math.cos(thetaStart + v * thetaLength);
                z = radius * Math.sin(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);
                pos[0] = x;
                pos[1] = y;
                pos[2] = z;
                uv[0] = u;
                uv[1] = v;
                positionAttr.set(offset, pos);
                texcoordAttr.set(offset, uv);
                pos[0] *= divider;
                pos[1] *= divider;
                pos[2] *= divider;
                normalAttr.set(offset, pos);
                offset++;
            }
        }
        var i1, i2, i3, i4;
        var len = widthSegments + 1;
        var n = 0;
        for(j = 0; j < heightSegments; j++){
            for(i = 0; i < widthSegments; i++){
                i2 = j * len + i;
                i1 = j * len + i + 1;
                i4 = (j + 1) * len + i + 1;
                i3 = (j + 1) * len + i;
                indices[n++] = i1;
                indices[n++] = i2;
                indices[n++] = i4;
                indices[n++] = i2;
                indices[n++] = i3;
                indices[n++] = i4;
            }
        }
        this.boundingBox = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$BoundingBox$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
        this.boundingBox.max.set(radius, radius, radius);
        this.boundingBox.min.set(-radius, -radius, -radius);
    }
});
const __TURBOPACK__default__export__ = Sphere;
}}),
"[project]/node_modules/claygl/src/light/Ambient.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Light$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/Light.js [app-client] (ecmascript)");
;
/**
 * @constructor clay.light.Ambient
 * @extends clay.Light
 */ var AmbientLight = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Light$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].extend({
    castShadow: false
}, {
    type: 'AMBIENT_LIGHT',
    uniformTemplates: {
        ambientLightColor: {
            type: '3f',
            value: function(instance) {
                var color = instance.color;
                var intensity = instance.intensity;
                return [
                    color[0] * intensity,
                    color[1] * intensity,
                    color[2] * intensity
                ];
            }
        }
    }
});
const __TURBOPACK__default__export__ = AmbientLight;
}}),
"[project]/node_modules/claygl/src/light/Directional.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Light$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/Light.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/math/Vector3.js [app-client] (ecmascript)");
;
;
/**
 * @constructor clay.light.Directional
 * @extends clay.Light
 *
 * @example
 *     var light = new clay.light.Directional({
 *         intensity: 0.5,
 *         color: [1.0, 0.0, 0.0]
 *     });
 *     light.position.set(10, 10, 10);
 *     light.lookAt(clay.Vector3.ZERO);
 *     scene.add(light);
 */ var DirectionalLight = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Light$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].extend(/** @lends clay.light.Directional# */ {
    /**
     * @type {number}
     */ shadowBias: 0.001,
    /**
     * @type {number}
     */ shadowSlopeScale: 2.0,
    /**
     * Shadow cascade.
     * Use PSSM technique when it is larger than 1 and have a unique directional light in scene.
     * @type {number}
     */ shadowCascade: 1,
    /**
     * Available when shadowCascade is larger than 1 and have a unique directional light in scene.
     * @type {number}
     */ cascadeSplitLogFactor: 0.2
}, {
    type: 'DIRECTIONAL_LIGHT',
    uniformTemplates: {
        directionalLightDirection: {
            type: '3f',
            value: function(instance) {
                instance.__dir = instance.__dir || new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
                // Direction is target to eye
                return instance.__dir.copy(instance.worldTransform.z).normalize().negate().array;
            }
        },
        directionalLightColor: {
            type: '3f',
            value: function(instance) {
                var color = instance.color;
                var intensity = instance.intensity;
                return [
                    color[0] * intensity,
                    color[1] * intensity,
                    color[2] * intensity
                ];
            }
        }
    },
    /**
     * @return {clay.light.Directional}
     * @memberOf clay.light.Directional.prototype
     */ clone: function() {
        var light = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Light$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].prototype.clone.call(this);
        light.shadowBias = this.shadowBias;
        light.shadowSlopeScale = this.shadowSlopeScale;
        return light;
    }
});
const __TURBOPACK__default__export__ = DirectionalLight;
}}),
"[project]/node_modules/claygl/src/light/Point.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Light$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/Light.js [app-client] (ecmascript)");
;
/**
 * @constructor clay.light.Point
 * @extends clay.Light
 */ var PointLight = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Light$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].extend(/** @lends clay.light.Point# */ {
    /**
     * @type {number}
     */ range: 100,
    /**
     * @type {number}
     */ castShadow: false
}, {
    type: 'POINT_LIGHT',
    uniformTemplates: {
        pointLightPosition: {
            type: '3f',
            value: function(instance) {
                return instance.getWorldPosition().array;
            }
        },
        pointLightRange: {
            type: '1f',
            value: function(instance) {
                return instance.range;
            }
        },
        pointLightColor: {
            type: '3f',
            value: function(instance) {
                var color = instance.color;
                var intensity = instance.intensity;
                return [
                    color[0] * intensity,
                    color[1] * intensity,
                    color[2] * intensity
                ];
            }
        }
    },
    /**
     * @return {clay.light.Point}
     * @memberOf clay.light.Point.prototype
     */ clone: function() {
        var light = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Light$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].prototype.clone.call(this);
        light.range = this.range;
        return light;
    }
});
const __TURBOPACK__default__export__ = PointLight;
}}),
"[project]/node_modules/claygl/src/light/Spot.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Light$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/Light.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/math/Vector3.js [app-client] (ecmascript)");
;
;
/**
 * @constructor clay.light.Spot
 * @extends clay.Light
 */ var SpotLight = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Light$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].extend(/**@lends clay.light.Spot */ {
    /**
     * @type {number}
     */ range: 20,
    /**
     * @type {number}
     */ umbraAngle: 30,
    /**
     * @type {number}
     */ penumbraAngle: 45,
    /**
     * @type {number}
     */ falloffFactor: 2.0,
    /**
     * @type {number}
     */ shadowBias: 0.001,
    /**
     * @type {number}
     */ shadowSlopeScale: 2.0
}, {
    type: 'SPOT_LIGHT',
    uniformTemplates: {
        spotLightPosition: {
            type: '3f',
            value: function(instance) {
                return instance.getWorldPosition().array;
            }
        },
        spotLightRange: {
            type: '1f',
            value: function(instance) {
                return instance.range;
            }
        },
        spotLightUmbraAngleCosine: {
            type: '1f',
            value: function(instance) {
                return Math.cos(instance.umbraAngle * Math.PI / 180);
            }
        },
        spotLightPenumbraAngleCosine: {
            type: '1f',
            value: function(instance) {
                return Math.cos(instance.penumbraAngle * Math.PI / 180);
            }
        },
        spotLightFalloffFactor: {
            type: '1f',
            value: function(instance) {
                return instance.falloffFactor;
            }
        },
        spotLightDirection: {
            type: '3f',
            value: function(instance) {
                instance.__dir = instance.__dir || new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
                // Direction is target to eye
                return instance.__dir.copy(instance.worldTransform.z).negate().array;
            }
        },
        spotLightColor: {
            type: '3f',
            value: function(instance) {
                var color = instance.color;
                var intensity = instance.intensity;
                return [
                    color[0] * intensity,
                    color[1] * intensity,
                    color[2] * intensity
                ];
            }
        }
    },
    /**
     * @return {clay.light.Spot}
     * @memberOf clay.light.Spot.prototype
     */ clone: function() {
        var light = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Light$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].prototype.clone.call(this);
        light.range = this.range;
        light.umbraAngle = this.umbraAngle;
        light.penumbraAngle = this.penumbraAngle;
        light.falloffFactor = this.falloffFactor;
        light.shadowBias = this.shadowBias;
        light.shadowSlopeScale = this.shadowSlopeScale;
        return light;
    }
});
const __TURBOPACK__default__export__ = SpotLight;
}}),
"[project]/node_modules/claygl/src/math/Vector4.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/glmatrix/vec4.js [app-client] (ecmascript)");
;
/**
 * @constructor
 * @alias clay.Vector4
 * @param {number} x
 * @param {number} y
 * @param {number} z
 * @param {number} w
 */ var Vector4 = function(x, y, z, w) {
    x = x || 0;
    y = y || 0;
    z = z || 0;
    w = w || 0;
    /**
     * Storage of Vector4, read and write of x, y, z, w will change the values in array
     * All methods also operate on the array instead of x, y, z, w components
     * @name array
     * @type {Float32Array}
     * @memberOf clay.Vector4#
     */ this.array = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].fromValues(x, y, z, w);
    /**
     * Dirty flag is used by the Node to determine
     * if the matrix is updated to latest
     * @name _dirty
     * @type {boolean}
     * @memberOf clay.Vector4#
     */ this._dirty = true;
};
Vector4.prototype = {
    constructor: Vector4,
    /**
     * Add b to self
     * @param  {clay.Vector4} b
     * @return {clay.Vector4}
     */ add: function(b) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].add(this.array, this.array, b.array);
        this._dirty = true;
        return this;
    },
    /**
     * Set x, y and z components
     * @param  {number}  x
     * @param  {number}  y
     * @param  {number}  z
     * @param  {number}  w
     * @return {clay.Vector4}
     */ set: function(x, y, z, w) {
        this.array[0] = x;
        this.array[1] = y;
        this.array[2] = z;
        this.array[3] = w;
        this._dirty = true;
        return this;
    },
    /**
     * Set x, y, z and w components from array
     * @param  {Float32Array|number[]} arr
     * @return {clay.Vector4}
     */ setArray: function(arr) {
        this.array[0] = arr[0];
        this.array[1] = arr[1];
        this.array[2] = arr[2];
        this.array[3] = arr[3];
        this._dirty = true;
        return this;
    },
    /**
     * Clone a new Vector4
     * @return {clay.Vector4}
     */ clone: function() {
        return new Vector4(this.x, this.y, this.z, this.w);
    },
    /**
     * Copy from b
     * @param  {clay.Vector4} b
     * @return {clay.Vector4}
     */ copy: function(b) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].copy(this.array, b.array);
        this._dirty = true;
        return this;
    },
    /**
     * Alias for distance
     * @param  {clay.Vector4} b
     * @return {number}
     */ dist: function(b) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].dist(this.array, b.array);
    },
    /**
     * Distance between self and b
     * @param  {clay.Vector4} b
     * @return {number}
     */ distance: function(b) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].distance(this.array, b.array);
    },
    /**
     * Alias for divide
     * @param  {clay.Vector4} b
     * @return {clay.Vector4}
     */ div: function(b) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].div(this.array, this.array, b.array);
        this._dirty = true;
        return this;
    },
    /**
     * Divide self by b
     * @param  {clay.Vector4} b
     * @return {clay.Vector4}
     */ divide: function(b) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].divide(this.array, this.array, b.array);
        this._dirty = true;
        return this;
    },
    /**
     * Dot product of self and b
     * @param  {clay.Vector4} b
     * @return {number}
     */ dot: function(b) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].dot(this.array, b.array);
    },
    /**
     * Alias of length
     * @return {number}
     */ len: function() {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].len(this.array);
    },
    /**
     * Calculate the length
     * @return {number}
     */ length: function() {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].length(this.array);
    },
    /**
     * Linear interpolation between a and b
     * @param  {clay.Vector4} a
     * @param  {clay.Vector4} b
     * @param  {number}  t
     * @return {clay.Vector4}
     */ lerp: function(a, b, t) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].lerp(this.array, a.array, b.array, t);
        this._dirty = true;
        return this;
    },
    /**
     * Minimum of self and b
     * @param  {clay.Vector4} b
     * @return {clay.Vector4}
     */ min: function(b) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].min(this.array, this.array, b.array);
        this._dirty = true;
        return this;
    },
    /**
     * Maximum of self and b
     * @param  {clay.Vector4} b
     * @return {clay.Vector4}
     */ max: function(b) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].max(this.array, this.array, b.array);
        this._dirty = true;
        return this;
    },
    /**
     * Alias for multiply
     * @param  {clay.Vector4} b
     * @return {clay.Vector4}
     */ mul: function(b) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].mul(this.array, this.array, b.array);
        this._dirty = true;
        return this;
    },
    /**
     * Mutiply self and b
     * @param  {clay.Vector4} b
     * @return {clay.Vector4}
     */ multiply: function(b) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].multiply(this.array, this.array, b.array);
        this._dirty = true;
        return this;
    },
    /**
     * Negate self
     * @return {clay.Vector4}
     */ negate: function() {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].negate(this.array, this.array);
        this._dirty = true;
        return this;
    },
    /**
     * Normalize self
     * @return {clay.Vector4}
     */ normalize: function() {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].normalize(this.array, this.array);
        this._dirty = true;
        return this;
    },
    /**
     * Generate random x, y, z, w components with a given scale
     * @param  {number} scale
     * @return {clay.Vector4}
     */ random: function(scale) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].random(this.array, scale);
        this._dirty = true;
        return this;
    },
    /**
     * Scale self
     * @param  {number}  scale
     * @return {clay.Vector4}
     */ scale: function(s) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].scale(this.array, this.array, s);
        this._dirty = true;
        return this;
    },
    /**
     * Scale b and add to self
     * @param  {clay.Vector4} b
     * @param  {number}  scale
     * @return {clay.Vector4}
     */ scaleAndAdd: function(b, s) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].scaleAndAdd(this.array, this.array, b.array, s);
        this._dirty = true;
        return this;
    },
    /**
     * Alias for squaredDistance
     * @param  {clay.Vector4} b
     * @return {number}
     */ sqrDist: function(b) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].sqrDist(this.array, b.array);
    },
    /**
     * Squared distance between self and b
     * @param  {clay.Vector4} b
     * @return {number}
     */ squaredDistance: function(b) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].squaredDistance(this.array, b.array);
    },
    /**
     * Alias for squaredLength
     * @return {number}
     */ sqrLen: function() {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].sqrLen(this.array);
    },
    /**
     * Squared length of self
     * @return {number}
     */ squaredLength: function() {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].squaredLength(this.array);
    },
    /**
     * Alias for subtract
     * @param  {clay.Vector4} b
     * @return {clay.Vector4}
     */ sub: function(b) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].sub(this.array, this.array, b.array);
        this._dirty = true;
        return this;
    },
    /**
     * Subtract b from self
     * @param  {clay.Vector4} b
     * @return {clay.Vector4}
     */ subtract: function(b) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].subtract(this.array, this.array, b.array);
        this._dirty = true;
        return this;
    },
    /**
     * Transform self with a Matrix4 m
     * @param  {clay.Matrix4} m
     * @return {clay.Vector4}
     */ transformMat4: function(m) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].transformMat4(this.array, this.array, m.array);
        this._dirty = true;
        return this;
    },
    /**
     * Transform self with a Quaternion q
     * @param  {clay.Quaternion} q
     * @return {clay.Vector4}
     */ transformQuat: function(q) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].transformQuat(this.array, this.array, q.array);
        this._dirty = true;
        return this;
    },
    toString: function() {
        return '[' + Array.prototype.join.call(this.array, ',') + ']';
    },
    toArray: function() {
        return Array.prototype.slice.call(this.array);
    }
};
var defineProperty = Object.defineProperty;
// Getter and Setter
if (defineProperty) {
    var proto = Vector4.prototype;
    /**
     * @name x
     * @type {number}
     * @memberOf clay.Vector4
     * @instance
     */ defineProperty(proto, 'x', {
        get: function() {
            return this.array[0];
        },
        set: function(value) {
            this.array[0] = value;
            this._dirty = true;
        }
    });
    /**
     * @name y
     * @type {number}
     * @memberOf clay.Vector4
     * @instance
     */ defineProperty(proto, 'y', {
        get: function() {
            return this.array[1];
        },
        set: function(value) {
            this.array[1] = value;
            this._dirty = true;
        }
    });
    /**
     * @name z
     * @type {number}
     * @memberOf clay.Vector4
     * @instance
     */ defineProperty(proto, 'z', {
        get: function() {
            return this.array[2];
        },
        set: function(value) {
            this.array[2] = value;
            this._dirty = true;
        }
    });
    /**
     * @name w
     * @type {number}
     * @memberOf clay.Vector4
     * @instance
     */ defineProperty(proto, 'w', {
        get: function() {
            return this.array[3];
        },
        set: function(value) {
            this.array[3] = value;
            this._dirty = true;
        }
    });
}
// Supply methods that are not in place
/**
 * @param  {clay.Vector4} out
 * @param  {clay.Vector4} a
 * @param  {clay.Vector4} b
 * @return {clay.Vector4}
 */ Vector4.add = function(out, a, b) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].add(out.array, a.array, b.array);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Vector4} out
 * @param  {number}  x
 * @param  {number}  y
 * @param  {number}  z
 * @return {clay.Vector4}
 */ Vector4.set = function(out, x, y, z, w) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].set(out.array, x, y, z, w);
    out._dirty = true;
};
/**
 * @param  {clay.Vector4} out
 * @param  {clay.Vector4} b
 * @return {clay.Vector4}
 */ Vector4.copy = function(out, b) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].copy(out.array, b.array);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Vector4} a
 * @param  {clay.Vector4} b
 * @return {number}
 */ Vector4.dist = function(a, b) {
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].distance(a.array, b.array);
};
/**
 * @function
 * @param  {clay.Vector4} a
 * @param  {clay.Vector4} b
 * @return {number}
 */ Vector4.distance = Vector4.dist;
/**
 * @param  {clay.Vector4} out
 * @param  {clay.Vector4} a
 * @param  {clay.Vector4} b
 * @return {clay.Vector4}
 */ Vector4.div = function(out, a, b) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].divide(out.array, a.array, b.array);
    out._dirty = true;
    return out;
};
/**
 * @function
 * @param  {clay.Vector4} out
 * @param  {clay.Vector4} a
 * @param  {clay.Vector4} b
 * @return {clay.Vector4}
 */ Vector4.divide = Vector4.div;
/**
 * @param  {clay.Vector4} a
 * @param  {clay.Vector4} b
 * @return {number}
 */ Vector4.dot = function(a, b) {
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].dot(a.array, b.array);
};
/**
 * @param  {clay.Vector4} a
 * @return {number}
 */ Vector4.len = function(b) {
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].length(b.array);
};
// Vector4.length = Vector4.len;
/**
 * @param  {clay.Vector4} out
 * @param  {clay.Vector4} a
 * @param  {clay.Vector4} b
 * @param  {number}  t
 * @return {clay.Vector4}
 */ Vector4.lerp = function(out, a, b, t) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].lerp(out.array, a.array, b.array, t);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Vector4} out
 * @param  {clay.Vector4} a
 * @param  {clay.Vector4} b
 * @return {clay.Vector4}
 */ Vector4.min = function(out, a, b) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].min(out.array, a.array, b.array);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Vector4} out
 * @param  {clay.Vector4} a
 * @param  {clay.Vector4} b
 * @return {clay.Vector4}
 */ Vector4.max = function(out, a, b) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].max(out.array, a.array, b.array);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Vector4} out
 * @param  {clay.Vector4} a
 * @param  {clay.Vector4} b
 * @return {clay.Vector4}
 */ Vector4.mul = function(out, a, b) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].multiply(out.array, a.array, b.array);
    out._dirty = true;
    return out;
};
/**
 * @function
 * @param  {clay.Vector4} out
 * @param  {clay.Vector4} a
 * @param  {clay.Vector4} b
 * @return {clay.Vector4}
 */ Vector4.multiply = Vector4.mul;
/**
 * @param  {clay.Vector4} out
 * @param  {clay.Vector4} a
 * @return {clay.Vector4}
 */ Vector4.negate = function(out, a) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].negate(out.array, a.array);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Vector4} out
 * @param  {clay.Vector4} a
 * @return {clay.Vector4}
 */ Vector4.normalize = function(out, a) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].normalize(out.array, a.array);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Vector4} out
 * @param  {number}  scale
 * @return {clay.Vector4}
 */ Vector4.random = function(out, scale) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].random(out.array, scale);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Vector4} out
 * @param  {clay.Vector4} a
 * @param  {number}  scale
 * @return {clay.Vector4}
 */ Vector4.scale = function(out, a, scale) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].scale(out.array, a.array, scale);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Vector4} out
 * @param  {clay.Vector4} a
 * @param  {clay.Vector4} b
 * @param  {number}  scale
 * @return {clay.Vector4}
 */ Vector4.scaleAndAdd = function(out, a, b, scale) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].scaleAndAdd(out.array, a.array, b.array, scale);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Vector4} a
 * @param  {clay.Vector4} b
 * @return {number}
 */ Vector4.sqrDist = function(a, b) {
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].sqrDist(a.array, b.array);
};
/**
 * @function
 * @param  {clay.Vector4} a
 * @param  {clay.Vector4} b
 * @return {number}
 */ Vector4.squaredDistance = Vector4.sqrDist;
/**
 * @param  {clay.Vector4} a
 * @return {number}
 */ Vector4.sqrLen = function(a) {
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].sqrLen(a.array);
};
/**
 * @function
 * @param  {clay.Vector4} a
 * @return {number}
 */ Vector4.squaredLength = Vector4.sqrLen;
/**
 * @param  {clay.Vector4} out
 * @param  {clay.Vector4} a
 * @param  {clay.Vector4} b
 * @return {clay.Vector4}
 */ Vector4.sub = function(out, a, b) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].subtract(out.array, a.array, b.array);
    out._dirty = true;
    return out;
};
/**
 * @function
 * @param  {clay.Vector4} out
 * @param  {clay.Vector4} a
 * @param  {clay.Vector4} b
 * @return {clay.Vector4}
 */ Vector4.subtract = Vector4.sub;
/**
 * @param  {clay.Vector4} out
 * @param  {clay.Vector4} a
 * @param  {clay.Matrix4} m
 * @return {clay.Vector4}
 */ Vector4.transformMat4 = function(out, a, m) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].transformMat4(out.array, a.array, m.array);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Vector4} out
 * @param  {clay.Vector4} a
 * @param  {clay.Quaternion} q
 * @return {clay.Vector4}
 */ Vector4.transformQuat = function(out, a, q) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].transformQuat(out.array, a.array, q.array);
    out._dirty = true;
    return out;
};
const __TURBOPACK__default__export__ = Vector4;
}}),
"[project]/node_modules/claygl/src/glmatrix/mat2.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
  * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */ __turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$common$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/glmatrix/common.js [app-client] (ecmascript)");
;
/**
 * @class 2x2 Matrix
 * @name mat2
 */ var mat2 = {};
/**
 * Creates a new identity mat2
 *
 * @returns {mat2} a new 2x2 matrix
 */ mat2.create = function() {
    var out = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$common$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GLMAT_ARRAY_TYPE"](4);
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    return out;
};
/**
 * Creates a new mat2 initialized with values from an existing matrix
 *
 * @param {mat2} a matrix to clone
 * @returns {mat2} a new 2x2 matrix
 */ mat2.clone = function(a) {
    var out = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$common$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GLMAT_ARRAY_TYPE"](4);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    return out;
};
/**
 * Copy the values from one mat2 to another
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the source matrix
 * @returns {mat2} out
 */ mat2.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    return out;
};
/**
 * Set a mat2 to the identity matrix
 *
 * @param {mat2} out the receiving matrix
 * @returns {mat2} out
 */ mat2.identity = function(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    return out;
};
/**
 * Transpose the values of a mat2
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the source matrix
 * @returns {mat2} out
 */ mat2.transpose = function(out, a) {
    // If we are transposing ourselves we can skip a few steps but have to cache some values
    if (out === a) {
        var a1 = a[1];
        out[1] = a[2];
        out[2] = a1;
    } else {
        out[0] = a[0];
        out[1] = a[2];
        out[2] = a[1];
        out[3] = a[3];
    }
    return out;
};
/**
 * Inverts a mat2
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the source matrix
 * @returns {mat2} out
 */ mat2.invert = function(out, a) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], // Calculate the determinant
    det = a0 * a3 - a2 * a1;
    if (!det) {
        return null;
    }
    det = 1.0 / det;
    out[0] = a3 * det;
    out[1] = -a1 * det;
    out[2] = -a2 * det;
    out[3] = a0 * det;
    return out;
};
/**
 * Calculates the adjugate of a mat2
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the source matrix
 * @returns {mat2} out
 */ mat2.adjoint = function(out, a) {
    // Caching this value is nessecary if out == a
    var a0 = a[0];
    out[0] = a[3];
    out[1] = -a[1];
    out[2] = -a[2];
    out[3] = a0;
    return out;
};
/**
 * Calculates the determinant of a mat2
 *
 * @param {mat2} a the source matrix
 * @returns {Number} determinant of a
 */ mat2.determinant = function(a) {
    return a[0] * a[3] - a[2] * a[1];
};
/**
 * Multiplies two mat2's
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the first operand
 * @param {mat2} b the second operand
 * @returns {mat2} out
 */ mat2.multiply = function(out, a, b) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
    out[0] = a0 * b0 + a2 * b1;
    out[1] = a1 * b0 + a3 * b1;
    out[2] = a0 * b2 + a2 * b3;
    out[3] = a1 * b2 + a3 * b3;
    return out;
};
/**
 * Alias for {@link mat2.multiply}
 * @function
 */ mat2.mul = mat2.multiply;
/**
 * Rotates a mat2 by the given angle
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2} out
 */ mat2.rotate = function(out, a, rad) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], s = Math.sin(rad), c = Math.cos(rad);
    out[0] = a0 * c + a2 * s;
    out[1] = a1 * c + a3 * s;
    out[2] = a0 * -s + a2 * c;
    out[3] = a1 * -s + a3 * c;
    return out;
};
/**
 * Scales the mat2 by the dimensions in the given vec2
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the matrix to rotate
 * @param {vec2} v the vec2 to scale the matrix by
 * @returns {mat2} out
 **/ mat2.scale = function(out, a, v) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], v0 = v[0], v1 = v[1];
    out[0] = a0 * v0;
    out[1] = a1 * v0;
    out[2] = a2 * v1;
    out[3] = a3 * v1;
    return out;
};
/**
 * Returns Frobenius norm of a mat2
 *
 * @param {mat2} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */ mat2.frob = function(a) {
    return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2));
};
/**
 * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix
 * @param {mat2} L the lower triangular matrix
 * @param {mat2} D the diagonal matrix
 * @param {mat2} U the upper triangular matrix
 * @param {mat2} a the input matrix to factorize
 */ mat2.LDU = function(L, D, U, a) {
    L[2] = a[2] / a[0];
    U[0] = a[0];
    U[1] = a[1];
    U[3] = a[3] - L[2] * U[1];
    return [
        L,
        D,
        U
    ];
};
const __TURBOPACK__default__export__ = mat2;
}}),
"[project]/node_modules/claygl/src/math/Matrix2.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/glmatrix/mat2.js [app-client] (ecmascript)");
;
/**
 * @constructor
 * @alias clay.Matrix2
 */ var Matrix2 = function() {
    /**
     * Storage of Matrix2
     * @name array
     * @type {Float32Array}
     * @memberOf clay.Matrix2#
     */ this.array = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].create();
    /**
     * @name _dirty
     * @type {boolean}
     * @memberOf clay.Matrix2#
     */ this._dirty = true;
};
Matrix2.prototype = {
    constructor: Matrix2,
    /**
     * Set components from array
     * @param  {Float32Array|number[]} arr
     */ setArray: function(arr) {
        for(var i = 0; i < this.array.length; i++){
            this.array[i] = arr[i];
        }
        this._dirty = true;
        return this;
    },
    /**
     * Clone a new Matrix2
     * @return {clay.Matrix2}
     */ clone: function() {
        return new Matrix2().copy(this);
    },
    /**
     * Copy from b
     * @param  {clay.Matrix2} b
     * @return {clay.Matrix2}
     */ copy: function(b) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].copy(this.array, b.array);
        this._dirty = true;
        return this;
    },
    /**
     * Calculate the adjugate of self, in-place
     * @return {clay.Matrix2}
     */ adjoint: function() {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].adjoint(this.array, this.array);
        this._dirty = true;
        return this;
    },
    /**
     * Calculate matrix determinant
     * @return {number}
     */ determinant: function() {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].determinant(this.array);
    },
    /**
     * Set to a identity matrix
     * @return {clay.Matrix2}
     */ identity: function() {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].identity(this.array);
        this._dirty = true;
        return this;
    },
    /**
     * Invert self
     * @return {clay.Matrix2}
     */ invert: function() {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].invert(this.array, this.array);
        this._dirty = true;
        return this;
    },
    /**
     * Alias for mutiply
     * @param  {clay.Matrix2} b
     * @return {clay.Matrix2}
     */ mul: function(b) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].mul(this.array, this.array, b.array);
        this._dirty = true;
        return this;
    },
    /**
     * Alias for multiplyLeft
     * @param  {clay.Matrix2} a
     * @return {clay.Matrix2}
     */ mulLeft: function(a) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].mul(this.array, a.array, this.array);
        this._dirty = true;
        return this;
    },
    /**
     * Multiply self and b
     * @param  {clay.Matrix2} b
     * @return {clay.Matrix2}
     */ multiply: function(b) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].multiply(this.array, this.array, b.array);
        this._dirty = true;
        return this;
    },
    /**
     * Multiply a and self, a is on the left
     * @param  {clay.Matrix2} a
     * @return {clay.Matrix2}
     */ multiplyLeft: function(a) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].multiply(this.array, a.array, this.array);
        this._dirty = true;
        return this;
    },
    /**
     * Rotate self by a given radian
     * @param  {number}   rad
     * @return {clay.Matrix2}
     */ rotate: function(rad) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].rotate(this.array, this.array, rad);
        this._dirty = true;
        return this;
    },
    /**
     * Scale self by s
     * @param  {clay.Vector2}  s
     * @return {clay.Matrix2}
     */ scale: function(v) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].scale(this.array, this.array, v.array);
        this._dirty = true;
        return this;
    },
    /**
     * Transpose self, in-place.
     * @return {clay.Matrix2}
     */ transpose: function() {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].transpose(this.array, this.array);
        this._dirty = true;
        return this;
    },
    toString: function() {
        return '[' + Array.prototype.join.call(this.array, ',') + ']';
    },
    toArray: function() {
        return Array.prototype.slice.call(this.array);
    }
};
/**
 * @param  {Matrix2} out
 * @param  {Matrix2} a
 * @return {Matrix2}
 */ Matrix2.adjoint = function(out, a) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].adjoint(out.array, a.array);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Matrix2} out
 * @param  {clay.Matrix2} a
 * @return {clay.Matrix2}
 */ Matrix2.copy = function(out, a) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].copy(out.array, a.array);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Matrix2} a
 * @return {number}
 */ Matrix2.determinant = function(a) {
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].determinant(a.array);
};
/**
 * @param  {clay.Matrix2} out
 * @return {clay.Matrix2}
 */ Matrix2.identity = function(out) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].identity(out.array);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Matrix2} out
 * @param  {clay.Matrix2} a
 * @return {clay.Matrix2}
 */ Matrix2.invert = function(out, a) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].invert(out.array, a.array);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Matrix2} out
 * @param  {clay.Matrix2} a
 * @param  {clay.Matrix2} b
 * @return {clay.Matrix2}
 */ Matrix2.mul = function(out, a, b) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].mul(out.array, a.array, b.array);
    out._dirty = true;
    return out;
};
/**
 * @function
 * @param  {clay.Matrix2} out
 * @param  {clay.Matrix2} a
 * @param  {clay.Matrix2} b
 * @return {clay.Matrix2}
 */ Matrix2.multiply = Matrix2.mul;
/**
 * @param  {clay.Matrix2} out
 * @param  {clay.Matrix2} a
 * @param  {number}   rad
 * @return {clay.Matrix2}
 */ Matrix2.rotate = function(out, a, rad) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].rotate(out.array, a.array, rad);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Matrix2} out
 * @param  {clay.Matrix2} a
 * @param  {clay.Vector2}  v
 * @return {clay.Matrix2}
 */ Matrix2.scale = function(out, a, v) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].scale(out.array, a.array, v.array);
    out._dirty = true;
    return out;
};
/**
 * @param  {Matrix2} out
 * @param  {Matrix2} a
 * @return {Matrix2}
 */ Matrix2.transpose = function(out, a) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].transpose(out.array, a.array);
    out._dirty = true;
    return out;
};
const __TURBOPACK__default__export__ = Matrix2;
}}),
"[project]/node_modules/claygl/src/glmatrix/mat2d.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
  * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */ __turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$common$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/glmatrix/common.js [app-client] (ecmascript)");
;
/**
 * @class 2x3 Matrix
 * @name mat2d
 *
 * @description
 * A mat2d contains six elements defined as:
 * <pre>
 * [a, c, tx,
 *  b, d, ty]
 * </pre>
 * This is a short form for the 3x3 matrix:
 * <pre>
 * [a, c, tx,
 *  b, d, ty,
 *  0, 0, 1]
 * </pre>
 * The last row is ignored so the array is shorter and operations are faster.
 */ var mat2d = {};
/**
 * Creates a new identity mat2d
 *
 * @returns {mat2d} a new 2x3 matrix
 */ mat2d.create = function() {
    var out = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$common$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GLMAT_ARRAY_TYPE"](6);
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    out[4] = 0;
    out[5] = 0;
    return out;
};
/**
 * Creates a new mat2d initialized with values from an existing matrix
 *
 * @param {mat2d} a matrix to clone
 * @returns {mat2d} a new 2x3 matrix
 */ mat2d.clone = function(a) {
    var out = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$common$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GLMAT_ARRAY_TYPE"](6);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    return out;
};
/**
 * Copy the values from one mat2d to another
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the source matrix
 * @returns {mat2d} out
 */ mat2d.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    return out;
};
/**
 * Set a mat2d to the identity matrix
 *
 * @param {mat2d} out the receiving matrix
 * @returns {mat2d} out
 */ mat2d.identity = function(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    out[4] = 0;
    out[5] = 0;
    return out;
};
/**
 * Inverts a mat2d
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the source matrix
 * @returns {mat2d} out
 */ mat2d.invert = function(out, a) {
    var aa = a[0], ab = a[1], ac = a[2], ad = a[3], atx = a[4], aty = a[5];
    var det = aa * ad - ab * ac;
    if (!det) {
        return null;
    }
    det = 1.0 / det;
    out[0] = ad * det;
    out[1] = -ab * det;
    out[2] = -ac * det;
    out[3] = aa * det;
    out[4] = (ac * aty - ad * atx) * det;
    out[5] = (ab * atx - aa * aty) * det;
    return out;
};
/**
 * Calculates the determinant of a mat2d
 *
 * @param {mat2d} a the source matrix
 * @returns {Number} determinant of a
 */ mat2d.determinant = function(a) {
    return a[0] * a[3] - a[1] * a[2];
};
/**
 * Multiplies two mat2d's
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the first operand
 * @param {mat2d} b the second operand
 * @returns {mat2d} out
 */ mat2d.multiply = function(out, a, b) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5], b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];
    out[0] = a0 * b0 + a2 * b1;
    out[1] = a1 * b0 + a3 * b1;
    out[2] = a0 * b2 + a2 * b3;
    out[3] = a1 * b2 + a3 * b3;
    out[4] = a0 * b4 + a2 * b5 + a4;
    out[5] = a1 * b4 + a3 * b5 + a5;
    return out;
};
/**
 * Alias for {@link mat2d.multiply}
 * @function
 */ mat2d.mul = mat2d.multiply;
/**
 * Rotates a mat2d by the given angle
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2d} out
 */ mat2d.rotate = function(out, a, rad) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5], s = Math.sin(rad), c = Math.cos(rad);
    out[0] = a0 * c + a2 * s;
    out[1] = a1 * c + a3 * s;
    out[2] = a0 * -s + a2 * c;
    out[3] = a1 * -s + a3 * c;
    out[4] = a4;
    out[5] = a5;
    return out;
};
/**
 * Scales the mat2d by the dimensions in the given vec2
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the matrix to translate
 * @param {vec2} v the vec2 to scale the matrix by
 * @returns {mat2d} out
 **/ mat2d.scale = function(out, a, v) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5], v0 = v[0], v1 = v[1];
    out[0] = a0 * v0;
    out[1] = a1 * v0;
    out[2] = a2 * v1;
    out[3] = a3 * v1;
    out[4] = a4;
    out[5] = a5;
    return out;
};
/**
 * Translates the mat2d by the dimensions in the given vec2
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the matrix to translate
 * @param {vec2} v the vec2 to translate the matrix by
 * @returns {mat2d} out
 **/ mat2d.translate = function(out, a, v) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5], v0 = v[0], v1 = v[1];
    out[0] = a0;
    out[1] = a1;
    out[2] = a2;
    out[3] = a3;
    out[4] = a0 * v0 + a2 * v1 + a4;
    out[5] = a1 * v0 + a3 * v1 + a5;
    return out;
};
/**
 * Returns Frobenius norm of a mat2d
 *
 * @param {mat2d} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */ mat2d.frob = function(a) {
    return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + 1);
};
const __TURBOPACK__default__export__ = mat2d;
}}),
"[project]/node_modules/claygl/src/math/Matrix2d.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat2d$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/glmatrix/mat2d.js [app-client] (ecmascript)");
;
/**
 * @constructor
 * @alias clay.Matrix2d
 */ var Matrix2d = function() {
    /**
     * Storage of Matrix2d
     * @name array
     * @type {Float32Array}
     * @memberOf clay.Matrix2d#
     */ this.array = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat2d$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].create();
    /**
     * @name _dirty
     * @type {boolean}
     * @memberOf clay.Matrix2d#
     */ this._dirty = true;
};
Matrix2d.prototype = {
    constructor: Matrix2d,
    /**
     * Set components from array
     * @param  {Float32Array|number[]} arr
     */ setArray: function(arr) {
        for(var i = 0; i < this.array.length; i++){
            this.array[i] = arr[i];
        }
        this._dirty = true;
        return this;
    },
    /**
     * Clone a new Matrix2d
     * @return {clay.Matrix2d}
     */ clone: function() {
        return new Matrix2d().copy(this);
    },
    /**
     * Copy from b
     * @param  {clay.Matrix2d} b
     * @return {clay.Matrix2d}
     */ copy: function(b) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat2d$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].copy(this.array, b.array);
        this._dirty = true;
        return this;
    },
    /**
     * Calculate matrix determinant
     * @return {number}
     */ determinant: function() {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat2d$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].determinant(this.array);
    },
    /**
     * Set to a identity matrix
     * @return {clay.Matrix2d}
     */ identity: function() {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat2d$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].identity(this.array);
        this._dirty = true;
        return this;
    },
    /**
     * Invert self
     * @return {clay.Matrix2d}
     */ invert: function() {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat2d$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].invert(this.array, this.array);
        this._dirty = true;
        return this;
    },
    /**
     * Alias for mutiply
     * @param  {clay.Matrix2d} b
     * @return {clay.Matrix2d}
     */ mul: function(b) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat2d$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].mul(this.array, this.array, b.array);
        this._dirty = true;
        return this;
    },
    /**
     * Alias for multiplyLeft
     * @param  {clay.Matrix2d} a
     * @return {clay.Matrix2d}
     */ mulLeft: function(b) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat2d$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].mul(this.array, b.array, this.array);
        this._dirty = true;
        return this;
    },
    /**
     * Multiply self and b
     * @param  {clay.Matrix2d} b
     * @return {clay.Matrix2d}
     */ multiply: function(b) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat2d$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].multiply(this.array, this.array, b.array);
        this._dirty = true;
        return this;
    },
    /**
     * Multiply a and self, a is on the left
     * @param  {clay.Matrix2d} a
     * @return {clay.Matrix2d}
     */ multiplyLeft: function(b) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat2d$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].multiply(this.array, b.array, this.array);
        this._dirty = true;
        return this;
    },
    /**
     * Rotate self by a given radian
     * @param  {number}   rad
     * @return {clay.Matrix2d}
     */ rotate: function(rad) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat2d$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].rotate(this.array, this.array, rad);
        this._dirty = true;
        return this;
    },
    /**
     * Scale self by s
     * @param  {clay.Vector2}  s
     * @return {clay.Matrix2d}
     */ scale: function(s) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat2d$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].scale(this.array, this.array, s.array);
        this._dirty = true;
        return this;
    },
    /**
     * Translate self by v
     * @param  {clay.Vector2}  v
     * @return {clay.Matrix2d}
     */ translate: function(v) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat2d$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].translate(this.array, this.array, v.array);
        this._dirty = true;
        return this;
    },
    toString: function() {
        return '[' + Array.prototype.join.call(this.array, ',') + ']';
    },
    toArray: function() {
        return Array.prototype.slice.call(this.array);
    }
};
/**
 * @param  {clay.Matrix2d} out
 * @param  {clay.Matrix2d} a
 * @return {clay.Matrix2d}
 */ Matrix2d.copy = function(out, a) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat2d$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].copy(out.array, a.array);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Matrix2d} a
 * @return {number}
 */ Matrix2d.determinant = function(a) {
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat2d$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].determinant(a.array);
};
/**
 * @param  {clay.Matrix2d} out
 * @return {clay.Matrix2d}
 */ Matrix2d.identity = function(out) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat2d$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].identity(out.array);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Matrix2d} out
 * @param  {clay.Matrix2d} a
 * @return {clay.Matrix2d}
 */ Matrix2d.invert = function(out, a) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat2d$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].invert(out.array, a.array);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Matrix2d} out
 * @param  {clay.Matrix2d} a
 * @param  {clay.Matrix2d} b
 * @return {clay.Matrix2d}
 */ Matrix2d.mul = function(out, a, b) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat2d$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].mul(out.array, a.array, b.array);
    out._dirty = true;
    return out;
};
/**
 * @function
 * @param  {clay.Matrix2d} out
 * @param  {clay.Matrix2d} a
 * @param  {clay.Matrix2d} b
 * @return {clay.Matrix2d}
 */ Matrix2d.multiply = Matrix2d.mul;
/**
 * @param  {clay.Matrix2d} out
 * @param  {clay.Matrix2d} a
 * @param  {number}   rad
 * @return {clay.Matrix2d}
 */ Matrix2d.rotate = function(out, a, rad) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat2d$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].rotate(out.array, a.array, rad);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Matrix2d} out
 * @param  {clay.Matrix2d} a
 * @param  {clay.Vector2}  v
 * @return {clay.Matrix2d}
 */ Matrix2d.scale = function(out, a, v) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat2d$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].scale(out.array, a.array, v.array);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Matrix2d} out
 * @param  {clay.Matrix2d} a
 * @param  {clay.Vector2}  v
 * @return {clay.Matrix2d}
 */ Matrix2d.translate = function(out, a, v) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat2d$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].translate(out.array, a.array, v.array);
    out._dirty = true;
    return out;
};
const __TURBOPACK__default__export__ = Matrix2d;
}}),
"[project]/node_modules/claygl/src/math/Matrix3.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/glmatrix/mat3.js [app-client] (ecmascript)");
;
/**
 * @constructor
 * @alias clay.Matrix3
 */ var Matrix3 = function() {
    /**
     * Storage of Matrix3
     * @name array
     * @type {Float32Array}
     * @memberOf clay.Matrix3#
     */ this.array = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].create();
    /**
     * @name _dirty
     * @type {boolean}
     * @memberOf clay.Matrix3#
     */ this._dirty = true;
};
Matrix3.prototype = {
    constructor: Matrix3,
    /**
     * Set components from array
     * @param  {Float32Array|number[]} arr
     */ setArray: function(arr) {
        for(var i = 0; i < this.array.length; i++){
            this.array[i] = arr[i];
        }
        this._dirty = true;
        return this;
    },
    /**
     * Calculate the adjugate of self, in-place
     * @return {clay.Matrix3}
     */ adjoint: function() {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].adjoint(this.array, this.array);
        this._dirty = true;
        return this;
    },
    /**
     * Clone a new Matrix3
     * @return {clay.Matrix3}
     */ clone: function() {
        return new Matrix3().copy(this);
    },
    /**
     * Copy from b
     * @param  {clay.Matrix3} b
     * @return {clay.Matrix3}
     */ copy: function(b) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].copy(this.array, b.array);
        this._dirty = true;
        return this;
    },
    /**
     * Calculate matrix determinant
     * @return {number}
     */ determinant: function() {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].determinant(this.array);
    },
    /**
     * Copy the values from Matrix2d a
     * @param  {clay.Matrix2d} a
     * @return {clay.Matrix3}
     */ fromMat2d: function(a) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].fromMat2d(this.array, a.array);
        this._dirty = true;
        return this;
    },
    /**
     * Copies the upper-left 3x3 values of Matrix4
     * @param  {clay.Matrix4} a
     * @return {clay.Matrix3}
     */ fromMat4: function(a) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].fromMat4(this.array, a.array);
        this._dirty = true;
        return this;
    },
    /**
     * Calculates a rotation matrix from the given quaternion
     * @param  {clay.Quaternion} q
     * @return {clay.Matrix3}
     */ fromQuat: function(q) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].fromQuat(this.array, q.array);
        this._dirty = true;
        return this;
    },
    /**
     * Set to a identity matrix
     * @return {clay.Matrix3}
     */ identity: function() {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].identity(this.array);
        this._dirty = true;
        return this;
    },
    /**
     * Invert self
     * @return {clay.Matrix3}
     */ invert: function() {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].invert(this.array, this.array);
        this._dirty = true;
        return this;
    },
    /**
     * Alias for mutiply
     * @param  {clay.Matrix3} b
     * @return {clay.Matrix3}
     */ mul: function(b) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].mul(this.array, this.array, b.array);
        this._dirty = true;
        return this;
    },
    /**
     * Alias for multiplyLeft
     * @param  {clay.Matrix3} a
     * @return {clay.Matrix3}
     */ mulLeft: function(a) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].mul(this.array, a.array, this.array);
        this._dirty = true;
        return this;
    },
    /**
     * Multiply self and b
     * @param  {clay.Matrix3} b
     * @return {clay.Matrix3}
     */ multiply: function(b) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].multiply(this.array, this.array, b.array);
        this._dirty = true;
        return this;
    },
    /**
     * Multiply a and self, a is on the left
     * @param  {clay.Matrix3} a
     * @return {clay.Matrix3}
     */ multiplyLeft: function(a) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].multiply(this.array, a.array, this.array);
        this._dirty = true;
        return this;
    },
    /**
     * Rotate self by a given radian
     * @param  {number}   rad
     * @return {clay.Matrix3}
     */ rotate: function(rad) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].rotate(this.array, this.array, rad);
        this._dirty = true;
        return this;
    },
    /**
     * Scale self by s
     * @param  {clay.Vector2}  s
     * @return {clay.Matrix3}
     */ scale: function(v) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].scale(this.array, this.array, v.array);
        this._dirty = true;
        return this;
    },
    /**
     * Translate self by v
     * @param  {clay.Vector2}  v
     * @return {clay.Matrix3}
     */ translate: function(v) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].translate(this.array, this.array, v.array);
        this._dirty = true;
        return this;
    },
    /**
     * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix
     * @param {clay.Matrix4} a
     */ normalFromMat4: function(a) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].normalFromMat4(this.array, a.array);
        this._dirty = true;
        return this;
    },
    /**
     * Transpose self, in-place.
     * @return {clay.Matrix2}
     */ transpose: function() {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].transpose(this.array, this.array);
        this._dirty = true;
        return this;
    },
    toString: function() {
        return '[' + Array.prototype.join.call(this.array, ',') + ']';
    },
    toArray: function() {
        return Array.prototype.slice.call(this.array);
    }
};
/**
 * @param  {clay.Matrix3} out
 * @param  {clay.Matrix3} a
 * @return {clay.Matrix3}
 */ Matrix3.adjoint = function(out, a) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].adjoint(out.array, a.array);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Matrix3} out
 * @param  {clay.Matrix3} a
 * @return {clay.Matrix3}
 */ Matrix3.copy = function(out, a) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].copy(out.array, a.array);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Matrix3} a
 * @return {number}
 */ Matrix3.determinant = function(a) {
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].determinant(a.array);
};
/**
 * @param  {clay.Matrix3} out
 * @return {clay.Matrix3}
 */ Matrix3.identity = function(out) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].identity(out.array);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Matrix3} out
 * @param  {clay.Matrix3} a
 * @return {clay.Matrix3}
 */ Matrix3.invert = function(out, a) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].invert(out.array, a.array);
    return out;
};
/**
 * @param  {clay.Matrix3} out
 * @param  {clay.Matrix3} a
 * @param  {clay.Matrix3} b
 * @return {clay.Matrix3}
 */ Matrix3.mul = function(out, a, b) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].mul(out.array, a.array, b.array);
    out._dirty = true;
    return out;
};
/**
 * @function
 * @param  {clay.Matrix3} out
 * @param  {clay.Matrix3} a
 * @param  {clay.Matrix3} b
 * @return {clay.Matrix3}
 */ Matrix3.multiply = Matrix3.mul;
/**
 * @param  {clay.Matrix3}  out
 * @param  {clay.Matrix2d} a
 * @return {clay.Matrix3}
 */ Matrix3.fromMat2d = function(out, a) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].fromMat2d(out.array, a.array);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Matrix3} out
 * @param  {clay.Matrix4} a
 * @return {clay.Matrix3}
 */ Matrix3.fromMat4 = function(out, a) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].fromMat4(out.array, a.array);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Matrix3}    out
 * @param  {clay.Quaternion} a
 * @return {clay.Matrix3}
 */ Matrix3.fromQuat = function(out, q) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].fromQuat(out.array, q.array);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Matrix3} out
 * @param  {clay.Matrix4} a
 * @return {clay.Matrix3}
 */ Matrix3.normalFromMat4 = function(out, a) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].normalFromMat4(out.array, a.array);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Matrix3} out
 * @param  {clay.Matrix3} a
 * @param  {number}  rad
 * @return {clay.Matrix3}
 */ Matrix3.rotate = function(out, a, rad) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].rotate(out.array, a.array, rad);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Matrix3} out
 * @param  {clay.Matrix3} a
 * @param  {clay.Vector2} v
 * @return {clay.Matrix3}
 */ Matrix3.scale = function(out, a, v) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].scale(out.array, a.array, v.array);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Matrix3} out
 * @param  {clay.Matrix3} a
 * @return {clay.Matrix3}
 */ Matrix3.transpose = function(out, a) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].transpose(out.array, a.array);
    out._dirty = true;
    return out;
};
/**
 * @param  {clay.Matrix3} out
 * @param  {clay.Matrix3} a
 * @param  {clay.Vector2} v
 * @return {clay.Matrix3}
 */ Matrix3.translate = function(out, a, v) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].translate(out.array, a.array, v.array);
    out._dirty = true;
    return out;
};
const __TURBOPACK__default__export__ = Matrix3;
}}),
"[project]/node_modules/claygl/src/shader/source/util.glsl.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
const __TURBOPACK__default__export__ = "\n@export clay.util.rand\nhighp float rand(vec2 uv) {\n const highp float a = 12.9898, b = 78.233, c = 43758.5453;\n highp float dt = dot(uv.xy, vec2(a,b)), sn = mod(dt, 3.141592653589793);\n return fract(sin(sn) * c);\n}\n@end\n@export clay.util.calculate_attenuation\nuniform float attenuationFactor : 5.0;\nfloat lightAttenuation(float dist, float range)\n{\n float attenuation = 1.0;\n attenuation = dist*dist/(range*range+1.0);\n float att_s = attenuationFactor;\n attenuation = 1.0/(attenuation*att_s+1.0);\n att_s = 1.0/(att_s+1.0);\n attenuation = attenuation - att_s;\n attenuation /= 1.0 - att_s;\n return clamp(attenuation, 0.0, 1.0);\n}\n@end\n@export clay.util.edge_factor\n#ifdef SUPPORT_STANDARD_DERIVATIVES\nfloat edgeFactor(float width)\n{\n vec3 d = fwidth(v_Barycentric);\n vec3 a3 = smoothstep(vec3(0.0), d * width, v_Barycentric);\n return min(min(a3.x, a3.y), a3.z);\n}\n#else\nfloat edgeFactor(float width)\n{\n return 1.0;\n}\n#endif\n@end\n@export clay.util.encode_float\nvec4 encodeFloat(const in float depth)\n{\n const vec4 bitShifts = vec4(256.0*256.0*256.0, 256.0*256.0, 256.0, 1.0);\n const vec4 bit_mask = vec4(0.0, 1.0/256.0, 1.0/256.0, 1.0/256.0);\n vec4 res = fract(depth * bitShifts);\n res -= res.xxyz * bit_mask;\n return res;\n}\n@end\n@export clay.util.decode_float\nfloat decodeFloat(const in vec4 color)\n{\n const vec4 bitShifts = vec4(1.0/(256.0*256.0*256.0), 1.0/(256.0*256.0), 1.0/256.0, 1.0);\n return dot(color, bitShifts);\n}\n@end\n@export clay.util.float\n@import clay.util.encode_float\n@import clay.util.decode_float\n@end\n@export clay.util.rgbm_decode\nvec3 RGBMDecode(vec4 rgbm, float range) {\n return range * rgbm.rgb * rgbm.a;\n}\n@end\n@export clay.util.rgbm_encode\nvec4 RGBMEncode(vec3 color, float range) {\n if (dot(color, color) == 0.0) {\n return vec4(0.0);\n }\n vec4 rgbm;\n color /= range;\n rgbm.a = clamp(max(max(color.r, color.g), max(color.b, 1e-6)), 0.0, 1.0);\n rgbm.a = ceil(rgbm.a * 255.0) / 255.0;\n rgbm.rgb = color / rgbm.a;\n return rgbm;\n}\n@end\n@export clay.util.rgbm\n@import clay.util.rgbm_decode\n@import clay.util.rgbm_encode\nvec4 decodeHDR(vec4 color)\n{\n#if defined(RGBM_DECODE) || defined(RGBM)\n return vec4(RGBMDecode(color, 8.12), 1.0);\n#else\n return color;\n#endif\n}\nvec4 encodeHDR(vec4 color)\n{\n#if defined(RGBM_ENCODE) || defined(RGBM)\n return RGBMEncode(color.xyz, 8.12);\n#else\n return color;\n#endif\n}\n@end\n@export clay.util.srgb\nvec4 sRGBToLinear(in vec4 value) {\n return vec4(mix(pow(value.rgb * 0.9478672986 + vec3(0.0521327014), vec3(2.4)), value.rgb * 0.0773993808, vec3(lessThanEqual(value.rgb, vec3(0.04045)))), value.w);\n}\nvec4 linearTosRGB(in vec4 value) {\n return vec4(mix(pow(value.rgb, vec3(0.41666)) * 1.055 - vec3(0.055), value.rgb * 12.92, vec3(lessThanEqual(value.rgb, vec3(0.0031308)))), value.w);\n}\n@end\n@export clay.chunk.skinning_header\n#ifdef SKINNING\nattribute vec3 weight : WEIGHT;\nattribute vec4 joint : JOINT;\n#ifdef USE_SKIN_MATRICES_TEXTURE\nuniform sampler2D skinMatricesTexture : ignore;\nuniform float skinMatricesTextureSize: ignore;\nmat4 getSkinMatrix(sampler2D tex, float idx) {\n float j = idx * 4.0;\n float x = mod(j, skinMatricesTextureSize);\n float y = floor(j / skinMatricesTextureSize) + 0.5;\n vec2 scale = vec2(skinMatricesTextureSize);\n return mat4(\n texture2D(tex, vec2(x + 0.5, y) / scale),\n texture2D(tex, vec2(x + 1.5, y) / scale),\n texture2D(tex, vec2(x + 2.5, y) / scale),\n texture2D(tex, vec2(x + 3.5, y) / scale)\n );\n}\nmat4 getSkinMatrix(float idx) {\n return getSkinMatrix(skinMatricesTexture, idx);\n}\n#else\nuniform mat4 skinMatrix[JOINT_COUNT] : SKIN_MATRIX;\nmat4 getSkinMatrix(float idx) {\n return skinMatrix[int(idx)];\n}\n#endif\n#endif\n@end\n@export clay.chunk.skin_matrix\nmat4 skinMatrixWS = getSkinMatrix(joint.x) * weight.x;\nif (weight.y > 1e-4)\n{\n skinMatrixWS += getSkinMatrix(joint.y) * weight.y;\n}\nif (weight.z > 1e-4)\n{\n skinMatrixWS += getSkinMatrix(joint.z) * weight.z;\n}\nfloat weightW = 1.0-weight.x-weight.y-weight.z;\nif (weightW > 1e-4)\n{\n skinMatrixWS += getSkinMatrix(joint.w) * weightW;\n}\n@end\n@export clay.chunk.instancing_header\n#ifdef INSTANCING\nattribute vec4 instanceMat1;\nattribute vec4 instanceMat2;\nattribute vec4 instanceMat3;\n#endif\n@end\n@export clay.chunk.instancing_matrix\nmat4 instanceMat = mat4(\n vec4(instanceMat1.xyz, 0.0),\n vec4(instanceMat2.xyz, 0.0),\n vec4(instanceMat3.xyz, 0.0),\n vec4(instanceMat1.w, instanceMat2.w, instanceMat3.w, 1.0)\n);\n@end\n@export clay.util.parallax_correct\nvec3 parallaxCorrect(in vec3 dir, in vec3 pos, in vec3 boxMin, in vec3 boxMax) {\n vec3 first = (boxMax - pos) / dir;\n vec3 second = (boxMin - pos) / dir;\n vec3 further = max(first, second);\n float dist = min(further.x, min(further.y, further.z));\n vec3 fixedPos = pos + dir * dist;\n vec3 boxCenter = (boxMax + boxMin) * 0.5;\n return normalize(fixedPos - boxCenter);\n}\n@end\n@export clay.util.clamp_sample\nvec4 clampSample(const in sampler2D texture, const in vec2 coord)\n{\n#ifdef STEREO\n float eye = step(0.5, coord.x) * 0.5;\n vec2 coordClamped = clamp(coord, vec2(eye, 0.0), vec2(0.5 + eye, 1.0));\n#else\n vec2 coordClamped = clamp(coord, vec2(0.0), vec2(1.0));\n#endif\n return texture2D(texture, coordClamped);\n}\n@end\n@export clay.util.ACES\nvec3 ACESToneMapping(vec3 color)\n{\n const float A = 2.51;\n const float B = 0.03;\n const float C = 2.43;\n const float D = 0.59;\n const float E = 0.14;\n return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\n@end";
}}),
"[project]/node_modules/claygl/src/glmatrix/index.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * @fileoverview gl-matrix - High performance matrix and vector operations
 * @author Brandon Jones
 * @author Colin MacKenzie IV
 * @version 2.2.2
 */ /* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
  * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */ __turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/glmatrix/vec2.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/glmatrix/vec3.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/glmatrix/vec4.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/glmatrix/mat2.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat2d$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/glmatrix/mat2d.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/glmatrix/mat3.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/glmatrix/mat4.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$quat$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/glmatrix/quat.js [app-client] (ecmascript)");
;
;
;
;
;
;
;
;
const __TURBOPACK__default__export__ = {
    vec2: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"],
    vec3: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"],
    vec4: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$vec4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"],
    mat2: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"],
    mat2d: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat2d$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"],
    mat3: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"],
    mat4: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"],
    quat: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$quat$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]
};
}}),
"[project]/node_modules/claygl/src/dep/glmatrix.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// DEPRECATED
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/glmatrix/index.js [app-client] (ecmascript)");
;
const __TURBOPACK__default__export__ = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"];
}}),
"[project]/node_modules/claygl/src/compositor/TexturePool.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Texture2D$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/Texture2D.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/core/glenum.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$util$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/core/util.js [app-client] (ecmascript)");
;
;
;
var TexturePool = function() {
    this._pool = {};
    this._allocatedTextures = [];
};
TexturePool.prototype = {
    constructor: TexturePool,
    get: function(parameters) {
        var key = generateKey(parameters);
        if (!this._pool.hasOwnProperty(key)) {
            this._pool[key] = [];
        }
        var list = this._pool[key];
        if (!list.length) {
            var texture = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Texture2D$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](parameters);
            this._allocatedTextures.push(texture);
            return texture;
        }
        return list.pop();
    },
    put: function(texture) {
        var key = generateKey(texture);
        if (!this._pool.hasOwnProperty(key)) {
            this._pool[key] = [];
        }
        var list = this._pool[key];
        list.push(texture);
    },
    clear: function(renderer) {
        for(var i = 0; i < this._allocatedTextures.length; i++){
            this._allocatedTextures[i].dispose(renderer);
        }
        this._pool = {};
        this._allocatedTextures = [];
    }
};
var defaultParams = {
    width: 512,
    height: 512,
    type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].UNSIGNED_BYTE,
    format: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].RGBA,
    wrapS: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].CLAMP_TO_EDGE,
    wrapT: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].CLAMP_TO_EDGE,
    minFilter: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].LINEAR_MIPMAP_LINEAR,
    magFilter: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].LINEAR,
    useMipmap: true,
    anisotropic: 1,
    flipY: true,
    unpackAlignment: 4,
    premultiplyAlpha: false
};
var defaultParamPropList = Object.keys(defaultParams);
function generateKey(parameters) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$util$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].defaultsWithPropList(parameters, defaultParams, defaultParamPropList);
    fallBack(parameters);
    var key = '';
    for(var i = 0; i < defaultParamPropList.length; i++){
        var name = defaultParamPropList[i];
        var chunk = parameters[name].toString();
        key += chunk;
    }
    return key;
}
function fallBack(target) {
    var IPOT = isPowerOfTwo(target.width, target.height);
    if (target.format === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].DEPTH_COMPONENT) {
        target.useMipmap = false;
    }
    if (!IPOT || !target.useMipmap) {
        if (target.minFilter == __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].NEAREST_MIPMAP_NEAREST || target.minFilter == __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].NEAREST_MIPMAP_LINEAR) {
            target.minFilter = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].NEAREST;
        } else if (target.minFilter == __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].LINEAR_MIPMAP_LINEAR || target.minFilter == __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].LINEAR_MIPMAP_NEAREST) {
            target.minFilter = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].LINEAR;
        }
    }
    if (!IPOT) {
        target.wrapS = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].CLAMP_TO_EDGE;
        target.wrapT = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].CLAMP_TO_EDGE;
    }
}
function isPowerOfTwo(width, height) {
    return (width & width - 1) === 0 && (height & height - 1) === 0;
}
const __TURBOPACK__default__export__ = TexturePool;
}}),
"[project]/node_modules/claygl/src/shader/source/shadowmap.glsl.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
const __TURBOPACK__default__export__ = "@export clay.sm.depth.vertex\nuniform mat4 worldViewProjection : WORLDVIEWPROJECTION;\nattribute vec3 position : POSITION;\nattribute vec2 texcoord : TEXCOORD_0;\nuniform vec2 uvRepeat = vec2(1.0, 1.0);\nuniform vec2 uvOffset = vec2(0.0, 0.0);\n@import clay.chunk.skinning_header\n@import clay.chunk.instancing_header\nvarying vec4 v_ViewPosition;\nvarying vec2 v_Texcoord;\nvoid main(){\n vec4 P = vec4(position, 1.0);\n#ifdef SKINNING\n @import clay.chunk.skin_matrix\n P = skinMatrixWS * P;\n#endif\n#ifdef INSTANCING\n @import clay.chunk.instancing_matrix\n P = instanceMat * P;\n#endif\n v_ViewPosition = worldViewProjection * P;\n gl_Position = v_ViewPosition;\n v_Texcoord = texcoord * uvRepeat + uvOffset;\n}\n@end\n@export clay.sm.depth.fragment\nvarying vec4 v_ViewPosition;\nvarying vec2 v_Texcoord;\nuniform float bias : 0.001;\nuniform float slopeScale : 1.0;\nuniform sampler2D alphaMap;\nuniform float alphaCutoff: 0.0;\n@import clay.util.encode_float\nvoid main(){\n float depth = v_ViewPosition.z / v_ViewPosition.w;\n if (alphaCutoff > 0.0) {\n if (texture2D(alphaMap, v_Texcoord).a <= alphaCutoff) {\n discard;\n }\n }\n#ifdef USE_VSM\n depth = depth * 0.5 + 0.5;\n float moment1 = depth;\n float moment2 = depth * depth;\n #ifdef SUPPORT_STANDARD_DERIVATIVES\n float dx = dFdx(depth);\n float dy = dFdy(depth);\n moment2 += 0.25*(dx*dx+dy*dy);\n #endif\n gl_FragColor = vec4(moment1, moment2, 0.0, 1.0);\n#else\n #ifdef SUPPORT_STANDARD_DERIVATIVES\n float dx = dFdx(depth);\n float dy = dFdy(depth);\n depth += sqrt(dx*dx + dy*dy) * slopeScale + bias;\n #else\n depth += bias;\n #endif\n gl_FragColor = encodeFloat(depth * 0.5 + 0.5);\n#endif\n}\n@end\n@export clay.sm.debug_depth\nuniform sampler2D depthMap;\nvarying vec2 v_Texcoord;\n@import clay.util.decode_float\nvoid main() {\n vec4 tex = texture2D(depthMap, v_Texcoord);\n#ifdef USE_VSM\n gl_FragColor = vec4(tex.rgb, 1.0);\n#else\n float depth = decodeFloat(tex);\n gl_FragColor = vec4(depth, depth, depth, 1.0);\n#endif\n}\n@end\n@export clay.sm.distance.vertex\nuniform mat4 worldViewProjection : WORLDVIEWPROJECTION;\nuniform mat4 world : WORLD;\nattribute vec3 position : POSITION;\n@import clay.chunk.skinning_header\nvarying vec3 v_WorldPosition;\nvoid main (){\n vec4 P = vec4(position, 1.0);\n#ifdef SKINNING\n @import clay.chunk.skin_matrix\n P = skinMatrixWS * P;\n#endif\n#ifdef INSTANCING\n @import clay.chunk.instancing_matrix\n P = instanceMat * P;\n#endif\n gl_Position = worldViewProjection * P;\n v_WorldPosition = (world * P).xyz;\n}\n@end\n@export clay.sm.distance.fragment\nuniform vec3 lightPosition;\nuniform float range : 100;\nvarying vec3 v_WorldPosition;\n@import clay.util.encode_float\nvoid main(){\n float dist = distance(lightPosition, v_WorldPosition);\n#ifdef USE_VSM\n gl_FragColor = vec4(dist, dist * dist, 0.0, 0.0);\n#else\n dist = dist / range;\n gl_FragColor = encodeFloat(dist);\n#endif\n}\n@end\n@export clay.plugin.shadow_map_common\n@import clay.util.decode_float\nfloat tapShadowMap(sampler2D map, vec2 uv, float z){\n vec4 tex = texture2D(map, uv);\n return step(z, decodeFloat(tex) * 2.0 - 1.0);\n}\nfloat pcf(sampler2D map, vec2 uv, float z, float textureSize, vec2 scale) {\n float shadowContrib = tapShadowMap(map, uv, z);\n vec2 offset = vec2(1.0 / textureSize) * scale;\n#ifdef PCF_KERNEL_SIZE\n for (int _idx_ = 0; _idx_ < PCF_KERNEL_SIZE; _idx_++) {{\n shadowContrib += tapShadowMap(map, uv + offset * pcfKernel[_idx_], z);\n }}\n return shadowContrib / float(PCF_KERNEL_SIZE + 1);\n#else\n shadowContrib += tapShadowMap(map, uv+vec2(offset.x, 0.0), z);\n shadowContrib += tapShadowMap(map, uv+vec2(offset.x, offset.y), z);\n shadowContrib += tapShadowMap(map, uv+vec2(-offset.x, offset.y), z);\n shadowContrib += tapShadowMap(map, uv+vec2(0.0, offset.y), z);\n shadowContrib += tapShadowMap(map, uv+vec2(-offset.x, 0.0), z);\n shadowContrib += tapShadowMap(map, uv+vec2(-offset.x, -offset.y), z);\n shadowContrib += tapShadowMap(map, uv+vec2(offset.x, -offset.y), z);\n shadowContrib += tapShadowMap(map, uv+vec2(0.0, -offset.y), z);\n return shadowContrib / 9.0;\n#endif\n}\nfloat pcf(sampler2D map, vec2 uv, float z, float textureSize) {\n return pcf(map, uv, z, textureSize, vec2(1.0));\n}\nfloat chebyshevUpperBound(vec2 moments, float z){\n float p = 0.0;\n z = z * 0.5 + 0.5;\n if (z <= moments.x) {\n p = 1.0;\n }\n float variance = moments.y - moments.x * moments.x;\n variance = max(variance, 0.0000001);\n float mD = moments.x - z;\n float pMax = variance / (variance + mD * mD);\n pMax = clamp((pMax-0.4)/(1.0-0.4), 0.0, 1.0);\n return max(p, pMax);\n}\nfloat computeShadowContrib(\n sampler2D map, mat4 lightVPM, vec3 position, float textureSize, vec2 scale, vec2 offset\n) {\n vec4 posInLightSpace = lightVPM * vec4(position, 1.0);\n posInLightSpace.xyz /= posInLightSpace.w;\n float z = posInLightSpace.z;\n if(all(greaterThan(posInLightSpace.xyz, vec3(-0.99, -0.99, -1.0))) &&\n all(lessThan(posInLightSpace.xyz, vec3(0.99, 0.99, 1.0)))){\n vec2 uv = (posInLightSpace.xy+1.0) / 2.0;\n #ifdef USE_VSM\n vec2 moments = texture2D(map, uv * scale + offset).xy;\n return chebyshevUpperBound(moments, z);\n #else\n return pcf(map, uv * scale + offset, z, textureSize, scale);\n #endif\n }\n return 1.0;\n}\nfloat computeShadowContrib(sampler2D map, mat4 lightVPM, vec3 position, float textureSize) {\n return computeShadowContrib(map, lightVPM, position, textureSize, vec2(1.0), vec2(0.0));\n}\nfloat computeShadowContribOmni(samplerCube map, vec3 direction, float range)\n{\n float dist = length(direction);\n vec4 shadowTex = textureCube(map, direction);\n#ifdef USE_VSM\n vec2 moments = shadowTex.xy;\n float variance = moments.y - moments.x * moments.x;\n float mD = moments.x - dist;\n float p = variance / (variance + mD * mD);\n if(moments.x + 0.001 < dist){\n return clamp(p, 0.0, 1.0);\n }else{\n return 1.0;\n }\n#else\n return step(dist, (decodeFloat(shadowTex) + 0.0002) * range);\n#endif\n}\n@end\n@export clay.plugin.compute_shadow_map\n#if defined(SPOT_LIGHT_SHADOWMAP_COUNT) || defined(DIRECTIONAL_LIGHT_SHADOWMAP_COUNT) || defined(POINT_LIGHT_SHADOWMAP_COUNT)\n#ifdef SPOT_LIGHT_SHADOWMAP_COUNT\nuniform sampler2D spotLightShadowMaps[SPOT_LIGHT_SHADOWMAP_COUNT]:unconfigurable;\nuniform mat4 spotLightMatrices[SPOT_LIGHT_SHADOWMAP_COUNT]:unconfigurable;\nuniform float spotLightShadowMapSizes[SPOT_LIGHT_SHADOWMAP_COUNT]:unconfigurable;\n#endif\n#ifdef DIRECTIONAL_LIGHT_SHADOWMAP_COUNT\n#if defined(SHADOW_CASCADE)\nuniform sampler2D directionalLightShadowMaps[1]:unconfigurable;\nuniform mat4 directionalLightMatrices[SHADOW_CASCADE]:unconfigurable;\nuniform float directionalLightShadowMapSizes[1]:unconfigurable;\nuniform float shadowCascadeClipsNear[SHADOW_CASCADE]:unconfigurable;\nuniform float shadowCascadeClipsFar[SHADOW_CASCADE]:unconfigurable;\n#else\nuniform sampler2D directionalLightShadowMaps[DIRECTIONAL_LIGHT_SHADOWMAP_COUNT]:unconfigurable;\nuniform mat4 directionalLightMatrices[DIRECTIONAL_LIGHT_SHADOWMAP_COUNT]:unconfigurable;\nuniform float directionalLightShadowMapSizes[DIRECTIONAL_LIGHT_SHADOWMAP_COUNT]:unconfigurable;\n#endif\n#endif\n#ifdef POINT_LIGHT_SHADOWMAP_COUNT\nuniform samplerCube pointLightShadowMaps[POINT_LIGHT_SHADOWMAP_COUNT]:unconfigurable;\n#endif\nuniform bool shadowEnabled : true;\n#ifdef PCF_KERNEL_SIZE\nuniform vec2 pcfKernel[PCF_KERNEL_SIZE];\n#endif\n@import clay.plugin.shadow_map_common\n#if defined(SPOT_LIGHT_SHADOWMAP_COUNT)\nvoid computeShadowOfSpotLights(vec3 position, inout float shadowContribs[SPOT_LIGHT_COUNT] ) {\n float shadowContrib;\n for(int _idx_ = 0; _idx_ < SPOT_LIGHT_SHADOWMAP_COUNT; _idx_++) {{\n shadowContrib = computeShadowContrib(\n spotLightShadowMaps[_idx_], spotLightMatrices[_idx_], position,\n spotLightShadowMapSizes[_idx_]\n );\n shadowContribs[_idx_] = shadowContrib;\n }}\n for(int _idx_ = SPOT_LIGHT_SHADOWMAP_COUNT; _idx_ < SPOT_LIGHT_COUNT; _idx_++){{\n shadowContribs[_idx_] = 1.0;\n }}\n}\n#endif\n#if defined(DIRECTIONAL_LIGHT_SHADOWMAP_COUNT)\n#ifdef SHADOW_CASCADE\nvoid computeShadowOfDirectionalLights(vec3 position, inout float shadowContribs[DIRECTIONAL_LIGHT_COUNT]){\n float depth = (2.0 * gl_FragCoord.z - gl_DepthRange.near - gl_DepthRange.far)\n / (gl_DepthRange.far - gl_DepthRange.near);\n float shadowContrib;\n shadowContribs[0] = 1.0;\n for (int _idx_ = 0; _idx_ < SHADOW_CASCADE; _idx_++) {{\n if (\n depth >= shadowCascadeClipsNear[_idx_] &&\n depth <= shadowCascadeClipsFar[_idx_]\n ) {\n shadowContrib = computeShadowContrib(\n directionalLightShadowMaps[0], directionalLightMatrices[_idx_], position,\n directionalLightShadowMapSizes[0],\n vec2(1.0 / float(SHADOW_CASCADE), 1.0),\n vec2(float(_idx_) / float(SHADOW_CASCADE), 0.0)\n );\n shadowContribs[0] = shadowContrib;\n }\n }}\n for(int _idx_ = DIRECTIONAL_LIGHT_SHADOWMAP_COUNT; _idx_ < DIRECTIONAL_LIGHT_COUNT; _idx_++) {{\n shadowContribs[_idx_] = 1.0;\n }}\n}\n#else\nvoid computeShadowOfDirectionalLights(vec3 position, inout float shadowContribs[DIRECTIONAL_LIGHT_COUNT]){\n float shadowContrib;\n for(int _idx_ = 0; _idx_ < DIRECTIONAL_LIGHT_SHADOWMAP_COUNT; _idx_++) {{\n shadowContrib = computeShadowContrib(\n directionalLightShadowMaps[_idx_], directionalLightMatrices[_idx_], position,\n directionalLightShadowMapSizes[_idx_]\n );\n shadowContribs[_idx_] = shadowContrib;\n }}\n for(int _idx_ = DIRECTIONAL_LIGHT_SHADOWMAP_COUNT; _idx_ < DIRECTIONAL_LIGHT_COUNT; _idx_++) {{\n shadowContribs[_idx_] = 1.0;\n }}\n}\n#endif\n#endif\n#if defined(POINT_LIGHT_SHADOWMAP_COUNT)\nvoid computeShadowOfPointLights(vec3 position, inout float shadowContribs[POINT_LIGHT_COUNT] ){\n vec3 lightPosition;\n vec3 direction;\n for(int _idx_ = 0; _idx_ < POINT_LIGHT_SHADOWMAP_COUNT; _idx_++) {{\n lightPosition = pointLightPosition[_idx_];\n direction = position - lightPosition;\n shadowContribs[_idx_] = computeShadowContribOmni(pointLightShadowMaps[_idx_], direction, pointLightRange[_idx_]);\n }}\n for(int _idx_ = POINT_LIGHT_SHADOWMAP_COUNT; _idx_ < POINT_LIGHT_COUNT; _idx_++) {{\n shadowContribs[_idx_] = 1.0;\n }}\n}\n#endif\n#endif\n@end";
}}),
"[project]/node_modules/claygl/src/prePass/ShadowMap.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$Base$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/core/Base.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/core/glenum.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/math/Vector3.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$BoundingBox$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/math/BoundingBox.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Frustum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/math/Frustum.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Matrix4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/math/Matrix4.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Renderer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/Renderer.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Shader$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/Shader.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Material$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/Material.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$FrameBuffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/FrameBuffer.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Texture$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/Texture.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Texture2D$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/Texture2D.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$TextureCube$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/TextureCube.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$camera$2f$Perspective$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/camera/Perspective.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$camera$2f$Orthographic$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/camera/Orthographic.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$compositor$2f$Pass$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/compositor/Pass.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$compositor$2f$TexturePool$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/compositor/TexturePool.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/glmatrix/mat4.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$shader$2f$source$2f$shadowmap$2e$glsl$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/shader/source/shadowmap.glsl.js [app-client] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
var targets = [
    'px',
    'nx',
    'py',
    'ny',
    'pz',
    'nz'
];
;
__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Shader$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]['import'](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$shader$2f$source$2f$shadowmap$2e$glsl$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]);
function getDepthMaterialUniform(renderable, depthMaterial, symbol) {
    if (symbol === 'alphaMap') {
        return renderable.material.get('diffuseMap');
    } else if (symbol === 'alphaCutoff') {
        if (renderable.material.isDefined('fragment', 'ALPHA_TEST') && renderable.material.get('diffuseMap')) {
            var alphaCutoff = renderable.material.get('alphaCutoff');
            return alphaCutoff || 0;
        }
        return 0;
    } else if (symbol === 'uvRepeat') {
        return renderable.material.get('uvRepeat');
    } else if (symbol === 'uvOffset') {
        return renderable.material.get('uvOffset');
    } else {
        return depthMaterial.get(symbol);
    }
}
function isDepthMaterialChanged(renderable, prevRenderable) {
    var matA = renderable.material;
    var matB = prevRenderable.material;
    return matA.get('diffuseMap') !== matB.get('diffuseMap') || (matA.get('alphaCutoff') || 0) !== (matB.get('alphaCutoff') || 0);
}
/**
 * Pass rendering shadow map.
 *
 * @constructor clay.prePass.ShadowMap
 * @extends clay.core.Base
 * @example
 *     var shadowMapPass = new clay.prePass.ShadowMap({
 *         softShadow: clay.prePass.ShadowMap.VSM
 *     });
 *     ...
 *     animation.on('frame', function (frameTime) {
 *         shadowMapPass.render(renderer, scene, camera);
 *         renderer.render(scene, camera);
 *     });
 */ var ShadowMapPass = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$Base$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].extend(function() {
    return /** @lends clay.prePass.ShadowMap# */ {
        /**
         * Soft shadow technique.
         * Can be {@link clay.prePass.ShadowMap.PCF} or {@link clay.prePass.ShadowMap.VSM}
         * @type {number}
         */ softShadow: ShadowMapPass.PCF,
        /**
         * Soft shadow blur size
         * @type {number}
         */ shadowBlur: 1.0,
        lightFrustumBias: 'auto',
        kernelPCF: new Float32Array([
            1,
            0,
            1,
            1,
            -1,
            1,
            0,
            1,
            -1,
            0,
            -1,
            -1,
            1,
            -1,
            0,
            -1
        ]),
        precision: 'highp',
        _lastRenderNotCastShadow: false,
        _frameBuffer: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$FrameBuffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](),
        _textures: {},
        _shadowMapNumber: {
            'POINT_LIGHT': 0,
            'DIRECTIONAL_LIGHT': 0,
            'SPOT_LIGHT': 0
        },
        _depthMaterials: {},
        _distanceMaterials: {},
        _receivers: [],
        _lightsCastShadow: [],
        _lightCameras: {},
        _lightMaterials: {},
        _texturePool: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$compositor$2f$TexturePool$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]()
    };
}, function() {
    // Gaussian filter pass for VSM
    this._gaussianPassH = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$compositor$2f$Pass$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]({
        fragment: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Shader$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].source('clay.compositor.gaussian_blur')
    });
    this._gaussianPassV = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$compositor$2f$Pass$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]({
        fragment: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Shader$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].source('clay.compositor.gaussian_blur')
    });
    this._gaussianPassH.setUniform('blurSize', this.shadowBlur);
    this._gaussianPassH.setUniform('blurDir', 0.0);
    this._gaussianPassV.setUniform('blurSize', this.shadowBlur);
    this._gaussianPassV.setUniform('blurDir', 1.0);
    this._outputDepthPass = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$compositor$2f$Pass$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]({
        fragment: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Shader$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].source('clay.sm.debug_depth')
    });
}, {
    /**
     * Render scene to shadow textures
     * @param  {clay.Renderer} renderer
     * @param  {clay.Scene} scene
     * @param  {clay.Camera} sceneCamera
     * @param  {boolean} [notUpdateScene=false]
     * @memberOf clay.prePass.ShadowMap.prototype
     */ render: function(renderer, scene, sceneCamera, notUpdateScene) {
        if (!sceneCamera) {
            sceneCamera = scene.getMainCamera();
        }
        this.trigger('beforerender', this, renderer, scene, sceneCamera);
        this._renderShadowPass(renderer, scene, sceneCamera, notUpdateScene);
        this.trigger('afterrender', this, renderer, scene, sceneCamera);
    },
    /**
     * Debug rendering of shadow textures
     * @param  {clay.Renderer} renderer
     * @param  {number} size
     * @memberOf clay.prePass.ShadowMap.prototype
     */ renderDebug: function(renderer, size) {
        renderer.saveClear();
        var viewport = renderer.viewport;
        var x = 0, y = 0;
        var width = size || viewport.width / 4;
        var height = width;
        if (this.softShadow === ShadowMapPass.VSM) {
            this._outputDepthPass.material.define('fragment', 'USE_VSM');
        } else {
            this._outputDepthPass.material.undefine('fragment', 'USE_VSM');
        }
        for(var name in this._textures){
            var texture = this._textures[name];
            renderer.setViewport(x, y, width * texture.width / texture.height, height);
            this._outputDepthPass.setUniform('depthMap', texture);
            this._outputDepthPass.render(renderer);
            x += width * texture.width / texture.height;
        }
        renderer.setViewport(viewport);
        renderer.restoreClear();
    },
    _updateReceivers: function(renderer, mesh) {
        if (mesh.receiveShadow) {
            this._receivers.push(mesh);
            mesh.material.set('shadowEnabled', 1);
            mesh.material.set('pcfKernel', this.kernelPCF);
        } else {
            mesh.material.set('shadowEnabled', 0);
        }
        if (this.softShadow === ShadowMapPass.VSM) {
            mesh.material.define('fragment', 'USE_VSM');
            mesh.material.undefine('fragment', 'PCF_KERNEL_SIZE');
        } else {
            mesh.material.undefine('fragment', 'USE_VSM');
            var kernelPCF = this.kernelPCF;
            if (kernelPCF && kernelPCF.length) {
                mesh.material.define('fragment', 'PCF_KERNEL_SIZE', kernelPCF.length / 2);
            } else {
                mesh.material.undefine('fragment', 'PCF_KERNEL_SIZE');
            }
        }
    },
    _update: function(renderer, scene) {
        var self = this;
        scene.traverse(function(renderable) {
            if (renderable.isRenderable()) {
                self._updateReceivers(renderer, renderable);
            }
        });
        for(var i = 0; i < scene.lights.length; i++){
            var light = scene.lights[i];
            if (light.castShadow && !light.invisible) {
                this._lightsCastShadow.push(light);
            }
        }
    },
    _renderShadowPass: function(renderer, scene, sceneCamera, notUpdateScene) {
        // reset
        for(var name in this._shadowMapNumber){
            this._shadowMapNumber[name] = 0;
        }
        this._lightsCastShadow.length = 0;
        this._receivers.length = 0;
        var _gl = renderer.gl;
        if (!notUpdateScene) {
            scene.update();
        }
        if (sceneCamera) {
            sceneCamera.update();
        }
        scene.updateLights();
        this._update(renderer, scene);
        // Needs to update the receivers again if shadows come from 1 to 0.
        if (!this._lightsCastShadow.length && this._lastRenderNotCastShadow) {
            return;
        }
        this._lastRenderNotCastShadow = this._lightsCastShadow === 0;
        _gl.enable(_gl.DEPTH_TEST);
        _gl.depthMask(true);
        _gl.disable(_gl.BLEND);
        // Clear with high-z, so the part not rendered will not been shadowed
        // TODO
        // TODO restore
        _gl.clearColor(1.0, 1.0, 1.0, 1.0);
        // Shadow uniforms
        var spotLightShadowMaps = [];
        var spotLightMatrices = [];
        var directionalLightShadowMaps = [];
        var directionalLightMatrices = [];
        var shadowCascadeClips = [];
        var pointLightShadowMaps = [];
        var dirLightHasCascade;
        // Create textures for shadow map
        for(var i = 0; i < this._lightsCastShadow.length; i++){
            var light = this._lightsCastShadow[i];
            if (light.type === 'DIRECTIONAL_LIGHT') {
                if (dirLightHasCascade) {
                    console.warn('Only one direectional light supported with shadow cascade');
                    continue;
                }
                if (light.shadowCascade > 4) {
                    console.warn('Support at most 4 cascade');
                    continue;
                }
                if (light.shadowCascade > 1) {
                    dirLightHasCascade = light;
                }
                this.renderDirectionalLightShadow(renderer, scene, sceneCamera, light, shadowCascadeClips, directionalLightMatrices, directionalLightShadowMaps);
            } else if (light.type === 'SPOT_LIGHT') {
                this.renderSpotLightShadow(renderer, scene, light, spotLightMatrices, spotLightShadowMaps);
            } else if (light.type === 'POINT_LIGHT') {
                this.renderPointLightShadow(renderer, scene, light, pointLightShadowMaps);
            }
            this._shadowMapNumber[light.type]++;
        }
        for(var lightType in this._shadowMapNumber){
            var number = this._shadowMapNumber[lightType];
            var key = lightType + '_SHADOWMAP_COUNT';
            for(var i = 0; i < this._receivers.length; i++){
                var mesh = this._receivers[i];
                var material = mesh.material;
                if (material.fragmentDefines[key] !== number) {
                    if (number > 0) {
                        material.define('fragment', key, number);
                    } else if (material.isDefined('fragment', key)) {
                        material.undefine('fragment', key);
                    }
                }
            }
        }
        for(var i = 0; i < this._receivers.length; i++){
            var mesh = this._receivers[i];
            var material = mesh.material;
            if (dirLightHasCascade) {
                material.define('fragment', 'SHADOW_CASCADE', dirLightHasCascade.shadowCascade);
            } else {
                material.undefine('fragment', 'SHADOW_CASCADE');
            }
        }
        var shadowUniforms = scene.shadowUniforms;
        function getSize(texture) {
            return texture.height;
        }
        if (directionalLightShadowMaps.length > 0) {
            var directionalLightShadowMapSizes = directionalLightShadowMaps.map(getSize);
            shadowUniforms.directionalLightShadowMaps = {
                value: directionalLightShadowMaps,
                type: 'tv'
            };
            shadowUniforms.directionalLightMatrices = {
                value: directionalLightMatrices,
                type: 'm4v'
            };
            shadowUniforms.directionalLightShadowMapSizes = {
                value: directionalLightShadowMapSizes,
                type: '1fv'
            };
            if (dirLightHasCascade) {
                var shadowCascadeClipsNear = shadowCascadeClips.slice();
                var shadowCascadeClipsFar = shadowCascadeClips.slice();
                shadowCascadeClipsNear.pop();
                shadowCascadeClipsFar.shift();
                // Iterate from far to near
                shadowCascadeClipsNear.reverse();
                shadowCascadeClipsFar.reverse();
                // directionalLightShadowMaps.reverse();
                directionalLightMatrices.reverse();
                shadowUniforms.shadowCascadeClipsNear = {
                    value: shadowCascadeClipsNear,
                    type: '1fv'
                };
                shadowUniforms.shadowCascadeClipsFar = {
                    value: shadowCascadeClipsFar,
                    type: '1fv'
                };
            }
        }
        if (spotLightShadowMaps.length > 0) {
            var spotLightShadowMapSizes = spotLightShadowMaps.map(getSize);
            var shadowUniforms = scene.shadowUniforms;
            shadowUniforms.spotLightShadowMaps = {
                value: spotLightShadowMaps,
                type: 'tv'
            };
            shadowUniforms.spotLightMatrices = {
                value: spotLightMatrices,
                type: 'm4v'
            };
            shadowUniforms.spotLightShadowMapSizes = {
                value: spotLightShadowMapSizes,
                type: '1fv'
            };
        }
        if (pointLightShadowMaps.length > 0) {
            shadowUniforms.pointLightShadowMaps = {
                value: pointLightShadowMaps,
                type: 'tv'
            };
        }
    },
    renderDirectionalLightShadow: function() {
        var splitFrustum = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Frustum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
        var splitProjMatrix = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Matrix4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
        var cropBBox = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$BoundingBox$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
        var cropMatrix = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Matrix4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
        var lightViewMatrix = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Matrix4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
        var lightViewProjMatrix = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Matrix4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
        var lightProjMatrix = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Matrix4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
        return function(renderer, scene, sceneCamera, light, shadowCascadeClips, directionalLightMatrices, directionalLightShadowMaps) {
            var defaultShadowMaterial = this._getDepthMaterial(light);
            var passConfig = {
                getMaterial: function(renderable) {
                    return renderable.shadowDepthMaterial || defaultShadowMaterial;
                },
                isMaterialChanged: isDepthMaterialChanged,
                getUniform: getDepthMaterialUniform,
                ifRender: function(renderable) {
                    return renderable.castShadow;
                },
                sortCompare: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Renderer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].opaqueSortCompare
            };
            // First frame
            if (!scene.viewBoundingBoxLastFrame.isFinite()) {
                var boundingBox = scene.getBoundingBox();
                scene.viewBoundingBoxLastFrame.copy(boundingBox).applyTransform(sceneCamera.viewMatrix);
            }
            // Considering moving speed since the bounding box is from last frame
            // TODO: add a bias
            var clippedFar = Math.min(-scene.viewBoundingBoxLastFrame.min.z, sceneCamera.far);
            var clippedNear = Math.max(-scene.viewBoundingBoxLastFrame.max.z, sceneCamera.near);
            var lightCamera = this._getDirectionalLightCamera(light, scene, sceneCamera);
            var lvpMat4Arr = lightViewProjMatrix.array;
            lightProjMatrix.copy(lightCamera.projectionMatrix);
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].invert(lightViewMatrix.array, lightCamera.worldTransform.array);
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].multiply(lightViewMatrix.array, lightViewMatrix.array, sceneCamera.worldTransform.array);
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].multiply(lvpMat4Arr, lightProjMatrix.array, lightViewMatrix.array);
            var clipPlanes = [];
            var isPerspective = sceneCamera instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$camera$2f$Perspective$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"];
            var scaleZ = (sceneCamera.near + sceneCamera.far) / (sceneCamera.near - sceneCamera.far);
            var offsetZ = 2 * sceneCamera.near * sceneCamera.far / (sceneCamera.near - sceneCamera.far);
            for(var i = 0; i <= light.shadowCascade; i++){
                var clog = clippedNear * Math.pow(clippedFar / clippedNear, i / light.shadowCascade);
                var cuni = clippedNear + (clippedFar - clippedNear) * i / light.shadowCascade;
                var c = clog * light.cascadeSplitLogFactor + cuni * (1 - light.cascadeSplitLogFactor);
                clipPlanes.push(c);
                shadowCascadeClips.push(-(-c * scaleZ + offsetZ) / -c);
            }
            var texture = this._getTexture(light, light.shadowCascade);
            directionalLightShadowMaps.push(texture);
            var viewport = renderer.viewport;
            var _gl = renderer.gl;
            this._frameBuffer.attach(texture);
            this._frameBuffer.bind(renderer);
            _gl.clear(_gl.COLOR_BUFFER_BIT | _gl.DEPTH_BUFFER_BIT);
            for(var i = 0; i < light.shadowCascade; i++){
                // Get the splitted frustum
                var nearPlane = clipPlanes[i];
                var farPlane = clipPlanes[i + 1];
                if (isPerspective) {
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].perspective(splitProjMatrix.array, sceneCamera.fov / 180 * Math.PI, sceneCamera.aspect, nearPlane, farPlane);
                } else {
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].ortho(splitProjMatrix.array, sceneCamera.left, sceneCamera.right, sceneCamera.bottom, sceneCamera.top, nearPlane, farPlane);
                }
                splitFrustum.setFromProjection(splitProjMatrix);
                splitFrustum.getTransformedBoundingBox(cropBBox, lightViewMatrix);
                cropBBox.applyProjection(lightProjMatrix);
                var _min = cropBBox.min.array;
                var _max = cropBBox.max.array;
                _min[0] = Math.max(_min[0], -1);
                _min[1] = Math.max(_min[1], -1);
                _max[0] = Math.min(_max[0], 1);
                _max[1] = Math.min(_max[1], 1);
                cropMatrix.ortho(_min[0], _max[0], _min[1], _max[1], 1, -1);
                lightCamera.projectionMatrix.multiplyLeft(cropMatrix);
                var shadowSize = light.shadowResolution || 512;
                // Reversed, left to right => far to near
                renderer.setViewport((light.shadowCascade - i - 1) * shadowSize, 0, shadowSize, shadowSize, 1);
                var renderList = scene.updateRenderList(lightCamera);
                renderer.renderPass(renderList.opaque, lightCamera, passConfig);
                // Filter for VSM
                if (this.softShadow === ShadowMapPass.VSM) {
                    this._gaussianFilter(renderer, texture, texture.width);
                }
                var matrix = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Matrix4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
                matrix.copy(lightCamera.viewMatrix).multiplyLeft(lightCamera.projectionMatrix);
                directionalLightMatrices.push(matrix.array);
                lightCamera.projectionMatrix.copy(lightProjMatrix);
            }
            this._frameBuffer.unbind(renderer);
            renderer.setViewport(viewport);
        };
    }(),
    renderSpotLightShadow: function(renderer, scene, light, spotLightMatrices, spotLightShadowMaps) {
        var texture = this._getTexture(light);
        var lightCamera = this._getSpotLightCamera(light);
        var _gl = renderer.gl;
        this._frameBuffer.attach(texture);
        this._frameBuffer.bind(renderer);
        _gl.clear(_gl.COLOR_BUFFER_BIT | _gl.DEPTH_BUFFER_BIT);
        var defaultShadowMaterial = this._getDepthMaterial(light);
        var passConfig = {
            getMaterial: function(renderable) {
                return renderable.shadowDepthMaterial || defaultShadowMaterial;
            },
            isMaterialChanged: isDepthMaterialChanged,
            getUniform: getDepthMaterialUniform,
            ifRender: function(renderable) {
                return renderable.castShadow;
            },
            sortCompare: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Renderer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].opaqueSortCompare
        };
        var renderList = scene.updateRenderList(lightCamera);
        renderer.renderPass(renderList.opaque, lightCamera, passConfig);
        this._frameBuffer.unbind(renderer);
        // Filter for VSM
        if (this.softShadow === ShadowMapPass.VSM) {
            this._gaussianFilter(renderer, texture, texture.width);
        }
        var matrix = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Matrix4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
        matrix.copy(lightCamera.worldTransform).invert().multiplyLeft(lightCamera.projectionMatrix);
        spotLightShadowMaps.push(texture);
        spotLightMatrices.push(matrix.array);
    },
    renderPointLightShadow: function(renderer, scene, light, pointLightShadowMaps) {
        var texture = this._getTexture(light);
        var _gl = renderer.gl;
        pointLightShadowMaps.push(texture);
        var defaultShadowMaterial = this._getDepthMaterial(light);
        var passConfig = {
            getMaterial: function(renderable) {
                return renderable.shadowDepthMaterial || defaultShadowMaterial;
            },
            getUniform: getDepthMaterialUniform,
            sortCompare: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Renderer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].opaqueSortCompare
        };
        var renderListEachSide = {
            px: [],
            py: [],
            pz: [],
            nx: [],
            ny: [],
            nz: []
        };
        var bbox = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$BoundingBox$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
        var lightWorldPosition = light.getWorldPosition().array;
        var lightBBox = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$BoundingBox$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
        var range = light.range;
        lightBBox.min.setArray(lightWorldPosition);
        lightBBox.max.setArray(lightWorldPosition);
        var extent = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](range, range, range);
        lightBBox.max.add(extent);
        lightBBox.min.sub(extent);
        var targetsNeedRender = {
            px: false,
            py: false,
            pz: false,
            nx: false,
            ny: false,
            nz: false
        };
        scene.traverse(function(renderable) {
            if (renderable.isRenderable() && renderable.castShadow) {
                var geometry = renderable.geometry;
                if (!geometry.boundingBox) {
                    for(var i = 0; i < targets.length; i++){
                        renderListEachSide[targets[i]].push(renderable);
                    }
                    return;
                }
                bbox.transformFrom(geometry.boundingBox, renderable.worldTransform);
                if (!bbox.intersectBoundingBox(lightBBox)) {
                    return;
                }
                bbox.updateVertices();
                for(var i = 0; i < targets.length; i++){
                    targetsNeedRender[targets[i]] = false;
                }
                for(var i = 0; i < 8; i++){
                    var vtx = bbox.vertices[i];
                    var x = vtx[0] - lightWorldPosition[0];
                    var y = vtx[1] - lightWorldPosition[1];
                    var z = vtx[2] - lightWorldPosition[2];
                    var absx = Math.abs(x);
                    var absy = Math.abs(y);
                    var absz = Math.abs(z);
                    if (absx > absy) {
                        if (absx > absz) {
                            targetsNeedRender[x > 0 ? 'px' : 'nx'] = true;
                        } else {
                            targetsNeedRender[z > 0 ? 'pz' : 'nz'] = true;
                        }
                    } else {
                        if (absy > absz) {
                            targetsNeedRender[y > 0 ? 'py' : 'ny'] = true;
                        } else {
                            targetsNeedRender[z > 0 ? 'pz' : 'nz'] = true;
                        }
                    }
                }
                for(var i = 0; i < targets.length; i++){
                    if (targetsNeedRender[targets[i]]) {
                        renderListEachSide[targets[i]].push(renderable);
                    }
                }
            }
        });
        for(var i = 0; i < 6; i++){
            var target = targets[i];
            var camera = this._getPointLightCamera(light, target);
            this._frameBuffer.attach(texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i);
            this._frameBuffer.bind(renderer);
            _gl.clear(_gl.COLOR_BUFFER_BIT | _gl.DEPTH_BUFFER_BIT);
            renderer.renderPass(renderListEachSide[target], camera, passConfig);
        }
        this._frameBuffer.unbind(renderer);
    },
    _getDepthMaterial: function(light) {
        var shadowMaterial = this._lightMaterials[light.__uid__];
        var isPointLight = light.type === 'POINT_LIGHT';
        if (!shadowMaterial) {
            var shaderPrefix = isPointLight ? 'clay.sm.distance.' : 'clay.sm.depth.';
            shadowMaterial = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Material$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]({
                precision: this.precision,
                shader: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Shader$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Shader$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].source(shaderPrefix + 'vertex'), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Shader$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].source(shaderPrefix + 'fragment'))
            });
            this._lightMaterials[light.__uid__] = shadowMaterial;
        }
        if (light.shadowSlopeScale != null) {
            shadowMaterial.setUniform('slopeScale', light.shadowSlopeScale);
        }
        if (light.shadowBias != null) {
            shadowMaterial.setUniform('bias', light.shadowBias);
        }
        if (this.softShadow === ShadowMapPass.VSM) {
            shadowMaterial.define('fragment', 'USE_VSM');
        } else {
            shadowMaterial.undefine('fragment', 'USE_VSM');
        }
        if (isPointLight) {
            shadowMaterial.set('lightPosition', light.getWorldPosition().array);
            shadowMaterial.set('range', light.range);
        }
        return shadowMaterial;
    },
    _gaussianFilter: function(renderer, texture, size) {
        var parameter = {
            width: size,
            height: size,
            type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Texture$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].FLOAT
        };
        var tmpTexture = this._texturePool.get(parameter);
        this._frameBuffer.attach(tmpTexture);
        this._frameBuffer.bind(renderer);
        this._gaussianPassH.setUniform('texture', texture);
        this._gaussianPassH.setUniform('textureWidth', size);
        this._gaussianPassH.render(renderer);
        this._frameBuffer.attach(texture);
        this._gaussianPassV.setUniform('texture', tmpTexture);
        this._gaussianPassV.setUniform('textureHeight', size);
        this._gaussianPassV.render(renderer);
        this._frameBuffer.unbind(renderer);
        this._texturePool.put(tmpTexture);
    },
    _getTexture: function(light, cascade) {
        var key = light.__uid__;
        var texture = this._textures[key];
        var resolution = light.shadowResolution || 512;
        cascade = cascade || 1;
        if (!texture) {
            if (light.type === 'POINT_LIGHT') {
                texture = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$TextureCube$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
            } else {
                texture = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Texture2D$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
            }
            // At most 4 cascade
            // TODO share with height ?
            texture.width = resolution * cascade;
            texture.height = resolution;
            if (this.softShadow === ShadowMapPass.VSM) {
                texture.type = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Texture$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].FLOAT;
                texture.anisotropic = 4;
            } else {
                texture.minFilter = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].NEAREST;
                texture.magFilter = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].NEAREST;
                texture.useMipmap = false;
            }
            this._textures[key] = texture;
        }
        return texture;
    },
    _getPointLightCamera: function(light, target) {
        if (!this._lightCameras.point) {
            this._lightCameras.point = {
                px: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$camera$2f$Perspective$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](),
                nx: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$camera$2f$Perspective$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](),
                py: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$camera$2f$Perspective$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](),
                ny: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$camera$2f$Perspective$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](),
                pz: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$camera$2f$Perspective$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](),
                nz: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$camera$2f$Perspective$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]()
            };
        }
        var camera = this._lightCameras.point[target];
        camera.far = light.range;
        camera.fov = 90;
        camera.position.set(0, 0, 0);
        switch(target){
            case 'px':
                camera.lookAt(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].POSITIVE_X, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].NEGATIVE_Y);
                break;
            case 'nx':
                camera.lookAt(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].NEGATIVE_X, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].NEGATIVE_Y);
                break;
            case 'py':
                camera.lookAt(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].POSITIVE_Y, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].POSITIVE_Z);
                break;
            case 'ny':
                camera.lookAt(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].NEGATIVE_Y, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].NEGATIVE_Z);
                break;
            case 'pz':
                camera.lookAt(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].POSITIVE_Z, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].NEGATIVE_Y);
                break;
            case 'nz':
                camera.lookAt(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].NEGATIVE_Z, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Vector3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].NEGATIVE_Y);
                break;
        }
        light.getWorldPosition(camera.position);
        camera.update();
        return camera;
    },
    _getDirectionalLightCamera: function() {
        var lightViewMatrix = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Matrix4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
        var sceneViewBoundingBox = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$BoundingBox$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
        var lightViewBBox = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$BoundingBox$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
        // Camera of directional light will be adjusted
        // to contain the view frustum and scene bounding box as tightly as possible
        return function(light, scene, sceneCamera) {
            if (!this._lightCameras.directional) {
                this._lightCameras.directional = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$camera$2f$Orthographic$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
            }
            var camera = this._lightCameras.directional;
            sceneViewBoundingBox.copy(scene.viewBoundingBoxLastFrame);
            sceneViewBoundingBox.intersection(sceneCamera.frustum.boundingBox);
            // Move to the center of frustum(in world space)
            camera.position.copy(sceneViewBoundingBox.min).add(sceneViewBoundingBox.max).scale(0.5).transformMat4(sceneCamera.worldTransform);
            camera.rotation.copy(light.rotation);
            camera.scale.copy(light.scale);
            camera.updateWorldTransform();
            // Transform to light view space
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Matrix4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].invert(lightViewMatrix, camera.worldTransform);
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$math$2f$Matrix4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].multiply(lightViewMatrix, lightViewMatrix, sceneCamera.worldTransform);
            lightViewBBox.copy(sceneViewBoundingBox).applyTransform(lightViewMatrix);
            var min = lightViewBBox.min.array;
            var max = lightViewBBox.max.array;
            // Move camera to adjust the near to 0
            camera.position.set((min[0] + max[0]) / 2, (min[1] + max[1]) / 2, max[2]).transformMat4(camera.worldTransform);
            camera.near = 0;
            camera.far = -min[2] + max[2];
            // Make sure receivers not in the frustum will stil receive the shadow.
            if (isNaN(this.lightFrustumBias)) {
                camera.far *= 4;
            } else {
                camera.far += this.lightFrustumBias;
            }
            camera.left = min[0];
            camera.right = max[0];
            camera.top = max[1];
            camera.bottom = min[1];
            camera.update(true);
            return camera;
        };
    }(),
    _getSpotLightCamera: function(light) {
        if (!this._lightCameras.spot) {
            this._lightCameras.spot = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$camera$2f$Perspective$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
        }
        var camera = this._lightCameras.spot;
        // Update properties
        camera.fov = light.penumbraAngle * 2;
        camera.far = light.range;
        camera.worldTransform.copy(light.worldTransform);
        camera.updateProjectionMatrix();
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$glmatrix$2f$mat4$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].invert(camera.viewMatrix.array, camera.worldTransform.array);
        return camera;
    },
    /**
     * @param  {clay.Renderer|WebGLRenderingContext} [renderer]
     * @memberOf clay.prePass.ShadowMap.prototype
     */ // PENDING Renderer or WebGLRenderingContext
    dispose: function(renderer) {
        var _gl = renderer.gl || renderer;
        if (this._frameBuffer) {
            this._frameBuffer.dispose(_gl);
        }
        for(var name in this._textures){
            this._textures[name].dispose(_gl);
        }
        this._texturePool.clear(renderer.gl);
        this._depthMaterials = {};
        this._distanceMaterials = {};
        this._textures = {};
        this._lightCameras = {};
        this._shadowMapNumber = {
            'POINT_LIGHT': 0,
            'DIRECTIONAL_LIGHT': 0,
            'SPOT_LIGHT': 0
        };
        this._meshMaterials = {};
        for(var i = 0; i < this._receivers.length; i++){
            var mesh = this._receivers[i];
            // Mesh may be disposed
            if (mesh.material) {
                var material = mesh.material;
                material.undefine('fragment', 'POINT_LIGHT_SHADOW_COUNT');
                material.undefine('fragment', 'DIRECTIONAL_LIGHT_SHADOW_COUNT');
                material.undefine('fragment', 'AMBIENT_LIGHT_SHADOW_COUNT');
                material.set('shadowEnabled', 0);
            }
        }
        this._receivers = [];
        this._lightsCastShadow = [];
    }
});
/**
 * @name clay.prePass.ShadowMap.VSM
 * @type {number}
 */ ShadowMapPass.VSM = 1;
/**
 * @name clay.prePass.ShadowMap.PCF
 * @type {number}
 */ ShadowMapPass.PCF = 2;
const __TURBOPACK__default__export__ = ShadowMapPass;
}}),
"[project]/node_modules/claygl/src/compositor/CompositorNode.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$Base$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/core/Base.js [app-client] (ecmascript)");
;
// PENDING
// Use topological sort ?
/**
 * Node of graph based post processing.
 *
 * @constructor clay.compositor.CompositorNode
 * @extends clay.core.Base
 *
 */ var CompositorNode = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$Base$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].extend(function() {
    return /** @lends clay.compositor.CompositorNode# */ {
        /**
         * @type {string}
         */ name: '',
        /**
         * Input links, will be updated by the graph
         * @example:
         *     inputName: {
         *         node: someNode,
         *         pin: 'xxxx'
         *     }
         * @type {Object}
         */ inputLinks: {},
        /**
         * Output links, will be updated by the graph
         * @example:
         *     outputName: {
         *         node: someNode,
         *         pin: 'xxxx'
         *     }
         * @type {Object}
         */ outputLinks: {},
        // Save the output texture of previous frame
        // Will be used when there exist a circular reference
        _prevOutputTextures: {},
        _outputTextures: {},
        // Example: { name: 2 }
        _outputReferences: {},
        _rendering: false,
        // If rendered in this frame
        _rendered: false,
        _compositor: null
    };
}, /** @lends clay.compositor.CompositorNode.prototype */ {
    // TODO Remove parameter function callback
    updateParameter: function(outputName, renderer) {
        var outputInfo = this.outputs[outputName];
        var parameters = outputInfo.parameters;
        var parametersCopy = outputInfo._parametersCopy;
        if (!parametersCopy) {
            parametersCopy = outputInfo._parametersCopy = {};
        }
        if (parameters) {
            for(var key in parameters){
                if (key !== 'width' && key !== 'height') {
                    parametersCopy[key] = parameters[key];
                }
            }
        }
        var width, height;
        if (parameters.width instanceof Function) {
            width = parameters.width.call(this, renderer);
        } else {
            width = parameters.width;
        }
        if (parameters.height instanceof Function) {
            height = parameters.height.call(this, renderer);
        } else {
            height = parameters.height;
        }
        if (parametersCopy.width !== width || parametersCopy.height !== height) {
            if (this._outputTextures[outputName]) {
                this._outputTextures[outputName].dispose(renderer.gl);
            }
        }
        parametersCopy.width = width;
        parametersCopy.height = height;
        return parametersCopy;
    },
    /**
     * Set parameter
     * @param {string} name
     * @param {} value
     */ setParameter: function(name, value) {},
    /**
     * Get parameter value
     * @param  {string} name
     * @return {}
     */ getParameter: function(name) {},
    /**
     * Set parameters
     * @param {Object} obj
     */ setParameters: function(obj) {
        for(var name in obj){
            this.setParameter(name, obj[name]);
        }
    },
    render: function() {},
    getOutput: function(renderer /*optional*/ , name) {
        if (name == null) {
            // Return the output texture without rendering
            name = renderer;
            return this._outputTextures[name];
        }
        var outputInfo = this.outputs[name];
        if (!outputInfo) {
            return;
        }
        // Already been rendered in this frame
        if (this._rendered) {
            // Force return texture in last frame
            if (outputInfo.outputLastFrame) {
                return this._prevOutputTextures[name];
            } else {
                return this._outputTextures[name];
            }
        } else if (// TODO
        this._rendering // Solve Circular Reference
        ) {
            if (!this._prevOutputTextures[name]) {
                // Create a blank texture at first pass
                this._prevOutputTextures[name] = this._compositor.allocateTexture(outputInfo.parameters || {});
            }
            return this._prevOutputTextures[name];
        }
        this.render(renderer);
        return this._outputTextures[name];
    },
    removeReference: function(outputName) {
        this._outputReferences[outputName]--;
        if (this._outputReferences[outputName] === 0) {
            var outputInfo = this.outputs[outputName];
            if (outputInfo.keepLastFrame) {
                if (this._prevOutputTextures[outputName]) {
                    this._compositor.releaseTexture(this._prevOutputTextures[outputName]);
                }
                this._prevOutputTextures[outputName] = this._outputTextures[outputName];
            } else {
                // Output of this node have alreay been used by all other nodes
                // Put the texture back to the pool.
                this._compositor.releaseTexture(this._outputTextures[outputName]);
            }
        }
    },
    link: function(inputPinName, fromNode, fromPinName) {
        // The relationship from output pin to input pin is one-on-multiple
        this.inputLinks[inputPinName] = {
            node: fromNode,
            pin: fromPinName
        };
        if (!fromNode.outputLinks[fromPinName]) {
            fromNode.outputLinks[fromPinName] = [];
        }
        fromNode.outputLinks[fromPinName].push({
            node: this,
            pin: inputPinName
        });
        // Enabled the pin texture in shader
        this.pass.material.enableTexture(inputPinName);
    },
    clear: function() {
        this.inputLinks = {};
        this.outputLinks = {};
    },
    updateReference: function(outputName) {
        if (!this._rendering) {
            this._rendering = true;
            for(var inputName in this.inputLinks){
                var link = this.inputLinks[inputName];
                link.node.updateReference(link.pin);
            }
            this._rendering = false;
        }
        if (outputName) {
            this._outputReferences[outputName]++;
        }
    },
    beforeFrame: function() {
        this._rendered = false;
        for(var name in this.outputLinks){
            this._outputReferences[name] = 0;
        }
    },
    afterFrame: function() {
        // Put back all the textures to pool
        for(var name in this.outputLinks){
            if (this._outputReferences[name] > 0) {
                var outputInfo = this.outputs[name];
                if (outputInfo.keepLastFrame) {
                    if (this._prevOutputTextures[name]) {
                        this._compositor.releaseTexture(this._prevOutputTextures[name]);
                    }
                    this._prevOutputTextures[name] = this._outputTextures[name];
                } else {
                    this._compositor.releaseTexture(this._outputTextures[name]);
                }
            }
        }
    }
});
const __TURBOPACK__default__export__ = CompositorNode;
}}),
"[project]/node_modules/claygl/src/compositor/Graph.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$Base$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/core/Base.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$compositor$2f$CompositorNode$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/compositor/CompositorNode.js [app-client] (ecmascript)");
;
;
/**
 * @constructor clay.compositor.Graph
 * @extends clay.core.Base
 */ var Graph = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$Base$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].extend(function() {
    return /** @lends clay.compositor.Graph# */ {
        /**
         * @type {Array.<clay.compositor.CompositorNode>}
         */ nodes: []
    };
}, /** @lends clay.compositor.Graph.prototype */ {
    /**
     * Mark to update
     */ dirty: function() {
        this._dirty = true;
    },
    /**
     * @param {clay.compositor.CompositorNode} node
     */ addNode: function(node) {
        if (this.nodes.indexOf(node) >= 0) {
            return;
        }
        this.nodes.push(node);
        this._dirty = true;
    },
    /**
     * @param  {clay.compositor.CompositorNode|string} node
     */ removeNode: function(node) {
        if (typeof node === 'string') {
            node = this.getNodeByName(node);
        }
        var idx = this.nodes.indexOf(node);
        if (idx >= 0) {
            this.nodes.splice(idx, 1);
            this._dirty = true;
        }
    },
    /**
     * @param {string} name
     * @return {clay.compositor.CompositorNode}
     */ getNodeByName: function(name) {
        for(var i = 0; i < this.nodes.length; i++){
            if (this.nodes[i].name === name) {
                return this.nodes[i];
            }
        }
    },
    /**
     * Update links of graph
     */ update: function() {
        for(var i = 0; i < this.nodes.length; i++){
            this.nodes[i].clear();
        }
        // Traverse all the nodes and build the graph
        for(var i = 0; i < this.nodes.length; i++){
            var node = this.nodes[i];
            if (!node.inputs) {
                continue;
            }
            for(var inputName in node.inputs){
                if (!node.inputs[inputName]) {
                    continue;
                }
                if (node.pass && !node.pass.material.isUniformEnabled(inputName)) {
                    console.warn('Pin ' + node.name + '.' + inputName + ' not used.');
                    continue;
                }
                var fromPinInfo = node.inputs[inputName];
                var fromPin = this.findPin(fromPinInfo);
                if (fromPin) {
                    node.link(inputName, fromPin.node, fromPin.pin);
                } else {
                    if (typeof fromPinInfo === 'string') {
                        console.warn('Node ' + fromPinInfo + ' not exist');
                    } else {
                        console.warn('Pin of ' + fromPinInfo.node + '.' + fromPinInfo.pin + ' not exist');
                    }
                }
            }
        }
    },
    findPin: function(input) {
        var node;
        // Try to take input as a directly a node
        if (typeof input === 'string' || input instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$compositor$2f$CompositorNode$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]) {
            input = {
                node: input
            };
        }
        if (typeof input.node === 'string') {
            for(var i = 0; i < this.nodes.length; i++){
                var tmp = this.nodes[i];
                if (tmp.name === input.node) {
                    node = tmp;
                }
            }
        } else {
            node = input.node;
        }
        if (node) {
            var inputPin = input.pin;
            if (!inputPin) {
                // Use first pin defaultly
                if (node.outputs) {
                    inputPin = Object.keys(node.outputs)[0];
                }
            }
            if (node.outputs[inputPin]) {
                return {
                    node: node,
                    pin: inputPin
                };
            }
        }
    }
});
const __TURBOPACK__default__export__ = Graph;
}}),
"[project]/node_modules/claygl/src/compositor/Compositor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$compositor$2f$Graph$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/compositor/Graph.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$compositor$2f$TexturePool$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/compositor/TexturePool.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$FrameBuffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/FrameBuffer.js [app-client] (ecmascript)");
;
;
;
/**
 * Compositor provide graph based post processing
 *
 * @constructor clay.compositor.Compositor
 * @extends clay.compositor.Graph
 *
 */ var Compositor = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$compositor$2f$Graph$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].extend(function() {
    return {
        // Output node
        _outputs: [],
        _texturePool: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$compositor$2f$TexturePool$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](),
        _frameBuffer: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$FrameBuffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]({
            depthBuffer: false
        })
    };
}, /** @lends clay.compositor.Compositor.prototype */ {
    addNode: function(node) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$compositor$2f$Graph$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].prototype.addNode.call(this, node);
        node._compositor = this;
    },
    /**
     * @param  {clay.Renderer} renderer
     */ render: function(renderer, frameBuffer) {
        if (this._dirty) {
            this.update();
            this._dirty = false;
            this._outputs.length = 0;
            for(var i = 0; i < this.nodes.length; i++){
                if (!this.nodes[i].outputs) {
                    this._outputs.push(this.nodes[i]);
                }
            }
        }
        for(var i = 0; i < this.nodes.length; i++){
            // Update the reference number of each output texture
            this.nodes[i].beforeFrame();
        }
        for(var i = 0; i < this._outputs.length; i++){
            this._outputs[i].updateReference();
        }
        for(var i = 0; i < this._outputs.length; i++){
            this._outputs[i].render(renderer, frameBuffer);
        }
        for(var i = 0; i < this.nodes.length; i++){
            // Clear up
            this.nodes[i].afterFrame();
        }
    },
    allocateTexture: function(parameters) {
        return this._texturePool.get(parameters);
    },
    releaseTexture: function(parameters) {
        this._texturePool.put(parameters);
    },
    getFrameBuffer: function() {
        return this._frameBuffer;
    },
    /**
     * Dispose compositor
     * @param {clay.Renderer} renderer
     */ dispose: function(renderer) {
        this._texturePool.clear(renderer);
    }
});
const __TURBOPACK__default__export__ = Compositor;
}}),
"[project]/node_modules/claygl/src/compositor/SceneNode.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$compositor$2f$CompositorNode$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/compositor/CompositorNode.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/core/glenum.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$FrameBuffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/FrameBuffer.js [app-client] (ecmascript)");
;
;
;
/**
 * @constructor clay.compositor.SceneNode
 * @extends clay.compositor.CompositorNode
 */ var SceneNode = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$compositor$2f$CompositorNode$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].extend(/** @lends clay.compositor.SceneNode# */ {
    name: 'scene',
    /**
     * @type {clay.Scene}
     */ scene: null,
    /**
     * @type {clay.Camera}
     */ camera: null,
    /**
     * @type {boolean}
     */ autoUpdateScene: true,
    /**
     * @type {boolean}
     */ preZ: false
}, function() {
    this.frameBuffer = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$FrameBuffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
}, {
    render: function(renderer) {
        this._rendering = true;
        var _gl = renderer.gl;
        this.trigger('beforerender');
        var renderInfo;
        if (!this.outputs) {
            renderInfo = renderer.render(this.scene, this.camera, !this.autoUpdateScene, this.preZ);
        } else {
            var frameBuffer = this.frameBuffer;
            for(var name in this.outputs){
                var parameters = this.updateParameter(name, renderer);
                var outputInfo = this.outputs[name];
                var texture = this._compositor.allocateTexture(parameters);
                this._outputTextures[name] = texture;
                var attachment = outputInfo.attachment || _gl.COLOR_ATTACHMENT0;
                if (typeof attachment == 'string') {
                    attachment = _gl[attachment];
                }
                frameBuffer.attach(texture, attachment);
            }
            frameBuffer.bind(renderer);
            // MRT Support in chrome
            // https://www.khronos.org/registry/webgl/sdk/tests/conformance/extensions/ext-draw-buffers.html
            var ext = renderer.getGLExtension('EXT_draw_buffers');
            if (ext) {
                var bufs = [];
                for(var attachment in this.outputs){
                    attachment = parseInt(attachment);
                    if (attachment >= _gl.COLOR_ATTACHMENT0 && attachment <= _gl.COLOR_ATTACHMENT0 + 8) {
                        bufs.push(attachment);
                    }
                }
                ext.drawBuffersEXT(bufs);
            }
            // Always clear
            // PENDING
            renderer.saveClear();
            renderer.clearBit = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].DEPTH_BUFFER_BIT | __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$glenum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].COLOR_BUFFER_BIT;
            renderInfo = renderer.render(this.scene, this.camera, !this.autoUpdateScene, this.preZ);
            renderer.restoreClear();
            frameBuffer.unbind(renderer);
        }
        this.trigger('afterrender', renderInfo);
        this._rendering = false;
        this._rendered = true;
    }
});
const __TURBOPACK__default__export__ = SceneNode;
}}),
"[project]/node_modules/claygl/src/compositor/TextureNode.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$compositor$2f$CompositorNode$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/compositor/CompositorNode.js [app-client] (ecmascript)");
;
/**
 * @constructor clay.compositor.TextureNode
 * @extends clay.compositor.CompositorNode
 */ var TextureNode = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$compositor$2f$CompositorNode$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].extend(function() {
    return /** @lends clay.compositor.TextureNode# */ {
        /**
         * @type {clay.Texture2D}
         */ texture: null,
        // Texture node must have output without parameters
        outputs: {
            color: {}
        }
    };
}, function() {}, {
    getOutput: function(renderer, name) {
        return this.texture;
    },
    // Do nothing
    beforeFrame: function() {},
    afterFrame: function() {}
});
const __TURBOPACK__default__export__ = TextureNode;
}}),
"[project]/node_modules/claygl/src/compositor/FilterNode.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// TODO Shader library
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$compositor$2f$Pass$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/compositor/Pass.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$compositor$2f$CompositorNode$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/compositor/CompositorNode.js [app-client] (ecmascript)");
;
;
// TODO curlnoise demo wrong
// PENDING
// Use topological sort ?
/**
 * Filter node
 *
 * @constructor clay.compositor.FilterNode
 * @extends clay.compositor.CompositorNode
 *
 * @example
    var node = new clay.compositor.FilterNode({
        name: 'fxaa',
        shader: clay.Shader.source('clay.compositor.fxaa'),
        inputs: {
            texture: {
                    node: 'scene',
                    pin: 'color'
            }
        },
        // Multiple outputs is preserved for MRT support in WebGL2.0
        outputs: {
            color: {
                attachment: clay.FrameBuffer.COLOR_ATTACHMENT0
                parameters: {
                    format: clay.Texture.RGBA,
                    width: 512,
                    height: 512
                },
                // Node will keep the RTT rendered in last frame
                keepLastFrame: true,
                // Force the node output the RTT rendered in last frame
                outputLastFrame: true
            }
        }
    });
    *
    */ var FilterNode = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$compositor$2f$CompositorNode$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].extend(function() {
    return /** @lends clay.compositor.FilterNode# */ {
        /**
         * @type {string}
         */ name: '',
        /**
         * @type {Object}
         */ inputs: {},
        /**
         * @type {Object}
         */ outputs: null,
        /**
         * @type {string}
         */ shader: '',
        /**
         * Input links, will be updated by the graph
         * @example:
         *     inputName: {
         *         node: someNode,
         *         pin: 'xxxx'
         *     }
         * @type {Object}
         */ inputLinks: {},
        /**
         * Output links, will be updated by the graph
         * @example:
         *     outputName: {
         *         node: someNode,
         *         pin: 'xxxx'
         *     }
         * @type {Object}
         */ outputLinks: {},
        /**
         * @type {clay.compositor.Pass}
         */ pass: null,
        // Save the output texture of previous frame
        // Will be used when there exist a circular reference
        _prevOutputTextures: {},
        _outputTextures: {},
        // Example: { name: 2 }
        _outputReferences: {},
        _rendering: false,
        // If rendered in this frame
        _rendered: false,
        _compositor: null
    };
}, function() {
    var pass = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$compositor$2f$Pass$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]({
        fragment: this.shader
    });
    this.pass = pass;
}, /** @lends clay.compositor.FilterNode.prototype */ {
    /**
     * @param  {clay.Renderer} renderer
     */ render: function(renderer, frameBuffer) {
        this.trigger('beforerender', renderer);
        this._rendering = true;
        var _gl = renderer.gl;
        for(var inputName in this.inputLinks){
            var link = this.inputLinks[inputName];
            var inputTexture = link.node.getOutput(renderer, link.pin);
            this.pass.setUniform(inputName, inputTexture);
        }
        // Output
        if (!this.outputs) {
            this.pass.outputs = null;
            this._compositor.getFrameBuffer().unbind(renderer);
            this.pass.render(renderer, frameBuffer);
        } else {
            this.pass.outputs = {};
            var attachedTextures = {};
            for(var name in this.outputs){
                var parameters = this.updateParameter(name, renderer);
                if (isNaN(parameters.width)) {
                    this.updateParameter(name, renderer);
                }
                var outputInfo = this.outputs[name];
                var texture = this._compositor.allocateTexture(parameters);
                this._outputTextures[name] = texture;
                var attachment = outputInfo.attachment || _gl.COLOR_ATTACHMENT0;
                if (typeof attachment === 'string') {
                    attachment = _gl[attachment];
                }
                attachedTextures[attachment] = texture;
            }
            this._compositor.getFrameBuffer().bind(renderer);
            for(var attachment in attachedTextures){
                // FIXME attachment changes in different nodes
                this._compositor.getFrameBuffer().attach(attachedTextures[attachment], attachment);
            }
            this.pass.render(renderer);
            // Because the data of texture is changed over time,
            // Here update the mipmaps of texture each time after rendered;
            this._compositor.getFrameBuffer().updateMipmap(renderer);
        }
        for(var inputName in this.inputLinks){
            var link = this.inputLinks[inputName];
            link.node.removeReference(link.pin);
        }
        this._rendering = false;
        this._rendered = true;
        this.trigger('afterrender', renderer);
    },
    // TODO Remove parameter function callback
    updateParameter: function(outputName, renderer) {
        var outputInfo = this.outputs[outputName];
        var parameters = outputInfo.parameters;
        var parametersCopy = outputInfo._parametersCopy;
        if (!parametersCopy) {
            parametersCopy = outputInfo._parametersCopy = {};
        }
        if (parameters) {
            for(var key in parameters){
                if (key !== 'width' && key !== 'height') {
                    parametersCopy[key] = parameters[key];
                }
            }
        }
        var width, height;
        if (typeof parameters.width === 'function') {
            width = parameters.width.call(this, renderer);
        } else {
            width = parameters.width;
        }
        if (typeof parameters.height === 'function') {
            height = parameters.height.call(this, renderer);
        } else {
            height = parameters.height;
        }
        width = Math.ceil(width);
        height = Math.ceil(height);
        if (parametersCopy.width !== width || parametersCopy.height !== height) {
            if (this._outputTextures[outputName]) {
                this._outputTextures[outputName].dispose(renderer);
            }
        }
        parametersCopy.width = width;
        parametersCopy.height = height;
        return parametersCopy;
    },
    /**
     * Set parameter
     * @param {string} name
     * @param {} value
     */ setParameter: function(name, value) {
        this.pass.setUniform(name, value);
    },
    /**
     * Get parameter value
     * @param  {string} name
     * @return {}
     */ getParameter: function(name) {
        return this.pass.getUniform(name);
    },
    /**
     * Set parameters
     * @param {Object} obj
     */ setParameters: function(obj) {
        for(var name in obj){
            this.setParameter(name, obj[name]);
        }
    },
    // /**
    //  * Set shader code
    //  * @param {string} shaderStr
    //  */
    // setShader: function (shaderStr) {
    //     var material = this.pass.material;
    //     material.shader.setFragment(shaderStr);
    //     material.attachShader(material.shader, true);
    // },
    /**
     * Proxy of pass.material.define('fragment', xxx);
     * @param  {string} symbol
     * @param  {number} [val]
     */ define: function(symbol, val) {
        this.pass.material.define('fragment', symbol, val);
    },
    /**
     * Proxy of pass.material.undefine('fragment', xxx)
     * @param  {string} symbol
     */ undefine: function(symbol) {
        this.pass.material.undefine('fragment', symbol);
    },
    removeReference: function(outputName) {
        this._outputReferences[outputName]--;
        if (this._outputReferences[outputName] === 0) {
            var outputInfo = this.outputs[outputName];
            if (outputInfo.keepLastFrame) {
                if (this._prevOutputTextures[outputName]) {
                    this._compositor.releaseTexture(this._prevOutputTextures[outputName]);
                }
                this._prevOutputTextures[outputName] = this._outputTextures[outputName];
            } else {
                // Output of this node have alreay been used by all other nodes
                // Put the texture back to the pool.
                this._compositor.releaseTexture(this._outputTextures[outputName]);
            }
        }
    },
    clear: function() {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$compositor$2f$CompositorNode$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].prototype.clear.call(this);
        // Default disable all texture
        this.pass.material.disableTexturesAll();
    }
});
const __TURBOPACK__default__export__ = FilterNode;
}}),
"[project]/node_modules/claygl/src/shader/source/compositor/coloradjust.glsl.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
const __TURBOPACK__default__export__ = "@export clay.compositor.coloradjust\nvarying vec2 v_Texcoord;\nuniform sampler2D texture;\nuniform float brightness : 0.0;\nuniform float contrast : 1.0;\nuniform float exposure : 0.0;\nuniform float gamma : 1.0;\nuniform float saturation : 1.0;\nconst vec3 w = vec3(0.2125, 0.7154, 0.0721);\nvoid main()\n{\n vec4 tex = texture2D( texture, v_Texcoord);\n vec3 color = clamp(tex.rgb + vec3(brightness), 0.0, 1.0);\n color = clamp( (color-vec3(0.5))*contrast+vec3(0.5), 0.0, 1.0);\n color = clamp( color * pow(2.0, exposure), 0.0, 1.0);\n color = clamp( pow(color, vec3(gamma)), 0.0, 1.0);\n float luminance = dot( color, w );\n color = mix(vec3(luminance), color, saturation);\n gl_FragColor = vec4(color, tex.a);\n}\n@end\n@export clay.compositor.brightness\nvarying vec2 v_Texcoord;\nuniform sampler2D texture;\nuniform float brightness : 0.0;\nvoid main()\n{\n vec4 tex = texture2D( texture, v_Texcoord);\n vec3 color = tex.rgb + vec3(brightness);\n gl_FragColor = vec4(color, tex.a);\n}\n@end\n@export clay.compositor.contrast\nvarying vec2 v_Texcoord;\nuniform sampler2D texture;\nuniform float contrast : 1.0;\nvoid main()\n{\n vec4 tex = texture2D( texture, v_Texcoord);\n vec3 color = (tex.rgb-vec3(0.5))*contrast+vec3(0.5);\n gl_FragColor = vec4(color, tex.a);\n}\n@end\n@export clay.compositor.exposure\nvarying vec2 v_Texcoord;\nuniform sampler2D texture;\nuniform float exposure : 0.0;\nvoid main()\n{\n vec4 tex = texture2D(texture, v_Texcoord);\n vec3 color = tex.rgb * pow(2.0, exposure);\n gl_FragColor = vec4(color, tex.a);\n}\n@end\n@export clay.compositor.gamma\nvarying vec2 v_Texcoord;\nuniform sampler2D texture;\nuniform float gamma : 1.0;\nvoid main()\n{\n vec4 tex = texture2D(texture, v_Texcoord);\n vec3 color = pow(tex.rgb, vec3(gamma));\n gl_FragColor = vec4(color, tex.a);\n}\n@end\n@export clay.compositor.saturation\nvarying vec2 v_Texcoord;\nuniform sampler2D texture;\nuniform float saturation : 1.0;\nconst vec3 w = vec3(0.2125, 0.7154, 0.0721);\nvoid main()\n{\n vec4 tex = texture2D(texture, v_Texcoord);\n vec3 color = tex.rgb;\n float luminance = dot(color, w);\n color = mix(vec3(luminance), color, saturation);\n gl_FragColor = vec4(color, tex.a);\n}\n@end";
}}),
"[project]/node_modules/claygl/src/shader/source/compositor/blur.glsl.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
const __TURBOPACK__default__export__ = "@export clay.compositor.kernel.gaussian_9\nfloat gaussianKernel[9];\ngaussianKernel[0] = 0.07;\ngaussianKernel[1] = 0.09;\ngaussianKernel[2] = 0.12;\ngaussianKernel[3] = 0.14;\ngaussianKernel[4] = 0.16;\ngaussianKernel[5] = 0.14;\ngaussianKernel[6] = 0.12;\ngaussianKernel[7] = 0.09;\ngaussianKernel[8] = 0.07;\n@end\n@export clay.compositor.kernel.gaussian_13\nfloat gaussianKernel[13];\ngaussianKernel[0] = 0.02;\ngaussianKernel[1] = 0.03;\ngaussianKernel[2] = 0.06;\ngaussianKernel[3] = 0.08;\ngaussianKernel[4] = 0.11;\ngaussianKernel[5] = 0.13;\ngaussianKernel[6] = 0.14;\ngaussianKernel[7] = 0.13;\ngaussianKernel[8] = 0.11;\ngaussianKernel[9] = 0.08;\ngaussianKernel[10] = 0.06;\ngaussianKernel[11] = 0.03;\ngaussianKernel[12] = 0.02;\n@end\n@export clay.compositor.gaussian_blur\n#define SHADER_NAME gaussian_blur\nuniform sampler2D texture;varying vec2 v_Texcoord;\nuniform float blurSize : 2.0;\nuniform vec2 textureSize : [512.0, 512.0];\nuniform float blurDir : 0.0;\n@import clay.util.rgbm\n@import clay.util.clamp_sample\nvoid main (void)\n{\n @import clay.compositor.kernel.gaussian_9\n vec2 off = blurSize / textureSize;\n off *= vec2(1.0 - blurDir, blurDir);\n vec4 sum = vec4(0.0);\n float weightAll = 0.0;\n for (int i = 0; i < 9; i++) {\n float w = gaussianKernel[i];\n vec4 texel = decodeHDR(clampSample(texture, v_Texcoord + float(i - 4) * off));\n sum += texel * w;\n weightAll += w;\n }\n gl_FragColor = encodeHDR(sum / max(weightAll, 0.01));\n}\n@end\n";
}}),
"[project]/node_modules/claygl/src/shader/source/compositor/lum.glsl.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
const __TURBOPACK__default__export__ = "@export clay.compositor.hdr.log_lum\nvarying vec2 v_Texcoord;\nuniform sampler2D texture;\nconst vec3 w = vec3(0.2125, 0.7154, 0.0721);\n@import clay.util.rgbm\nvoid main()\n{\n vec4 tex = decodeHDR(texture2D(texture, v_Texcoord));\n float luminance = dot(tex.rgb, w);\n luminance = log(luminance + 0.001);\n gl_FragColor = encodeHDR(vec4(vec3(luminance), 1.0));\n}\n@end\n@export clay.compositor.hdr.lum_adaption\nvarying vec2 v_Texcoord;\nuniform sampler2D adaptedLum;\nuniform sampler2D currentLum;\nuniform float frameTime : 0.02;\n@import clay.util.rgbm\nvoid main()\n{\n float fAdaptedLum = decodeHDR(texture2D(adaptedLum, vec2(0.5, 0.5))).r;\n float fCurrentLum = exp(encodeHDR(texture2D(currentLum, vec2(0.5, 0.5))).r);\n fAdaptedLum += (fCurrentLum - fAdaptedLum) * (1.0 - pow(0.98, 30.0 * frameTime));\n gl_FragColor = encodeHDR(vec4(vec3(fAdaptedLum), 1.0));\n}\n@end\n@export clay.compositor.lum\nvarying vec2 v_Texcoord;\nuniform sampler2D texture;\nconst vec3 w = vec3(0.2125, 0.7154, 0.0721);\nvoid main()\n{\n vec4 tex = texture2D( texture, v_Texcoord );\n float luminance = dot(tex.rgb, w);\n gl_FragColor = vec4(vec3(luminance), 1.0);\n}\n@end";
}}),
"[project]/node_modules/claygl/src/shader/source/compositor/lut.glsl.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
const __TURBOPACK__default__export__ = "\n@export clay.compositor.lut\nvarying vec2 v_Texcoord;\nuniform sampler2D texture;\nuniform sampler2D lookup;\nvoid main()\n{\n vec4 tex = texture2D(texture, v_Texcoord);\n float blueColor = tex.b * 63.0;\n vec2 quad1;\n quad1.y = floor(floor(blueColor) / 8.0);\n quad1.x = floor(blueColor) - (quad1.y * 8.0);\n vec2 quad2;\n quad2.y = floor(ceil(blueColor) / 8.0);\n quad2.x = ceil(blueColor) - (quad2.y * 8.0);\n vec2 texPos1;\n texPos1.x = (quad1.x * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * tex.r);\n texPos1.y = (quad1.y * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * tex.g);\n vec2 texPos2;\n texPos2.x = (quad2.x * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * tex.r);\n texPos2.y = (quad2.y * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * tex.g);\n vec4 newColor1 = texture2D(lookup, texPos1);\n vec4 newColor2 = texture2D(lookup, texPos2);\n vec4 newColor = mix(newColor1, newColor2, fract(blueColor));\n gl_FragColor = vec4(newColor.rgb, tex.w);\n}\n@end";
}}),
"[project]/node_modules/claygl/src/shader/source/compositor/vignette.glsl.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
const __TURBOPACK__default__export__ = "@export clay.compositor.vignette\n#define OUTPUT_ALPHA\nvarying vec2 v_Texcoord;\nuniform sampler2D texture;\nuniform float darkness: 1;\nuniform float offset: 1;\n@import clay.util.rgbm\nvoid main()\n{\n vec4 texel = decodeHDR(texture2D(texture, v_Texcoord));\n gl_FragColor.rgb = texel.rgb;\n vec2 uv = (v_Texcoord - vec2(0.5)) * vec2(offset);\n gl_FragColor = encodeHDR(vec4(mix(texel.rgb, vec3(1.0 - darkness), dot(uv, uv)), texel.a));\n}\n@end";
}}),
"[project]/node_modules/claygl/src/shader/source/compositor/output.glsl.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
const __TURBOPACK__default__export__ = "@export clay.compositor.output\n#define OUTPUT_ALPHA\nvarying vec2 v_Texcoord;\nuniform sampler2D texture;\n@import clay.util.rgbm\nvoid main()\n{\n vec4 tex = decodeHDR(texture2D(texture, v_Texcoord));\n gl_FragColor.rgb = tex.rgb;\n#ifdef OUTPUT_ALPHA\n gl_FragColor.a = tex.a;\n#else\n gl_FragColor.a = 1.0;\n#endif\n gl_FragColor = encodeHDR(gl_FragColor);\n#ifdef PREMULTIPLY_ALPHA\n gl_FragColor.rgb *= gl_FragColor.a;\n#endif\n}\n@end";
}}),
"[project]/node_modules/claygl/src/shader/source/compositor/bright.glsl.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
const __TURBOPACK__default__export__ = "@export clay.compositor.bright\nuniform sampler2D texture;\nuniform float threshold : 1;\nuniform float scale : 1.0;\nuniform vec2 textureSize: [512, 512];\nvarying vec2 v_Texcoord;\nconst vec3 lumWeight = vec3(0.2125, 0.7154, 0.0721);\n@import clay.util.rgbm\nvec4 median(vec4 a, vec4 b, vec4 c)\n{\n return a + b + c - min(min(a, b), c) - max(max(a, b), c);\n}\nvoid main()\n{\n vec4 texel = decodeHDR(texture2D(texture, v_Texcoord));\n#ifdef ANTI_FLICKER\n vec3 d = 1.0 / textureSize.xyx * vec3(1.0, 1.0, 0.0);\n vec4 s1 = decodeHDR(texture2D(texture, v_Texcoord - d.xz));\n vec4 s2 = decodeHDR(texture2D(texture, v_Texcoord + d.xz));\n vec4 s3 = decodeHDR(texture2D(texture, v_Texcoord - d.zy));\n vec4 s4 = decodeHDR(texture2D(texture, v_Texcoord + d.zy));\n texel = median(median(texel, s1, s2), s3, s4);\n#endif\n float lum = dot(texel.rgb , lumWeight);\n vec4 color;\n if (lum > threshold && texel.a > 0.0)\n {\n color = vec4(texel.rgb * scale, texel.a * scale);\n }\n else\n {\n color = vec4(0.0);\n }\n gl_FragColor = encodeHDR(color);\n}\n@end\n";
}}),
"[project]/node_modules/claygl/src/shader/source/compositor/downsample.glsl.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
const __TURBOPACK__default__export__ = "@export clay.compositor.downsample\nuniform sampler2D texture;\nuniform vec2 textureSize : [512, 512];\nvarying vec2 v_Texcoord;\n@import clay.util.rgbm\nfloat brightness(vec3 c)\n{\n return max(max(c.r, c.g), c.b);\n}\n@import clay.util.clamp_sample\nvoid main()\n{\n vec4 d = vec4(-1.0, -1.0, 1.0, 1.0) / textureSize.xyxy;\n#ifdef ANTI_FLICKER\n vec3 s1 = decodeHDR(clampSample(texture, v_Texcoord + d.xy)).rgb;\n vec3 s2 = decodeHDR(clampSample(texture, v_Texcoord + d.zy)).rgb;\n vec3 s3 = decodeHDR(clampSample(texture, v_Texcoord + d.xw)).rgb;\n vec3 s4 = decodeHDR(clampSample(texture, v_Texcoord + d.zw)).rgb;\n float s1w = 1.0 / (brightness(s1) + 1.0);\n float s2w = 1.0 / (brightness(s2) + 1.0);\n float s3w = 1.0 / (brightness(s3) + 1.0);\n float s4w = 1.0 / (brightness(s4) + 1.0);\n float oneDivideSum = 1.0 / (s1w + s2w + s3w + s4w);\n vec4 color = vec4(\n (s1 * s1w + s2 * s2w + s3 * s3w + s4 * s4w) * oneDivideSum,\n 1.0\n );\n#else\n vec4 color = decodeHDR(clampSample(texture, v_Texcoord + d.xy));\n color += decodeHDR(clampSample(texture, v_Texcoord + d.zy));\n color += decodeHDR(clampSample(texture, v_Texcoord + d.xw));\n color += decodeHDR(clampSample(texture, v_Texcoord + d.zw));\n color *= 0.25;\n#endif\n gl_FragColor = encodeHDR(color);\n}\n@end";
}}),
"[project]/node_modules/claygl/src/shader/source/compositor/upsample.glsl.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
const __TURBOPACK__default__export__ = "\n@export clay.compositor.upsample\n#define HIGH_QUALITY\nuniform sampler2D texture;\nuniform vec2 textureSize : [512, 512];\nuniform float sampleScale: 0.5;\nvarying vec2 v_Texcoord;\n@import clay.util.rgbm\n@import clay.util.clamp_sample\nvoid main()\n{\n#ifdef HIGH_QUALITY\n vec4 d = vec4(1.0, 1.0, -1.0, 0.0) / textureSize.xyxy * sampleScale;\n vec4 s;\n s = decodeHDR(clampSample(texture, v_Texcoord - d.xy));\n s += decodeHDR(clampSample(texture, v_Texcoord - d.wy)) * 2.0;\n s += decodeHDR(clampSample(texture, v_Texcoord - d.zy));\n s += decodeHDR(clampSample(texture, v_Texcoord + d.zw)) * 2.0;\n s += decodeHDR(clampSample(texture, v_Texcoord )) * 4.0;\n s += decodeHDR(clampSample(texture, v_Texcoord + d.xw)) * 2.0;\n s += decodeHDR(clampSample(texture, v_Texcoord + d.zy));\n s += decodeHDR(clampSample(texture, v_Texcoord + d.wy)) * 2.0;\n s += decodeHDR(clampSample(texture, v_Texcoord + d.xy));\n gl_FragColor = encodeHDR(s / 16.0);\n#else\n vec4 d = vec4(-1.0, -1.0, +1.0, +1.0) / textureSize.xyxy;\n vec4 s;\n s = decodeHDR(clampSample(texture, v_Texcoord + d.xy));\n s += decodeHDR(clampSample(texture, v_Texcoord + d.zy));\n s += decodeHDR(clampSample(texture, v_Texcoord + d.xw));\n s += decodeHDR(clampSample(texture, v_Texcoord + d.zw));\n gl_FragColor = encodeHDR(s / 4.0);\n#endif\n}\n@end";
}}),
"[project]/node_modules/claygl/src/shader/source/compositor/hdr.glsl.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
const __TURBOPACK__default__export__ = "@export clay.compositor.hdr.composite\n#define TONEMAPPING\nuniform sampler2D texture;\n#ifdef BLOOM_ENABLED\nuniform sampler2D bloom;\n#endif\n#ifdef LENSFLARE_ENABLED\nuniform sampler2D lensflare;\nuniform sampler2D lensdirt;\n#endif\n#ifdef LUM_ENABLED\nuniform sampler2D lum;\n#endif\n#ifdef LUT_ENABLED\nuniform sampler2D lut;\n#endif\n#ifdef COLOR_CORRECTION\nuniform float brightness : 0.0;\nuniform float contrast : 1.0;\nuniform float saturation : 1.0;\n#endif\n#ifdef VIGNETTE\nuniform float vignetteDarkness: 1.0;\nuniform float vignetteOffset: 1.0;\n#endif\nuniform float exposure : 1.0;\nuniform float bloomIntensity : 0.25;\nuniform float lensflareIntensity : 1;\nvarying vec2 v_Texcoord;\n@import clay.util.srgb\nvec3 ACESToneMapping(vec3 color)\n{\n const float A = 2.51;\n const float B = 0.03;\n const float C = 2.43;\n const float D = 0.59;\n const float E = 0.14;\n return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nfloat eyeAdaption(float fLum)\n{\n return mix(0.2, fLum, 0.5);\n}\n#ifdef LUT_ENABLED\nvec3 lutTransform(vec3 color) {\n float blueColor = color.b * 63.0;\n vec2 quad1;\n quad1.y = floor(floor(blueColor) / 8.0);\n quad1.x = floor(blueColor) - (quad1.y * 8.0);\n vec2 quad2;\n quad2.y = floor(ceil(blueColor) / 8.0);\n quad2.x = ceil(blueColor) - (quad2.y * 8.0);\n vec2 texPos1;\n texPos1.x = (quad1.x * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * color.r);\n texPos1.y = (quad1.y * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * color.g);\n vec2 texPos2;\n texPos2.x = (quad2.x * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * color.r);\n texPos2.y = (quad2.y * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * color.g);\n vec4 newColor1 = texture2D(lut, texPos1);\n vec4 newColor2 = texture2D(lut, texPos2);\n vec4 newColor = mix(newColor1, newColor2, fract(blueColor));\n return newColor.rgb;\n}\n#endif\n@import clay.util.rgbm\nvoid main()\n{\n vec4 texel = vec4(0.0);\n vec4 originalTexel = vec4(0.0);\n#ifdef TEXTURE_ENABLED\n texel = decodeHDR(texture2D(texture, v_Texcoord));\n originalTexel = texel;\n#endif\n#ifdef BLOOM_ENABLED\n vec4 bloomTexel = decodeHDR(texture2D(bloom, v_Texcoord));\n texel.rgb += bloomTexel.rgb * bloomIntensity;\n texel.a += bloomTexel.a * bloomIntensity;\n#endif\n#ifdef LENSFLARE_ENABLED\n texel += decodeHDR(texture2D(lensflare, v_Texcoord)) * texture2D(lensdirt, v_Texcoord) * lensflareIntensity;\n#endif\n texel.a = min(texel.a, 1.0);\n#ifdef LUM_ENABLED\n float fLum = texture2D(lum, vec2(0.5, 0.5)).r;\n float adaptedLumDest = 3.0 / (max(0.1, 1.0 + 10.0*eyeAdaption(fLum)));\n float exposureBias = adaptedLumDest * exposure;\n#else\n float exposureBias = exposure;\n#endif\n#ifdef TONEMAPPING\n texel.rgb *= exposureBias;\n texel.rgb = ACESToneMapping(texel.rgb);\n#endif\n texel = linearTosRGB(texel);\n#ifdef LUT_ENABLED\n texel.rgb = lutTransform(clamp(texel.rgb,vec3(0.0),vec3(1.0)));\n#endif\n#ifdef COLOR_CORRECTION\n texel.rgb = clamp(texel.rgb + vec3(brightness), 0.0, 1.0);\n texel.rgb = clamp((texel.rgb - vec3(0.5))*contrast+vec3(0.5), 0.0, 1.0);\n float lum = dot(texel.rgb, vec3(0.2125, 0.7154, 0.0721));\n texel.rgb = mix(vec3(lum), texel.rgb, saturation);\n#endif\n#ifdef VIGNETTE\n vec2 uv = (v_Texcoord - vec2(0.5)) * vec2(vignetteOffset);\n texel.rgb = mix(texel.rgb, vec3(1.0 - vignetteDarkness), dot(uv, uv));\n#endif\n gl_FragColor = encodeHDR(texel);\n#ifdef DEBUG\n #if DEBUG == 1\n gl_FragColor = encodeHDR(decodeHDR(texture2D(texture, v_Texcoord)));\n #elif DEBUG == 2\n gl_FragColor = encodeHDR(decodeHDR(texture2D(bloom, v_Texcoord)) * bloomIntensity);\n #elif DEBUG == 3\n gl_FragColor = encodeHDR(decodeHDR(texture2D(lensflare, v_Texcoord) * lensflareIntensity));\n #endif\n#endif\n if (originalTexel.a <= 0.01 && gl_FragColor.a > 1e-5) {\n gl_FragColor.a = dot(gl_FragColor.rgb, vec3(0.2125, 0.7154, 0.0721));\n }\n#ifdef PREMULTIPLY_ALPHA\n gl_FragColor.rgb *= gl_FragColor.a;\n#endif\n}\n@end";
}}),
"[project]/node_modules/claygl/src/shader/source/compositor/lensflare.glsl.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
const __TURBOPACK__default__export__ = "@export clay.compositor.lensflare\n#define SAMPLE_NUMBER 8\nuniform sampler2D texture;\nuniform sampler2D lenscolor;\nuniform vec2 textureSize : [512, 512];\nuniform float dispersal : 0.3;\nuniform float haloWidth : 0.4;\nuniform float distortion : 1.0;\nvarying vec2 v_Texcoord;\n@import clay.util.rgbm\nvec4 textureDistorted(\n in vec2 texcoord,\n in vec2 direction,\n in vec3 distortion\n) {\n return vec4(\n decodeHDR(texture2D(texture, texcoord + direction * distortion.r)).r,\n decodeHDR(texture2D(texture, texcoord + direction * distortion.g)).g,\n decodeHDR(texture2D(texture, texcoord + direction * distortion.b)).b,\n 1.0\n );\n}\nvoid main()\n{\n vec2 texcoord = -v_Texcoord + vec2(1.0); vec2 textureOffset = 1.0 / textureSize;\n vec2 ghostVec = (vec2(0.5) - texcoord) * dispersal;\n vec2 haloVec = normalize(ghostVec) * haloWidth;\n vec3 distortion = vec3(-textureOffset.x * distortion, 0.0, textureOffset.x * distortion);\n vec4 result = vec4(0.0);\n for (int i = 0; i < SAMPLE_NUMBER; i++)\n {\n vec2 offset = fract(texcoord + ghostVec * float(i));\n float weight = length(vec2(0.5) - offset) / length(vec2(0.5));\n weight = pow(1.0 - weight, 10.0);\n result += textureDistorted(offset, normalize(ghostVec), distortion) * weight;\n }\n result *= texture2D(lenscolor, vec2(length(vec2(0.5) - texcoord)) / length(vec2(0.5)));\n float weight = length(vec2(0.5) - fract(texcoord + haloVec)) / length(vec2(0.5));\n weight = pow(1.0 - weight, 10.0);\n vec2 offset = fract(texcoord + haloVec);\n result += textureDistorted(offset, normalize(ghostVec), distortion) * weight;\n gl_FragColor = result;\n}\n@end";
}}),
"[project]/node_modules/claygl/src/shader/source/compositor/blend.glsl.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
const __TURBOPACK__default__export__ = "@export clay.compositor.blend\n#define SHADER_NAME blend\n#ifdef TEXTURE1_ENABLED\nuniform sampler2D texture1;\nuniform float weight1 : 1.0;\n#endif\n#ifdef TEXTURE2_ENABLED\nuniform sampler2D texture2;\nuniform float weight2 : 1.0;\n#endif\n#ifdef TEXTURE3_ENABLED\nuniform sampler2D texture3;\nuniform float weight3 : 1.0;\n#endif\n#ifdef TEXTURE4_ENABLED\nuniform sampler2D texture4;\nuniform float weight4 : 1.0;\n#endif\n#ifdef TEXTURE5_ENABLED\nuniform sampler2D texture5;\nuniform float weight5 : 1.0;\n#endif\n#ifdef TEXTURE6_ENABLED\nuniform sampler2D texture6;\nuniform float weight6 : 1.0;\n#endif\nvarying vec2 v_Texcoord;\n@import clay.util.rgbm\nvoid main()\n{\n vec4 tex = vec4(0.0);\n#ifdef TEXTURE1_ENABLED\n tex += decodeHDR(texture2D(texture1, v_Texcoord)) * weight1;\n#endif\n#ifdef TEXTURE2_ENABLED\n tex += decodeHDR(texture2D(texture2, v_Texcoord)) * weight2;\n#endif\n#ifdef TEXTURE3_ENABLED\n tex += decodeHDR(texture2D(texture3, v_Texcoord)) * weight3;\n#endif\n#ifdef TEXTURE4_ENABLED\n tex += decodeHDR(texture2D(texture4, v_Texcoord)) * weight4;\n#endif\n#ifdef TEXTURE5_ENABLED\n tex += decodeHDR(texture2D(texture5, v_Texcoord)) * weight5;\n#endif\n#ifdef TEXTURE6_ENABLED\n tex += decodeHDR(texture2D(texture6, v_Texcoord)) * weight6;\n#endif\n gl_FragColor = encodeHDR(tex);\n}\n@end";
}}),
"[project]/node_modules/claygl/src/shader/source/compositor/fxaa.glsl.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
const __TURBOPACK__default__export__ = "@export clay.compositor.fxaa\nuniform sampler2D texture;\nuniform vec4 viewport : VIEWPORT;\nvarying vec2 v_Texcoord;\n#define FXAA_REDUCE_MIN (1.0/128.0)\n#define FXAA_REDUCE_MUL (1.0/8.0)\n#define FXAA_SPAN_MAX 8.0\n@import clay.util.rgbm\nvoid main()\n{\n vec2 resolution = 1.0 / viewport.zw;\n vec3 rgbNW = decodeHDR( texture2D( texture, ( gl_FragCoord.xy + vec2( -1.0, -1.0 ) ) * resolution ) ).xyz;\n vec3 rgbNE = decodeHDR( texture2D( texture, ( gl_FragCoord.xy + vec2( 1.0, -1.0 ) ) * resolution ) ).xyz;\n vec3 rgbSW = decodeHDR( texture2D( texture, ( gl_FragCoord.xy + vec2( -1.0, 1.0 ) ) * resolution ) ).xyz;\n vec3 rgbSE = decodeHDR( texture2D( texture, ( gl_FragCoord.xy + vec2( 1.0, 1.0 ) ) * resolution ) ).xyz;\n vec4 rgbaM = decodeHDR( texture2D( texture, gl_FragCoord.xy * resolution ) );\n vec3 rgbM = rgbaM.xyz;\n float opacity = rgbaM.w;\n vec3 luma = vec3( 0.299, 0.587, 0.114 );\n float lumaNW = dot( rgbNW, luma );\n float lumaNE = dot( rgbNE, luma );\n float lumaSW = dot( rgbSW, luma );\n float lumaSE = dot( rgbSE, luma );\n float lumaM = dot( rgbM, luma );\n float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n vec2 dir;\n dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n dir.y = ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n dir = min( vec2( FXAA_SPAN_MAX, FXAA_SPAN_MAX),\n max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n dir * rcpDirMin)) * resolution;\n vec3 rgbA = decodeHDR( texture2D( texture, gl_FragCoord.xy * resolution + dir * ( 1.0 / 3.0 - 0.5 ) ) ).xyz;\n rgbA += decodeHDR( texture2D( texture, gl_FragCoord.xy * resolution + dir * ( 2.0 / 3.0 - 0.5 ) ) ).xyz;\n rgbA *= 0.5;\n vec3 rgbB = decodeHDR( texture2D( texture, gl_FragCoord.xy * resolution + dir * -0.5 ) ).xyz;\n rgbB += decodeHDR( texture2D( texture, gl_FragCoord.xy * resolution + dir * 0.5 ) ).xyz;\n rgbB *= 0.25;\n rgbB += rgbA * 0.5;\n float lumaB = dot( rgbB, luma );\n if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) )\n {\n gl_FragColor = vec4( rgbA, opacity );\n }\n else {\n gl_FragColor = vec4( rgbB, opacity );\n }\n}\n@end";
}}),
"[project]/node_modules/claygl/src/shader/registerBuiltinCompositor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>register)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$shader$2f$source$2f$compositor$2f$coloradjust$2e$glsl$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/shader/source/compositor/coloradjust.glsl.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$shader$2f$source$2f$compositor$2f$blur$2e$glsl$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/shader/source/compositor/blur.glsl.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$shader$2f$source$2f$compositor$2f$lum$2e$glsl$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/shader/source/compositor/lum.glsl.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$shader$2f$source$2f$compositor$2f$lut$2e$glsl$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/shader/source/compositor/lut.glsl.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$shader$2f$source$2f$compositor$2f$vignette$2e$glsl$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/shader/source/compositor/vignette.glsl.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$shader$2f$source$2f$compositor$2f$output$2e$glsl$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/shader/source/compositor/output.glsl.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$shader$2f$source$2f$compositor$2f$bright$2e$glsl$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/shader/source/compositor/bright.glsl.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$shader$2f$source$2f$compositor$2f$downsample$2e$glsl$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/shader/source/compositor/downsample.glsl.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$shader$2f$source$2f$compositor$2f$upsample$2e$glsl$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/shader/source/compositor/upsample.glsl.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$shader$2f$source$2f$compositor$2f$hdr$2e$glsl$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/shader/source/compositor/hdr.glsl.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$shader$2f$source$2f$compositor$2f$lensflare$2e$glsl$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/shader/source/compositor/lensflare.glsl.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$shader$2f$source$2f$compositor$2f$blend$2e$glsl$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/shader/source/compositor/blend.glsl.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$shader$2f$source$2f$compositor$2f$fxaa$2e$glsl$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/shader/source/compositor/fxaa.glsl.js [app-client] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
;
;
function register(Shader) {
    // Some build in shaders
    Shader['import'](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$shader$2f$source$2f$compositor$2f$coloradjust$2e$glsl$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]);
    Shader['import'](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$shader$2f$source$2f$compositor$2f$blur$2e$glsl$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]);
    Shader['import'](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$shader$2f$source$2f$compositor$2f$lum$2e$glsl$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]);
    Shader['import'](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$shader$2f$source$2f$compositor$2f$lut$2e$glsl$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]);
    Shader['import'](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$shader$2f$source$2f$compositor$2f$vignette$2e$glsl$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]);
    Shader['import'](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$shader$2f$source$2f$compositor$2f$output$2e$glsl$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]);
    Shader['import'](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$shader$2f$source$2f$compositor$2f$bright$2e$glsl$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]);
    Shader['import'](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$shader$2f$source$2f$compositor$2f$downsample$2e$glsl$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]);
    Shader['import'](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$shader$2f$source$2f$compositor$2f$upsample$2e$glsl$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]);
    Shader['import'](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$shader$2f$source$2f$compositor$2f$hdr$2e$glsl$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]);
    Shader['import'](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$shader$2f$source$2f$compositor$2f$lensflare$2e$glsl$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]);
    Shader['import'](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$shader$2f$source$2f$compositor$2f$blend$2e$glsl$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]);
    Shader['import'](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$shader$2f$source$2f$compositor$2f$fxaa$2e$glsl$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]);
}
}}),
"[project]/node_modules/claygl/src/createCompositor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$util$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/core/util.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$compositor$2f$Compositor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/compositor/Compositor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$compositor$2f$SceneNode$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/compositor/SceneNode.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$compositor$2f$TextureNode$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/compositor/TextureNode.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$compositor$2f$FilterNode$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/compositor/FilterNode.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Shader$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/Shader.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Texture$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/Texture.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Texture2D$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/Texture2D.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$TextureCube$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/TextureCube.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$shader$2f$registerBuiltinCompositor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/shader/registerBuiltinCompositor.js [app-client] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$shader$2f$registerBuiltinCompositor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Shader$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]);
var shaderSourceReg = /^#source\((.*?)\)/;
/**
 * @name clay.createCompositor
 * @function
 * @param {Object} json
 * @param {Object} [opts]
 * @return {clay.compositor.Compositor}
 */ function createCompositor(json, opts) {
    var compositor = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$compositor$2f$Compositor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
    opts = opts || {};
    var lib = {
        textures: {},
        parameters: {}
    };
    var afterLoad = function(shaderLib, textureLib) {
        for(var i = 0; i < json.nodes.length; i++){
            var nodeInfo = json.nodes[i];
            var node = createNode(nodeInfo, lib, opts);
            if (node) {
                compositor.addNode(node);
            }
        }
    };
    for(var name in json.parameters){
        var paramInfo = json.parameters[name];
        lib.parameters[name] = convertParameter(paramInfo);
    }
    // TODO load texture asynchronous
    loadTextures(json, lib, opts, function(textureLib) {
        lib.textures = textureLib;
        afterLoad();
    });
    return compositor;
}
function createNode(nodeInfo, lib, opts) {
    var type = nodeInfo.type || 'filter';
    var shaderSource;
    var inputs;
    var outputs;
    if (type === 'filter') {
        var shaderExp = nodeInfo.shader.trim();
        var res = shaderSourceReg.exec(shaderExp);
        if (res) {
            shaderSource = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Shader$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].source(res[1].trim());
        } else if (shaderExp.charAt(0) === '#') {
            shaderSource = lib.shaders[shaderExp.substr(1)];
        }
        if (!shaderSource) {
            shaderSource = shaderExp;
        }
        if (!shaderSource) {
            return;
        }
    }
    if (nodeInfo.inputs) {
        inputs = {};
        for(var name in nodeInfo.inputs){
            if (typeof nodeInfo.inputs[name] === 'string') {
                inputs[name] = nodeInfo.inputs[name];
            } else {
                inputs[name] = {
                    node: nodeInfo.inputs[name].node,
                    pin: nodeInfo.inputs[name].pin
                };
            }
        }
    }
    if (nodeInfo.outputs) {
        outputs = {};
        for(var name in nodeInfo.outputs){
            var outputInfo = nodeInfo.outputs[name];
            outputs[name] = {};
            if (outputInfo.attachment != null) {
                outputs[name].attachment = outputInfo.attachment;
            }
            if (outputInfo.keepLastFrame != null) {
                outputs[name].keepLastFrame = outputInfo.keepLastFrame;
            }
            if (outputInfo.outputLastFrame != null) {
                outputs[name].outputLastFrame = outputInfo.outputLastFrame;
            }
            if (outputInfo.parameters) {
                outputs[name].parameters = convertParameter(outputInfo.parameters);
            }
        }
    }
    var node;
    if (type === 'scene') {
        node = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$compositor$2f$SceneNode$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]({
            name: nodeInfo.name,
            scene: opts.scene,
            camera: opts.camera,
            outputs: outputs
        });
    } else if (type === 'texture') {
        node = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$compositor$2f$TextureNode$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]({
            name: nodeInfo.name,
            outputs: outputs
        });
    } else {
        node = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$compositor$2f$FilterNode$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]({
            name: nodeInfo.name,
            shader: shaderSource,
            inputs: inputs,
            outputs: outputs
        });
    }
    if (node) {
        if (nodeInfo.parameters) {
            for(var name in nodeInfo.parameters){
                var val = nodeInfo.parameters[name];
                if (typeof val === 'string') {
                    val = val.trim();
                    if (val.charAt(0) === '#') {
                        val = lib.textures[val.substr(1)];
                    } else {
                        node.on('beforerender', createSizeSetHandler(name, tryConvertExpr(val)));
                    }
                } else if (typeof val === 'function') {
                    node.on('beforerender', val);
                }
                node.setParameter(name, val);
            }
        }
        if (nodeInfo.defines && node.pass) {
            for(var name in nodeInfo.defines){
                var val = nodeInfo.defines[name];
                node.pass.material.define('fragment', name, val);
            }
        }
    }
    return node;
}
function defaultWidthFunc(width, height) {
    return width;
}
function defaultHeightFunc(width, height) {
    return height;
}
function convertParameter(paramInfo) {
    var param = {};
    if (!paramInfo) {
        return param;
    }
    [
        'type',
        'minFilter',
        'magFilter',
        'wrapS',
        'wrapT',
        'flipY',
        'useMipmap'
    ].forEach(function(name) {
        var val = paramInfo[name];
        if (val != null) {
            // Convert string to enum
            if (typeof val === 'string') {
                val = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Texture$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"][val];
            }
            param[name] = val;
        }
    });
    var sizeScale = paramInfo.scale || 1;
    [
        'width',
        'height'
    ].forEach(function(name) {
        if (paramInfo[name] != null) {
            var val = paramInfo[name];
            if (typeof val === 'string') {
                val = val.trim();
                param[name] = createSizeParser(name, tryConvertExpr(val), sizeScale);
            } else {
                param[name] = val;
            }
        }
    });
    if (!param.width) {
        param.width = defaultWidthFunc;
    }
    if (!param.height) {
        param.height = defaultHeightFunc;
    }
    if (paramInfo.useMipmap != null) {
        param.useMipmap = paramInfo.useMipmap;
    }
    return param;
}
function loadTextures(json, lib, opts, callback) {
    if (!json.textures) {
        callback({});
        return;
    }
    var textures = {};
    var loading = 0;
    var cbd = false;
    var textureRootPath = opts.textureRootPath;
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$util$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].each(json.textures, function(textureInfo, name) {
        var texture;
        var path = textureInfo.path;
        var parameters = convertParameter(textureInfo.parameters);
        if (Array.isArray(path) && path.length === 6) {
            if (textureRootPath) {
                path = path.map(function(item) {
                    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$util$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].relative2absolute(item, textureRootPath);
                });
            }
            texture = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$TextureCube$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](parameters);
        } else if (typeof path === 'string') {
            if (textureRootPath) {
                path = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$core$2f$util$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].relative2absolute(path, textureRootPath);
            }
            texture = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$Texture2D$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](parameters);
        } else {
            return;
        }
        texture.load(path);
        loading++;
        texture.once('success', function() {
            textures[name] = texture;
            loading--;
            if (loading === 0) {
                callback(textures);
                cbd = true;
            }
        });
    });
    if (loading === 0 && !cbd) {
        callback(textures);
    }
}
function createSizeSetHandler(name, exprFunc) {
    return function(renderer) {
        // PENDING viewport size or window size
        var dpr = renderer.getDevicePixelRatio();
        // PENDING If multiply dpr ?
        var width = renderer.getWidth();
        var height = renderer.getHeight();
        var result = exprFunc(width, height, dpr);
        this.setParameter(name, result);
    };
}
function createSizeParser(name, exprFunc, scale) {
    scale = scale || 1;
    return function(renderer) {
        var dpr = renderer.getDevicePixelRatio();
        var width = renderer.getWidth() * scale;
        var height = renderer.getHeight() * scale;
        return exprFunc(width, height, dpr);
    };
}
function tryConvertExpr(string) {
    // PENDING
    var exprRes = /^expr\((.*)\)$/.exec(string);
    if (exprRes) {
        try {
            var func = new Function('width', 'height', 'dpr', 'return ' + exprRes[1]);
            // Try run t
            func(1, 1);
            return func;
        } catch (e) {
            throw new Error('Invalid expression.');
        }
    }
}
const __TURBOPACK__default__export__ = createCompositor;
}}),
"[project]/node_modules/claygl/src/compositor/createCompositor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// DEPRECATED
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$createCompositor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/claygl/src/createCompositor.js [app-client] (ecmascript)");
;
const __TURBOPACK__default__export__ = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$claygl$2f$src$2f$createCompositor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"];
}}),
}]);

//# sourceMappingURL=node_modules_claygl_src_a2f673db._.js.map